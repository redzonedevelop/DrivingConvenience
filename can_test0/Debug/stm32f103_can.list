
stm32f103_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003134  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003240  08003240  00004240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e4  080032e4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080032e4  080032e4  000042e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032ec  080032ec  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ec  080032ec  000042ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032f0  080032f0  000042f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  08003350  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08003350  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f72  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1f  00000000  00000000  0000dff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000637  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888d  00000000  00000000  00010ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e511  00000000  00000000  00029434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bd9  00000000  00000000  00037945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002480  00000000  00000000  000bc564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000be9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003228 	.word	0x08003228

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003228 	.word	0x08003228

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ap_init>:

uint8_t data[8] = {0, 0, 0, 0, 0, 0, 0, 0};


void ap_init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  can_init(0x7f3, 0x106); // 필터 마스크, 필터 id를 인자로 입력
 8000160:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8000164:	f240 70f3 	movw	r0, #2035	@ 0x7f3
 8000168:	f000 fa34 	bl	80005d4 <can_init>
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}

08000170 <ap_main>:

void ap_main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  while(1)
  {
    send_message(0x102, &data[0]); // can 메시지 전송
 8000174:	4905      	ldr	r1, [pc, #20]	@ (800018c <ap_main+0x1c>)
 8000176:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800017a:	f000 f9ef 	bl	800055c <send_message>
    delay(1000); // 1초 딜레이
 800017e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000182:	f000 f80d 	bl	80001a0 <delay>
    send_message(0x102, &data[0]); // can 메시지 전송
 8000186:	bf00      	nop
 8000188:	e7f4      	b.n	8000174 <ap_main+0x4>
 800018a:	bf00      	nop
 800018c:	20000078 	.word	0x20000078

08000190 <bsp_init>:


void SystemClock_Config(void);

void bsp_init(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  HAL_Init();
 8000194:	f000 fb62 	bl	800085c <HAL_Init>
  SystemClock_Config();
 8000198:	f000 f80d 	bl	80001b6 <SystemClock_Config>
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}

080001a0 <delay>:

void delay(uint32_t ms)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f000 fbb9 	bl	8000920 <HAL_Delay>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b090      	sub	sp, #64	@ 0x40
 80001ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	2228      	movs	r2, #40	@ 0x28
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 fb9f 	bl	8002908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d8:	2302      	movs	r3, #2
 80001da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e0:	2310      	movs	r3, #16
 80001e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e4:	2302      	movs	r3, #2
 80001e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e8:	2300      	movs	r3, #0
 80001ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ec:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fcf6 	bl	8001be8 <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000202:	f000 f819 	bl	8000238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020a:	2302      	movs	r3, #2
 800020c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2102      	movs	r1, #2
 8000220:	4618      	mov	r0, r3
 8000222:	f001 ff63 	bl	80020ec <HAL_RCC_ClockConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022c:	f000 f804 	bl	8000238 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3740      	adds	r7, #64	@ 0x40
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800023c:	b672      	cpsid	i
}
 800023e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <Error_Handler+0x8>

08000244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800024a:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <HAL_MspInit+0x5c>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a14      	ldr	r2, [pc, #80]	@ (80002a0 <HAL_MspInit+0x5c>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <HAL_MspInit+0x5c>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <HAL_MspInit+0x5c>)
 8000264:	69db      	ldr	r3, [r3, #28]
 8000266:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <HAL_MspInit+0x5c>)
 8000268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800026c:	61d3      	str	r3, [r2, #28]
 800026e:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <HAL_MspInit+0x5c>)
 8000270:	69db      	ldr	r3, [r3, #28]
 8000272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800027a:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <HAL_MspInit+0x60>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <HAL_MspInit+0x60>)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40010000 	.word	0x40010000

080002a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <NMI_Handler+0x4>

080002b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <HardFault_Handler+0x4>

080002b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <MemManage_Handler+0x4>

080002c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <BusFault_Handler+0x4>

080002c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <UsageFault_Handler+0x4>

080002d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f8:	f000 faf6 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000306:	f000 ff80 	bl	800120a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000f4 	.word	0x200000f4

08000314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000318:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800031c:	f001 fc42 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800032c:	4a14      	ldr	r2, [pc, #80]	@ (8000380 <_sbrk+0x5c>)
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <_sbrk+0x60>)
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000338:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <_sbrk+0x64>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d102      	bne.n	8000346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <_sbrk+0x64>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <_sbrk+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <_sbrk+0x64>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	429a      	cmp	r2, r3
 8000352:	d207      	bcs.n	8000364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000354:	f002 fae0 	bl	8002918 <__errno>
 8000358:	4603      	mov	r3, r0
 800035a:	220c      	movs	r2, #12
 800035c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	e009      	b.n	8000378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000364:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <_sbrk+0x64>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800036a:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <_sbrk+0x64>)
 8000374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000376:	68fb      	ldr	r3, [r7, #12]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20005000 	.word	0x20005000
 8000384:	00000400 	.word	0x00000400
 8000388:	20000080 	.word	0x20000080
 800038c:	200002b0 	.word	0x200002b0

08000390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800039c:	f7ff fff8 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003a2:	490c      	ldr	r1, [pc, #48]	@ (80003d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003a4:	4a0c      	ldr	r2, [pc, #48]	@ (80003d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a09      	ldr	r2, [pc, #36]	@ (80003dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003b8:	4c09      	ldr	r4, [pc, #36]	@ (80003e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c6:	f002 faad 	bl	8002924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f002 fa41 	bl	8002850 <main>
  bx lr
 80003ce:	4770      	bx	lr
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80003d8:	080032f4 	.word	0x080032f4
  ldr r2, =_sbss
 80003dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80003e0:	200002b0 	.word	0x200002b0

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>
	...

080003e8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_CAN_Init+0x64>)
 80003ee:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <MX_CAN_Init+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80003f2:	4b16      	ldr	r3, [pc, #88]	@ (800044c <MX_CAN_Init+0x64>)
 80003f4:	2204      	movs	r2, #4
 80003f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_CAN_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003fe:	4b13      	ldr	r3, [pc, #76]	@ (800044c <MX_CAN_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000404:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_CAN_Init+0x64>)
 8000406:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800040a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_CAN_Init+0x64>)
 800040e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000412:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000414:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000420:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800042c:	4b07      	ldr	r3, [pc, #28]	@ (800044c <MX_CAN_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_CAN_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000438:	4804      	ldr	r0, [pc, #16]	@ (800044c <MX_CAN_Init+0x64>)
 800043a:	f000 fa95 	bl	8000968 <HAL_CAN_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000444:	f7ff fef8 	bl	8000238 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000f4 	.word	0x200000f4
 8000450:	40006400 	.word	0x40006400

08000454 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <HAL_CAN_MspInit+0x9c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d139      	bne.n	80004e8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a1e      	ldr	r2, [pc, #120]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800047e:	61d3      	str	r3, [r2, #28]
 8000480:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a18      	ldr	r2, [pc, #96]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <HAL_CAN_MspInit+0xa0>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	480f      	ldr	r0, [pc, #60]	@ (80004f8 <HAL_CAN_MspInit+0xa4>)
 80004ba:	f001 f9d7 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c8:	2303      	movs	r3, #3
 80004ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <HAL_CAN_MspInit+0xa4>)
 80004d4:	f001 f9ca 	bl	800186c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	2014      	movs	r0, #20
 80004de:	f001 f98e 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004e2:	2014      	movs	r0, #20
 80004e4:	f001 f9a7 	bl	8001836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40006400 	.word	0x40006400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <filter_init>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void filter_init(uint32_t filter_mask, uint32_t filter_id){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  canFilter1.FilterMaskIdHigh = filter_mask << 5; // 필터 마스크를 111 1111 0011 로 설정
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	015b      	lsls	r3, r3, #5
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <filter_init+0x58>)
 800050c:	6093      	str	r3, [r2, #8]
  canFilter1.FilterIdHigh = filter_id << 5; // 필터 Id를 001 0000 0110 으로 설정
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	015b      	lsls	r3, r3, #5
 8000512:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <filter_init+0x58>)
 8000514:	6013      	str	r3, [r2, #0]
  canFilter1.FilterMaskIdLow = filter_mask << 5;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	015b      	lsls	r3, r3, #5
 800051a:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <filter_init+0x58>)
 800051c:	60d3      	str	r3, [r2, #12]
  canFilter1.FilterIdLow = filter_id << 5;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	015b      	lsls	r3, r3, #5
 8000522:	4a0c      	ldr	r2, [pc, #48]	@ (8000554 <filter_init+0x58>)
 8000524:	6053      	str	r3, [r2, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK; // IDMASK 모드 사용
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <filter_init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <filter_init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0; // 0번 버퍼 사용
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <filter_init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <filter_init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <filter_init+0x58>)
 8000540:	2201      	movs	r2, #1
 8000542:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1); // 필터 적용
 8000544:	4903      	ldr	r1, [pc, #12]	@ (8000554 <filter_init+0x58>)
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <filter_init+0x5c>)
 8000548:	f000 fb09 	bl	8000b5e <HAL_CAN_ConfigFilter>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000084 	.word	0x20000084
 8000558:	200000f4 	.word	0x200000f4

0800055c <send_message>:

void send_message(uint32_t id, uint8_t* data){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  canTxHeader.StdId = id; // 송신 메시지 ID 설정 001 0000 0010
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <send_message+0x68>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6013      	str	r3, [r2, #0]
  canTxHeader.RTR = CAN_RTR_DATA; // Data frame 사용
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <send_message+0x68>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  canTxHeader.IDE = CAN_ID_STD; // 11비트 ID 사용
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <send_message+0x68>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  canTxHeader.DLC = 8; // 8Byte 데이터 크기 사용
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <send_message+0x68>)
 800057a:	2208      	movs	r2, #8
 800057c:	611a      	str	r2, [r3, #16]

  for(int i=0;i<8;i++) {
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e00b      	b.n	800059c <send_message+0x40>
    can1Tx0Data[i] = data[i];
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	7819      	ldrb	r1, [r3, #0]
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <send_message+0x6c>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	460a      	mov	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<8;i++) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b07      	cmp	r3, #7
 80005a0:	ddf0      	ble.n	8000584 <send_message+0x28>
  }

  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan); // 비어 있는 메일 박스 번호가 리턴된다.
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <send_message+0x70>)
 80005a4:	f000 fcb7 	bl	8000f16 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <send_message+0x74>)
 80005ac:	6013      	str	r3, [r2, #0]
  HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &can1Tx0Data[0], &TxMailBox); // 해당 메일 박스에 송신할 메시지를 추가
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <send_message+0x74>)
 80005b0:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <send_message+0x6c>)
 80005b2:	4904      	ldr	r1, [pc, #16]	@ (80005c4 <send_message+0x68>)
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <send_message+0x70>)
 80005b6:	f000 fbdf 	bl	8000d78 <HAL_CAN_AddTxMessage>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000c8 	.word	0x200000c8
 80005c8:	200000ec 	.word	0x200000ec
 80005cc:	200000f4 	.word	0x200000f4
 80005d0:	200000e8 	.word	0x200000e8

080005d4 <can_init>:

void can_init(uint32_t filter_mask, uint32_t filter_id){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  filter_init(filter_mask, filter_id); // can 필터 생성
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff8b 	bl	80004fc <filter_init>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // 수신 인터럽트 ON
 80005e6:	2102      	movs	r1, #2
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <can_init+0x28>)
 80005ea:	f000 fde9 	bl	80011c0 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan); // can 모듈 시작
 80005ee:	4803      	ldr	r0, [pc, #12]	@ (80005fc <can_init+0x28>)
 80005f0:	f000 fb7e 	bl	8000cf0 <HAL_CAN_Start>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000f4 	.word	0x200000f4

08000600 <print_message>:

void print_message(){
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b0a7      	sub	sp, #156	@ 0x9c
 8000604:	af08      	add	r7, sp, #32
  // 메시지를 문자열로 변환
  char uartBuf[100];

  snprintf(uartBuf, sizeof(uartBuf),
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <print_message+0x88>)
 8000608:	681b      	ldr	r3, [r3, #0]
  "CAN ID: 0x%03X | DATA: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
  canRxHeader.StdId,
  can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <print_message+0x8c>)
 800060c:	7812      	ldrb	r2, [r2, #0]
  snprintf(uartBuf, sizeof(uartBuf),
 800060e:	4611      	mov	r1, r2
  can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 8000610:	4a1e      	ldr	r2, [pc, #120]	@ (800068c <print_message+0x8c>)
 8000612:	7852      	ldrb	r2, [r2, #1]
  snprintf(uartBuf, sizeof(uartBuf),
 8000614:	4614      	mov	r4, r2
  can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 8000616:	4a1d      	ldr	r2, [pc, #116]	@ (800068c <print_message+0x8c>)
 8000618:	7892      	ldrb	r2, [r2, #2]
  snprintf(uartBuf, sizeof(uartBuf),
 800061a:	4615      	mov	r5, r2
  can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <print_message+0x8c>)
 800061e:	78d2      	ldrb	r2, [r2, #3]
  snprintf(uartBuf, sizeof(uartBuf),
 8000620:	4616      	mov	r6, r2
  can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 8000622:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <print_message+0x8c>)
 8000624:	7912      	ldrb	r2, [r2, #4]
  snprintf(uartBuf, sizeof(uartBuf),
 8000626:	60fa      	str	r2, [r7, #12]
  can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 8000628:	4a18      	ldr	r2, [pc, #96]	@ (800068c <print_message+0x8c>)
 800062a:	7952      	ldrb	r2, [r2, #5]
  snprintf(uartBuf, sizeof(uartBuf),
 800062c:	60ba      	str	r2, [r7, #8]
  can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 800062e:	4a17      	ldr	r2, [pc, #92]	@ (800068c <print_message+0x8c>)
 8000630:	7992      	ldrb	r2, [r2, #6]
  snprintf(uartBuf, sizeof(uartBuf),
 8000632:	607a      	str	r2, [r7, #4]
  can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 8000634:	4a15      	ldr	r2, [pc, #84]	@ (800068c <print_message+0x8c>)
 8000636:	79d2      	ldrb	r2, [r2, #7]
  snprintf(uartBuf, sizeof(uartBuf),
 8000638:	f107 0014 	add.w	r0, r7, #20
 800063c:	9207      	str	r2, [sp, #28]
 800063e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000642:	f8cd c018 	str.w	ip, [sp, #24]
 8000646:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800064a:	f8cd c014 	str.w	ip, [sp, #20]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	9204      	str	r2, [sp, #16]
 8000652:	9603      	str	r6, [sp, #12]
 8000654:	9502      	str	r5, [sp, #8]
 8000656:	9401      	str	r4, [sp, #4]
 8000658:	9100      	str	r1, [sp, #0]
 800065a:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <print_message+0x90>)
 800065c:	2164      	movs	r1, #100	@ 0x64
 800065e:	f002 f91f 	bl	80028a0 <sniprintf>

  // UART2로 송신 (USB-Serial 통해 PC로 전송됨)
  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fd70 	bl	800014c <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f107 0114 	add.w	r1, r7, #20
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <print_message+0x94>)
 800067a:	f001 ff15 	bl	80024a8 <HAL_UART_Transmit>
}
 800067e:	bf00      	nop
 8000680:	377c      	adds	r7, #124	@ 0x7c
 8000682:	46bd      	mov	sp, r7
 8000684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000686:	bf00      	nop
 8000688:	200000ac 	.word	0x200000ac
 800068c:	200000e0 	.word	0x200000e0
 8000690:	08003240 	.word	0x08003240
 8000694:	2000011c 	.word	0x2000011c

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_GPIO_Init+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	4815      	ldr	r0, [pc, #84]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000712:	f001 fa2f 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_GPIO_Init+0xd4>)
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_GPIO_Init+0xd8>)
 800072c:	f001 f89e 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000748:	f001 f890 	bl	800186c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f001 f854 	bl	80017fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000756:	2028      	movs	r0, #40	@ 0x28
 8000758:	f001 f86d 	bl	8001836 <HAL_NVIC_EnableIRQ>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40010800 	.word	0x40010800
 800076c:	10110000 	.word	0x10110000
 8000770:	40011000 	.word	0x40011000

08000774 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 fe2c 	bl	8002408 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f7ff fd3f 	bl	8000238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000011c 	.word	0x2000011c
 80007c4:	40004400 	.word	0x40004400

080007c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <HAL_UART_MspInit+0x70>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d123      	bne.n	8000830 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_UART_MspInit+0x74>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a13      	ldr	r2, [pc, #76]	@ (800083c <HAL_UART_MspInit+0x74>)
 80007ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_UART_MspInit+0x74>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_UART_MspInit+0x74>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <HAL_UART_MspInit+0x74>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <HAL_UART_MspInit+0x74>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000818:	230c      	movs	r3, #12
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <HAL_UART_MspInit+0x78>)
 800082c:	f001 f81e 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <hw_init>:




void hw_init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  bsp_init();
 8000848:	f7ff fca2 	bl	8000190 <bsp_init>
  MX_GPIO_Init();
 800084c:	f7ff ff24 	bl	8000698 <MX_GPIO_Init>
  MX_CAN_Init();
 8000850:	f7ff fdca 	bl	80003e8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000854:	f7ff ff8e 	bl	8000774 <MX_USART2_UART_Init>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 ffbb 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff fce4 	bl	8000244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 ffd3 	bl	8001852 <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 ff9b 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x1c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x20>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a03      	ldr	r2, [pc, #12]	@ (8000908 <HAL_IncTick+0x20>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000008 	.word	0x20000008
 8000908:	20000164 	.word	0x20000164

0800090c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b02      	ldr	r3, [pc, #8]	@ (800091c <HAL_GetTick+0x10>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000164 	.word	0x20000164

08000920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fff0 	bl	800090c <HAL_GetTick>
 800092c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000946:	bf00      	nop
 8000948:	f7ff ffe0 	bl	800090c <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e0ed      	b.n	8000b56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fd64 	bl	8000454 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0201 	orr.w	r2, r2, #1
 800099a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800099c:	f7ff ffb6 	bl	800090c <HAL_GetTick>
 80009a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009a2:	e012      	b.n	80009ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009a4:	f7ff ffb2 	bl	800090c <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b0a      	cmp	r3, #10
 80009b0:	d90b      	bls.n	80009ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2205      	movs	r2, #5
 80009c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e0c5      	b.n	8000b56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0e5      	beq.n	80009a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0202 	bic.w	r2, r2, #2
 80009e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009e8:	f7ff ff90 	bl	800090c <HAL_GetTick>
 80009ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ee:	e012      	b.n	8000a16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f0:	f7ff ff8c 	bl	800090c <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	d90b      	bls.n	8000a16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e09f      	b.n	8000b56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1e5      	bne.n	80009f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7e1b      	ldrb	r3, [r3, #24]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d108      	bne.n	8000a3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e007      	b.n	8000a4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7e5b      	ldrb	r3, [r3, #25]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d108      	bne.n	8000a68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7e9b      	ldrb	r3, [r3, #26]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0220 	orr.w	r2, r2, #32
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e007      	b.n	8000aa2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0220 	bic.w	r2, r2, #32
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7edb      	ldrb	r3, [r3, #27]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0210 	bic.w	r2, r2, #16
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0210 	orr.w	r2, r2, #16
 8000aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7f1b      	ldrb	r3, [r3, #28]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d108      	bne.n	8000ae6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0208 	orr.w	r2, r2, #8
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e007      	b.n	8000af6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0208 	bic.w	r2, r2, #8
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7f5b      	ldrb	r3, [r3, #29]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d108      	bne.n	8000b10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 0204 	orr.w	r2, r2, #4
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	ea42 0103 	orr.w	r1, r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b087      	sub	sp, #28
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b76:	7cfb      	ldrb	r3, [r7, #19]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d003      	beq.n	8000b84 <HAL_CAN_ConfigFilter+0x26>
 8000b7c:	7cfb      	ldrb	r3, [r7, #19]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	f040 80aa 	bne.w	8000cd8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b8a:	f043 0201 	orr.w	r2, r3, #1
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d123      	bne.n	8000c06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	401a      	ands	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000be0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3248      	adds	r2, #72	@ 0x48
 8000be6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bfa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bfc:	6979      	ldr	r1, [r7, #20]
 8000bfe:	3348      	adds	r3, #72	@ 0x48
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	440b      	add	r3, r1
 8000c04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d122      	bne.n	8000c54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3248      	adds	r2, #72	@ 0x48
 8000c34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c4a:	6979      	ldr	r1, [r7, #20]
 8000c4c:	3348      	adds	r3, #72	@ 0x48
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c6e:	e007      	b.n	8000c80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d109      	bne.n	8000c9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c9a:	e007      	b.n	8000cac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d107      	bne.n	8000cc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cca:	f023 0201 	bic.w	r2, r3, #1
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e006      	b.n	8000ce6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
  }
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d12e      	bne.n	8000d62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2202      	movs	r2, #2
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d1c:	f7ff fdf6 	bl	800090c <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d22:	e012      	b.n	8000d4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d24:	f7ff fdf2 	bl	800090c <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	d90b      	bls.n	8000d4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2205      	movs	r2, #5
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e012      	b.n	8000d70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e5      	bne.n	8000d24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e006      	b.n	8000d70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
  }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d96:	7ffb      	ldrb	r3, [r7, #31]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <HAL_CAN_AddTxMessage+0x2c>
 8000d9c:	7ffb      	ldrb	r3, [r7, #31]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f040 80ad 	bne.w	8000efe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d105      	bne.n	8000dc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8095 	beq.w	8000eee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	0e1b      	lsrs	r3, r3, #24
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10d      	bne.n	8000dfc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	6809      	ldr	r1, [r1, #0]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3318      	adds	r3, #24
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	440b      	add	r3, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e00f      	b.n	8000e1c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e06:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e10:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3318      	adds	r3, #24
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	440b      	add	r3, r1
 8000e1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3318      	adds	r3, #24
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	7d1b      	ldrb	r3, [r3, #20]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d111      	bne.n	8000e5c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3318      	adds	r3, #24
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	3304      	adds	r3, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	6811      	ldr	r1, [r2, #0]
 8000e4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3318      	adds	r3, #24
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	440b      	add	r3, r1
 8000e58:	3304      	adds	r3, #4
 8000e5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3307      	adds	r3, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	061a      	lsls	r2, r3, #24
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3306      	adds	r3, #6
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3305      	adds	r3, #5
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	4313      	orrs	r3, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	3204      	adds	r2, #4
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	4610      	mov	r0, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	6811      	ldr	r1, [r2, #0]
 8000e84:	ea43 0200 	orr.w	r2, r3, r0
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3303      	adds	r3, #3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	061a      	lsls	r2, r3, #24
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	ea43 0200 	orr.w	r2, r3, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6811      	ldr	r1, [r2, #0]
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	440b      	add	r3, r1
 8000ee8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e00e      	b.n	8000f0c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e006      	b.n	8000f0c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
  }
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3724      	adds	r7, #36	@ 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f28:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000f30:	7afb      	ldrb	r3, [r7, #11]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d11d      	bne.n	8000f72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b087      	sub	sp, #28
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d003      	beq.n	8000fa2 <HAL_CAN_GetRxMessage+0x24>
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	f040 8103 	bne.w	80011a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10e      	bne.n	8000fc6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d116      	bne.n	8000fe4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0f7      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d107      	bne.n	8000fe4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0e8      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	331b      	adds	r3, #27
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0204 	and.w	r2, r3, #4
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	331b      	adds	r3, #27
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0d5b      	lsrs	r3, r3, #21
 8001012:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e00b      	b.n	8001034 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	331b      	adds	r3, #27
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0202 	and.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	331b      	adds	r3, #27
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2208      	movs	r2, #8
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	e00b      	b.n	8001082 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	331b      	adds	r3, #27
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	3304      	adds	r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 020f 	and.w	r2, r3, #15
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	331b      	adds	r3, #27
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b2da      	uxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	331b      	adds	r3, #27
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0a1a      	lsrs	r2, r3, #8
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0c1a      	lsrs	r2, r3, #16
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3302      	adds	r3, #2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0e1a      	lsrs	r2, r3, #24
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3303      	adds	r3, #3
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0a1a      	lsrs	r2, r3, #8
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3305      	adds	r3, #5
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0c1a      	lsrs	r2, r3, #16
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3306      	adds	r3, #6
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0e1a      	lsrs	r2, r3, #24
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3307      	adds	r3, #7
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d108      	bne.n	8001194 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e006      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d002      	beq.n	80011de <HAL_CAN_ActivateNotification+0x1e>
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d109      	bne.n	80011f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6959      	ldr	r1, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e006      	b.n	8001200 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
  }
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b08a      	sub	sp, #40	@ 0x28
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d07c      	beq.n	800134a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d023      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f983 	bl	8001578 <HAL_CAN_TxMailbox0CompleteCallback>
 8001272:	e016      	b.n	80012a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
 8001286:	e00c      	b.n	80012a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
 800129a:	e002      	b.n	80012a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f986 	bl	80015ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d024      	beq.n	80012f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f962 	bl	800158a <HAL_CAN_TxMailbox1CompleteCallback>
 80012c6:	e016      	b.n	80012f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012da:	e00c      	b.n	80012f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ee:	e002      	b.n	80012f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f965 	bl	80015c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d024      	beq.n	800134a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001308:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f941 	bl	800159c <HAL_CAN_TxMailbox2CompleteCallback>
 800131a:	e016      	b.n	800134a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e00c      	b.n	800134a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
 8001342:	e002      	b.n	800134a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f944 	bl	80015d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2210      	movs	r2, #16
 800136c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f92a 	bl	80015e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f001 fa5d 	bl	8002868 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00c      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2210      	movs	r2, #16
 80013d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2208      	movs	r2, #8
 80013ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f90a 	bl	8001608 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d009      	beq.n	8001412 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f8f2 	bl	80015f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2210      	movs	r2, #16
 800142c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f8f3 	bl	800161a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2208      	movs	r2, #8
 800144e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f8eb 	bl	800162c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d07b      	beq.n	8001558 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	d072      	beq.n	8001550 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d043      	beq.n	8001550 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03e      	beq.n	8001550 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014d8:	2b60      	cmp	r3, #96	@ 0x60
 80014da:	d02b      	beq.n	8001534 <HAL_CAN_IRQHandler+0x32a>
 80014dc:	2b60      	cmp	r3, #96	@ 0x60
 80014de:	d82e      	bhi.n	800153e <HAL_CAN_IRQHandler+0x334>
 80014e0:	2b50      	cmp	r3, #80	@ 0x50
 80014e2:	d022      	beq.n	800152a <HAL_CAN_IRQHandler+0x320>
 80014e4:	2b50      	cmp	r3, #80	@ 0x50
 80014e6:	d82a      	bhi.n	800153e <HAL_CAN_IRQHandler+0x334>
 80014e8:	2b40      	cmp	r3, #64	@ 0x40
 80014ea:	d019      	beq.n	8001520 <HAL_CAN_IRQHandler+0x316>
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d826      	bhi.n	800153e <HAL_CAN_IRQHandler+0x334>
 80014f0:	2b30      	cmp	r3, #48	@ 0x30
 80014f2:	d010      	beq.n	8001516 <HAL_CAN_IRQHandler+0x30c>
 80014f4:	2b30      	cmp	r3, #48	@ 0x30
 80014f6:	d822      	bhi.n	800153e <HAL_CAN_IRQHandler+0x334>
 80014f8:	2b10      	cmp	r3, #16
 80014fa:	d002      	beq.n	8001502 <HAL_CAN_IRQHandler+0x2f8>
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d005      	beq.n	800150c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001500:	e01d      	b.n	800153e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800150a:	e019      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001514:	e014      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800151e:	e00f      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001528:	e00a      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001532:	e005      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800153c:	e000      	b.n	8001540 <HAL_CAN_IRQHandler+0x336>
            break;
 800153e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800154e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2204      	movs	r2, #4
 8001556:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f867 	bl	800163e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4906      	ldr	r1, [pc, #24]	@ (80016e8 <__NVIC_EnableIRQ+0x34>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	@ (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	@ (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	@ 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	@ 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff90 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff2d 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff42 	bl	8001698 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff90 	bl	8001740 <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5f 	bl	80016ec <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff35 	bl	80016b4 <__NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffa2 	bl	80017a4 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b08b      	sub	sp, #44	@ 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	e169      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001880:	2201      	movs	r2, #1
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8158 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d05e      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018a8:	4a98      	ldr	r2, [pc, #608]	@ (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d875      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ae:	4a98      	ldr	r2, [pc, #608]	@ (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d058      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018b4:	4a96      	ldr	r2, [pc, #600]	@ (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d86f      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ba:	4a96      	ldr	r2, [pc, #600]	@ (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d052      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018c0:	4a94      	ldr	r2, [pc, #592]	@ (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d869      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018c6:	4a94      	ldr	r2, [pc, #592]	@ (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04c      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018cc:	4a92      	ldr	r2, [pc, #584]	@ (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d863      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018d2:	4a92      	ldr	r2, [pc, #584]	@ (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d046      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018d8:	4a90      	ldr	r2, [pc, #576]	@ (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d85d      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d82a      	bhi.n	8001938 <HAL_GPIO_Init+0xcc>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d859      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018e6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <HAL_GPIO_Init+0x80>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001953 	.word	0x08001953
 80018f8:	08001995 	.word	0x08001995
 80018fc:	0800199b 	.word	0x0800199b
 8001900:	0800199b 	.word	0x0800199b
 8001904:	0800199b 	.word	0x0800199b
 8001908:	0800199b 	.word	0x0800199b
 800190c:	0800199b 	.word	0x0800199b
 8001910:	0800199b 	.word	0x0800199b
 8001914:	0800199b 	.word	0x0800199b
 8001918:	0800199b 	.word	0x0800199b
 800191c:	0800199b 	.word	0x0800199b
 8001920:	0800199b 	.word	0x0800199b
 8001924:	0800199b 	.word	0x0800199b
 8001928:	0800199b 	.word	0x0800199b
 800192c:	0800199b 	.word	0x0800199b
 8001930:	08001949 	.word	0x08001949
 8001934:	0800195d 	.word	0x0800195d
 8001938:	4a79      	ldr	r2, [pc, #484]	@ (8001b20 <HAL_GPIO_Init+0x2b4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193e:	e02c      	b.n	800199a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e029      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	3304      	adds	r3, #4
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e024      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	3308      	adds	r3, #8
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e01f      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	330c      	adds	r3, #12
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e01a      	b.n	800199c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196e:	2304      	movs	r3, #4
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e013      	b.n	800199c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	611a      	str	r2, [r3, #16]
          break;
 8001986:	e009      	b.n	800199c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	615a      	str	r2, [r3, #20]
          break;
 8001992:	e003      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x130>
          break;
 800199a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	@ 0xff
 80019a0:	d801      	bhi.n	80019a6 <HAL_GPIO_Init+0x13a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_Init+0x13e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	@ 0xff
 80019b0:	d802      	bhi.n	80019b8 <HAL_GPIO_Init+0x14c>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x152>
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	3b08      	subs	r3, #8
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	210f      	movs	r1, #15
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80b1 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a04:	4a48      	ldr	r2, [pc, #288]	@ (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a40      	ldr	r2, [pc, #256]	@ (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_GPIO_Init+0x1ec>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3f      	ldr	r2, [pc, #252]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1e8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3d      	ldr	r2, [pc, #244]	@ (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1e0>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e004      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5c:	f002 0203 	and.w	r2, r2, #3
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	4093      	lsls	r3, r2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a6a:	492f      	ldr	r1, [pc, #188]	@ (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a84:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	492c      	ldr	r1, [pc, #176]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a92:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4928      	ldr	r1, [pc, #160]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4922      	ldr	r1, [pc, #136]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	491e      	ldr	r1, [pc, #120]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4918      	ldr	r1, [pc, #96]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4914      	ldr	r1, [pc, #80]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d021      	beq.n	8001b40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e021      	b.n	8001b4e <HAL_GPIO_Init+0x2e2>
 8001b0a:	bf00      	nop
 8001b0c:	10320000 	.word	0x10320000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10220000 	.word	0x10220000
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4909      	ldr	r1, [pc, #36]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f ae8e 	bne.w	8001880 <HAL_GPIO_Init+0x14>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	372c      	adds	r7, #44	@ 0x2c
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f806 	bl	8001bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e272      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e24c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fe22 	bl	800090c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe fe1e 	bl	800090c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fe0e 	bl	800090c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fe0a 	bl	800090c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe fdc3 	bl	800090c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe fdbf 	bl	800090c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1a1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fda2 	bl	800090c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fd9e 	bl	800090c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e180      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fd82 	bl	800090c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fd7e 	bl	800090c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e160      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 face 	bl	80023cc <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fd68 	bl	800090c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe fd64 	bl	800090c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e146      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a87      	ldr	r2, [pc, #540]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fd25 	bl	800090c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe fd21 	bl	800090c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e103      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b61      	ldr	r3, [pc, #388]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b5e      	ldr	r3, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fcd5 	bl	800090c <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe fcd1 	bl	800090c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0b1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fcbf 	bl	800090c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fcbb 	bl	800090c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fc8f 	bl	800090c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fc8b 	bl	800090c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4921      	ldr	r1, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	491b      	ldr	r1, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fc5f 	bl	800090c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fc5b 	bl	800090c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e035      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fc48 	bl	800090c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fc44 	bl	800090c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e019      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x500>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fb96 	bl	800090c <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fb92 	bl	800090c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe faf4 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003284 	.word	0x08003284
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ee:	e027      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	e027      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002322:	fb03 f202 	mul.w	r2, r3, r2
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e004      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	613b      	str	r3, [r7, #16]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	0800329c 	.word	0x0800329c
 8002360:	080032ac 	.word	0x080032ac
 8002364:	003d0900 	.word	0x003d0900

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x10>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff2 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003294 	.word	0x08003294

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffde 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0adb      	lsrs	r3, r3, #11
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08003294 	.word	0x08003294

080023cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <RCC_Delay+0x34>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <RCC_Delay+0x38>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0a5b      	lsrs	r3, r3, #9
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e8:	bf00      	nop
  }
  while (Delay --);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	60fa      	str	r2, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f9      	bne.n	80023e8 <RCC_Delay+0x1c>
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000000 	.word	0x20000000
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e042      	b.n	80024a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe f9ca 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	@ 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f971 	bl	8002734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d175      	bne.n	80025b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Transmit+0x2c>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e06e      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	@ 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fa11 	bl	800090c <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800251c:	e02e      	b.n	800257c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f848 	bl	80025be <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e03a      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e007      	b.n	800256e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cb      	bne.n	800251e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	@ 0x40
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f814 	bl	80025be <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e006      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ce:	e03b      	b.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d037      	beq.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7fe f998 	bl	800090c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <UART_WaitOnFlagUntilTimeout+0x30>
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e03a      	b.n	8002668 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b80      	cmp	r3, #128	@ 0x80
 8002604:	d020      	beq.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b40      	cmp	r3, #64	@ 0x40
 800260a:	d01d      	beq.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d116      	bne.n	8002648 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f81d 	bl	8002670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2208      	movs	r2, #8
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e00f      	b.n	8002668 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	429a      	cmp	r2, r3
 8002664:	d0b4      	beq.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002670:	b480      	push	{r7}
 8002672:	b095      	sub	sp, #84	@ 0x54
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002682:	e853 3f00 	ldrex	r3, [r3]
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800268e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002698:	643a      	str	r2, [r7, #64]	@ 0x40
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800269e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3314      	adds	r3, #20
 80026b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3314      	adds	r3, #20
 80026ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d4:	e841 2300 	strex	r3, r2, [r1]
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e5      	bne.n	80026ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d119      	bne.n	800271c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f023 0310 	bic.w	r3, r3, #16
 80026fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002708:	61ba      	str	r2, [r7, #24]
 800270a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270c:	6979      	ldr	r1, [r7, #20]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	613b      	str	r3, [r7, #16]
   return(result);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e5      	bne.n	80026e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800272a:	bf00      	nop
 800272c:	3754      	adds	r7, #84	@ 0x54
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800276e:	f023 030c 	bic.w	r3, r3, #12
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	430b      	orrs	r3, r1
 800277a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <UART_SetConfig+0x114>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d103      	bne.n	80027a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800279c:	f7ff fe02 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	e002      	b.n	80027aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff fdea 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009a      	lsls	r2, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <UART_SetConfig+0x118>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	0119      	lsls	r1, r3, #4
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <UART_SetConfig+0x118>)
 80027e2:	fba3 0302 	umull	r0, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2064      	movs	r0, #100	@ 0x64
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	3332      	adds	r3, #50	@ 0x32
 80027f4:	4a15      	ldr	r2, [pc, #84]	@ (800284c <UART_SetConfig+0x118>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002800:	4419      	add	r1, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <UART_SetConfig+0x118>)
 800281a:	fba3 0302 	umull	r0, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2064      	movs	r0, #100	@ 0x64
 8002822:	fb00 f303 	mul.w	r3, r0, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3332      	adds	r3, #50	@ 0x32
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <UART_SetConfig+0x118>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	440a      	add	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40013800 	.word	0x40013800
 800284c:	51eb851f 	.word	0x51eb851f

08002850 <main>:




int main(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  hw_init();
 8002854:	f7fd fff6 	bl	8000844 <hw_init>
  ap_init();
 8002858:	f7fd fc80 	bl	800015c <ap_init>

  ap_main();
 800285c:	f7fd fc88 	bl	8000170 <ap_main>
  return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) // can 메시지 수신 인터럽트
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d107      	bne.n	800288a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    {
      HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, can1Rx0Data);
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800287c:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800287e:	2100      	movs	r1, #0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fb7c 	bl	8000f7e <HAL_CAN_GetRxMessage>
      print_message(); // 메시지를 UART로 출력
 8002886:	f7fd febb 	bl	8000600 <print_message>
    }

}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40006400 	.word	0x40006400
 8002898:	200000e0 	.word	0x200000e0
 800289c:	200000ac 	.word	0x200000ac

080028a0 <sniprintf>:
 80028a0:	b40c      	push	{r2, r3}
 80028a2:	b530      	push	{r4, r5, lr}
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <sniprintf+0x64>)
 80028a6:	1e0c      	subs	r4, r1, #0
 80028a8:	681d      	ldr	r5, [r3, #0]
 80028aa:	b09d      	sub	sp, #116	@ 0x74
 80028ac:	da08      	bge.n	80028c0 <sniprintf+0x20>
 80028ae:	238b      	movs	r3, #139	@ 0x8b
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	b01d      	add	sp, #116	@ 0x74
 80028b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028bc:	b002      	add	sp, #8
 80028be:	4770      	bx	lr
 80028c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80028c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80028c8:	bf0c      	ite	eq
 80028ca:	4623      	moveq	r3, r4
 80028cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	9307      	str	r3, [sp, #28]
 80028d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028d8:	9002      	str	r0, [sp, #8]
 80028da:	9006      	str	r0, [sp, #24]
 80028dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80028e0:	4628      	mov	r0, r5
 80028e2:	ab21      	add	r3, sp, #132	@ 0x84
 80028e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80028e6:	a902      	add	r1, sp, #8
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	f000 f993 	bl	8002c14 <_svfiprintf_r>
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	bfbc      	itt	lt
 80028f2:	238b      	movlt	r3, #139	@ 0x8b
 80028f4:	602b      	strlt	r3, [r5, #0]
 80028f6:	2c00      	cmp	r4, #0
 80028f8:	d0dd      	beq.n	80028b6 <sniprintf+0x16>
 80028fa:	2200      	movs	r2, #0
 80028fc:	9b02      	ldr	r3, [sp, #8]
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e7d9      	b.n	80028b6 <sniprintf+0x16>
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c

08002908 <memset>:
 8002908:	4603      	mov	r3, r0
 800290a:	4402      	add	r2, r0
 800290c:	4293      	cmp	r3, r2
 800290e:	d100      	bne.n	8002912 <memset+0xa>
 8002910:	4770      	bx	lr
 8002912:	f803 1b01 	strb.w	r1, [r3], #1
 8002916:	e7f9      	b.n	800290c <memset+0x4>

08002918 <__errno>:
 8002918:	4b01      	ldr	r3, [pc, #4]	@ (8002920 <__errno+0x8>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000000c 	.word	0x2000000c

08002924 <__libc_init_array>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	2600      	movs	r6, #0
 8002928:	4d0c      	ldr	r5, [pc, #48]	@ (800295c <__libc_init_array+0x38>)
 800292a:	4c0d      	ldr	r4, [pc, #52]	@ (8002960 <__libc_init_array+0x3c>)
 800292c:	1b64      	subs	r4, r4, r5
 800292e:	10a4      	asrs	r4, r4, #2
 8002930:	42a6      	cmp	r6, r4
 8002932:	d109      	bne.n	8002948 <__libc_init_array+0x24>
 8002934:	f000 fc78 	bl	8003228 <_init>
 8002938:	2600      	movs	r6, #0
 800293a:	4d0a      	ldr	r5, [pc, #40]	@ (8002964 <__libc_init_array+0x40>)
 800293c:	4c0a      	ldr	r4, [pc, #40]	@ (8002968 <__libc_init_array+0x44>)
 800293e:	1b64      	subs	r4, r4, r5
 8002940:	10a4      	asrs	r4, r4, #2
 8002942:	42a6      	cmp	r6, r4
 8002944:	d105      	bne.n	8002952 <__libc_init_array+0x2e>
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	f855 3b04 	ldr.w	r3, [r5], #4
 800294c:	4798      	blx	r3
 800294e:	3601      	adds	r6, #1
 8002950:	e7ee      	b.n	8002930 <__libc_init_array+0xc>
 8002952:	f855 3b04 	ldr.w	r3, [r5], #4
 8002956:	4798      	blx	r3
 8002958:	3601      	adds	r6, #1
 800295a:	e7f2      	b.n	8002942 <__libc_init_array+0x1e>
 800295c:	080032ec 	.word	0x080032ec
 8002960:	080032ec 	.word	0x080032ec
 8002964:	080032ec 	.word	0x080032ec
 8002968:	080032f0 	.word	0x080032f0

0800296c <__retarget_lock_acquire_recursive>:
 800296c:	4770      	bx	lr

0800296e <__retarget_lock_release_recursive>:
 800296e:	4770      	bx	lr

08002970 <_free_r>:
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4605      	mov	r5, r0
 8002974:	2900      	cmp	r1, #0
 8002976:	d040      	beq.n	80029fa <_free_r+0x8a>
 8002978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800297c:	1f0c      	subs	r4, r1, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	bfb8      	it	lt
 8002982:	18e4      	addlt	r4, r4, r3
 8002984:	f000 f8de 	bl	8002b44 <__malloc_lock>
 8002988:	4a1c      	ldr	r2, [pc, #112]	@ (80029fc <_free_r+0x8c>)
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	b933      	cbnz	r3, 800299c <_free_r+0x2c>
 800298e:	6063      	str	r3, [r4, #4]
 8002990:	6014      	str	r4, [r2, #0]
 8002992:	4628      	mov	r0, r5
 8002994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002998:	f000 b8da 	b.w	8002b50 <__malloc_unlock>
 800299c:	42a3      	cmp	r3, r4
 800299e:	d908      	bls.n	80029b2 <_free_r+0x42>
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	1821      	adds	r1, r4, r0
 80029a4:	428b      	cmp	r3, r1
 80029a6:	bf01      	itttt	eq
 80029a8:	6819      	ldreq	r1, [r3, #0]
 80029aa:	685b      	ldreq	r3, [r3, #4]
 80029ac:	1809      	addeq	r1, r1, r0
 80029ae:	6021      	streq	r1, [r4, #0]
 80029b0:	e7ed      	b.n	800298e <_free_r+0x1e>
 80029b2:	461a      	mov	r2, r3
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b10b      	cbz	r3, 80029bc <_free_r+0x4c>
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	d9fa      	bls.n	80029b2 <_free_r+0x42>
 80029bc:	6811      	ldr	r1, [r2, #0]
 80029be:	1850      	adds	r0, r2, r1
 80029c0:	42a0      	cmp	r0, r4
 80029c2:	d10b      	bne.n	80029dc <_free_r+0x6c>
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	4401      	add	r1, r0
 80029c8:	1850      	adds	r0, r2, r1
 80029ca:	4283      	cmp	r3, r0
 80029cc:	6011      	str	r1, [r2, #0]
 80029ce:	d1e0      	bne.n	8002992 <_free_r+0x22>
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4408      	add	r0, r1
 80029d6:	6010      	str	r0, [r2, #0]
 80029d8:	6053      	str	r3, [r2, #4]
 80029da:	e7da      	b.n	8002992 <_free_r+0x22>
 80029dc:	d902      	bls.n	80029e4 <_free_r+0x74>
 80029de:	230c      	movs	r3, #12
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	e7d6      	b.n	8002992 <_free_r+0x22>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	1821      	adds	r1, r4, r0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	bf01      	itttt	eq
 80029ec:	6819      	ldreq	r1, [r3, #0]
 80029ee:	685b      	ldreq	r3, [r3, #4]
 80029f0:	1809      	addeq	r1, r1, r0
 80029f2:	6021      	streq	r1, [r4, #0]
 80029f4:	6063      	str	r3, [r4, #4]
 80029f6:	6054      	str	r4, [r2, #4]
 80029f8:	e7cb      	b.n	8002992 <_free_r+0x22>
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	200002ac 	.word	0x200002ac

08002a00 <sbrk_aligned>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4e0f      	ldr	r6, [pc, #60]	@ (8002a40 <sbrk_aligned+0x40>)
 8002a04:	460c      	mov	r4, r1
 8002a06:	6831      	ldr	r1, [r6, #0]
 8002a08:	4605      	mov	r5, r0
 8002a0a:	b911      	cbnz	r1, 8002a12 <sbrk_aligned+0x12>
 8002a0c:	f000 fbaa 	bl	8003164 <_sbrk_r>
 8002a10:	6030      	str	r0, [r6, #0]
 8002a12:	4621      	mov	r1, r4
 8002a14:	4628      	mov	r0, r5
 8002a16:	f000 fba5 	bl	8003164 <_sbrk_r>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	d103      	bne.n	8002a26 <sbrk_aligned+0x26>
 8002a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8002a22:	4620      	mov	r0, r4
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
 8002a26:	1cc4      	adds	r4, r0, #3
 8002a28:	f024 0403 	bic.w	r4, r4, #3
 8002a2c:	42a0      	cmp	r0, r4
 8002a2e:	d0f8      	beq.n	8002a22 <sbrk_aligned+0x22>
 8002a30:	1a21      	subs	r1, r4, r0
 8002a32:	4628      	mov	r0, r5
 8002a34:	f000 fb96 	bl	8003164 <_sbrk_r>
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d1f2      	bne.n	8002a22 <sbrk_aligned+0x22>
 8002a3c:	e7ef      	b.n	8002a1e <sbrk_aligned+0x1e>
 8002a3e:	bf00      	nop
 8002a40:	200002a8 	.word	0x200002a8

08002a44 <_malloc_r>:
 8002a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a48:	1ccd      	adds	r5, r1, #3
 8002a4a:	f025 0503 	bic.w	r5, r5, #3
 8002a4e:	3508      	adds	r5, #8
 8002a50:	2d0c      	cmp	r5, #12
 8002a52:	bf38      	it	cc
 8002a54:	250c      	movcc	r5, #12
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	4606      	mov	r6, r0
 8002a5a:	db01      	blt.n	8002a60 <_malloc_r+0x1c>
 8002a5c:	42a9      	cmp	r1, r5
 8002a5e:	d904      	bls.n	8002a6a <_malloc_r+0x26>
 8002a60:	230c      	movs	r3, #12
 8002a62:	6033      	str	r3, [r6, #0]
 8002a64:	2000      	movs	r0, #0
 8002a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b40 <_malloc_r+0xfc>
 8002a6e:	f000 f869 	bl	8002b44 <__malloc_lock>
 8002a72:	f8d8 3000 	ldr.w	r3, [r8]
 8002a76:	461c      	mov	r4, r3
 8002a78:	bb44      	cbnz	r4, 8002acc <_malloc_r+0x88>
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f7ff ffbf 	bl	8002a00 <sbrk_aligned>
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	4604      	mov	r4, r0
 8002a86:	d158      	bne.n	8002b3a <_malloc_r+0xf6>
 8002a88:	f8d8 4000 	ldr.w	r4, [r8]
 8002a8c:	4627      	mov	r7, r4
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	d143      	bne.n	8002b1a <_malloc_r+0xd6>
 8002a92:	2c00      	cmp	r4, #0
 8002a94:	d04b      	beq.n	8002b2e <_malloc_r+0xea>
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	4639      	mov	r1, r7
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	eb04 0903 	add.w	r9, r4, r3
 8002aa0:	f000 fb60 	bl	8003164 <_sbrk_r>
 8002aa4:	4581      	cmp	r9, r0
 8002aa6:	d142      	bne.n	8002b2e <_malloc_r+0xea>
 8002aa8:	6821      	ldr	r1, [r4, #0]
 8002aaa:	4630      	mov	r0, r6
 8002aac:	1a6d      	subs	r5, r5, r1
 8002aae:	4629      	mov	r1, r5
 8002ab0:	f7ff ffa6 	bl	8002a00 <sbrk_aligned>
 8002ab4:	3001      	adds	r0, #1
 8002ab6:	d03a      	beq.n	8002b2e <_malloc_r+0xea>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	442b      	add	r3, r5
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	bb62      	cbnz	r2, 8002b20 <_malloc_r+0xdc>
 8002ac6:	f8c8 7000 	str.w	r7, [r8]
 8002aca:	e00f      	b.n	8002aec <_malloc_r+0xa8>
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	1b52      	subs	r2, r2, r5
 8002ad0:	d420      	bmi.n	8002b14 <_malloc_r+0xd0>
 8002ad2:	2a0b      	cmp	r2, #11
 8002ad4:	d917      	bls.n	8002b06 <_malloc_r+0xc2>
 8002ad6:	1961      	adds	r1, r4, r5
 8002ad8:	42a3      	cmp	r3, r4
 8002ada:	6025      	str	r5, [r4, #0]
 8002adc:	bf18      	it	ne
 8002ade:	6059      	strne	r1, [r3, #4]
 8002ae0:	6863      	ldr	r3, [r4, #4]
 8002ae2:	bf08      	it	eq
 8002ae4:	f8c8 1000 	streq.w	r1, [r8]
 8002ae8:	5162      	str	r2, [r4, r5]
 8002aea:	604b      	str	r3, [r1, #4]
 8002aec:	4630      	mov	r0, r6
 8002aee:	f000 f82f 	bl	8002b50 <__malloc_unlock>
 8002af2:	f104 000b 	add.w	r0, r4, #11
 8002af6:	1d23      	adds	r3, r4, #4
 8002af8:	f020 0007 	bic.w	r0, r0, #7
 8002afc:	1ac2      	subs	r2, r0, r3
 8002afe:	bf1c      	itt	ne
 8002b00:	1a1b      	subne	r3, r3, r0
 8002b02:	50a3      	strne	r3, [r4, r2]
 8002b04:	e7af      	b.n	8002a66 <_malloc_r+0x22>
 8002b06:	6862      	ldr	r2, [r4, #4]
 8002b08:	42a3      	cmp	r3, r4
 8002b0a:	bf0c      	ite	eq
 8002b0c:	f8c8 2000 	streq.w	r2, [r8]
 8002b10:	605a      	strne	r2, [r3, #4]
 8002b12:	e7eb      	b.n	8002aec <_malloc_r+0xa8>
 8002b14:	4623      	mov	r3, r4
 8002b16:	6864      	ldr	r4, [r4, #4]
 8002b18:	e7ae      	b.n	8002a78 <_malloc_r+0x34>
 8002b1a:	463c      	mov	r4, r7
 8002b1c:	687f      	ldr	r7, [r7, #4]
 8002b1e:	e7b6      	b.n	8002a8e <_malloc_r+0x4a>
 8002b20:	461a      	mov	r2, r3
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	d1fb      	bne.n	8002b20 <_malloc_r+0xdc>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6053      	str	r3, [r2, #4]
 8002b2c:	e7de      	b.n	8002aec <_malloc_r+0xa8>
 8002b2e:	230c      	movs	r3, #12
 8002b30:	4630      	mov	r0, r6
 8002b32:	6033      	str	r3, [r6, #0]
 8002b34:	f000 f80c 	bl	8002b50 <__malloc_unlock>
 8002b38:	e794      	b.n	8002a64 <_malloc_r+0x20>
 8002b3a:	6005      	str	r5, [r0, #0]
 8002b3c:	e7d6      	b.n	8002aec <_malloc_r+0xa8>
 8002b3e:	bf00      	nop
 8002b40:	200002ac 	.word	0x200002ac

08002b44 <__malloc_lock>:
 8002b44:	4801      	ldr	r0, [pc, #4]	@ (8002b4c <__malloc_lock+0x8>)
 8002b46:	f7ff bf11 	b.w	800296c <__retarget_lock_acquire_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	200002a4 	.word	0x200002a4

08002b50 <__malloc_unlock>:
 8002b50:	4801      	ldr	r0, [pc, #4]	@ (8002b58 <__malloc_unlock+0x8>)
 8002b52:	f7ff bf0c 	b.w	800296e <__retarget_lock_release_recursive>
 8002b56:	bf00      	nop
 8002b58:	200002a4 	.word	0x200002a4

08002b5c <__ssputs_r>:
 8002b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b60:	461f      	mov	r7, r3
 8002b62:	688e      	ldr	r6, [r1, #8]
 8002b64:	4682      	mov	sl, r0
 8002b66:	42be      	cmp	r6, r7
 8002b68:	460c      	mov	r4, r1
 8002b6a:	4690      	mov	r8, r2
 8002b6c:	680b      	ldr	r3, [r1, #0]
 8002b6e:	d82d      	bhi.n	8002bcc <__ssputs_r+0x70>
 8002b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b78:	d026      	beq.n	8002bc8 <__ssputs_r+0x6c>
 8002b7a:	6965      	ldr	r5, [r4, #20]
 8002b7c:	6909      	ldr	r1, [r1, #16]
 8002b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b82:	eba3 0901 	sub.w	r9, r3, r1
 8002b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b8a:	1c7b      	adds	r3, r7, #1
 8002b8c:	444b      	add	r3, r9
 8002b8e:	106d      	asrs	r5, r5, #1
 8002b90:	429d      	cmp	r5, r3
 8002b92:	bf38      	it	cc
 8002b94:	461d      	movcc	r5, r3
 8002b96:	0553      	lsls	r3, r2, #21
 8002b98:	d527      	bpl.n	8002bea <__ssputs_r+0x8e>
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	f7ff ff52 	bl	8002a44 <_malloc_r>
 8002ba0:	4606      	mov	r6, r0
 8002ba2:	b360      	cbz	r0, 8002bfe <__ssputs_r+0xa2>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	6921      	ldr	r1, [r4, #16]
 8002ba8:	f000 fafa 	bl	80031a0 <memcpy>
 8002bac:	89a3      	ldrh	r3, [r4, #12]
 8002bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb6:	81a3      	strh	r3, [r4, #12]
 8002bb8:	6126      	str	r6, [r4, #16]
 8002bba:	444e      	add	r6, r9
 8002bbc:	6026      	str	r6, [r4, #0]
 8002bbe:	463e      	mov	r6, r7
 8002bc0:	6165      	str	r5, [r4, #20]
 8002bc2:	eba5 0509 	sub.w	r5, r5, r9
 8002bc6:	60a5      	str	r5, [r4, #8]
 8002bc8:	42be      	cmp	r6, r7
 8002bca:	d900      	bls.n	8002bce <__ssputs_r+0x72>
 8002bcc:	463e      	mov	r6, r7
 8002bce:	4632      	mov	r2, r6
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	6820      	ldr	r0, [r4, #0]
 8002bd4:	f000 faac 	bl	8003130 <memmove>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	1b9b      	subs	r3, r3, r6
 8002bde:	60a3      	str	r3, [r4, #8]
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	4433      	add	r3, r6
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bea:	462a      	mov	r2, r5
 8002bec:	f000 fae6 	bl	80031bc <_realloc_r>
 8002bf0:	4606      	mov	r6, r0
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d1e0      	bne.n	8002bb8 <__ssputs_r+0x5c>
 8002bf6:	4650      	mov	r0, sl
 8002bf8:	6921      	ldr	r1, [r4, #16]
 8002bfa:	f7ff feb9 	bl	8002970 <_free_r>
 8002bfe:	230c      	movs	r3, #12
 8002c00:	f8ca 3000 	str.w	r3, [sl]
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	e7e9      	b.n	8002be6 <__ssputs_r+0x8a>
	...

08002c14 <_svfiprintf_r>:
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	4698      	mov	r8, r3
 8002c1a:	898b      	ldrh	r3, [r1, #12]
 8002c1c:	4607      	mov	r7, r0
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	460d      	mov	r5, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	b09d      	sub	sp, #116	@ 0x74
 8002c26:	d510      	bpl.n	8002c4a <_svfiprintf_r+0x36>
 8002c28:	690b      	ldr	r3, [r1, #16]
 8002c2a:	b973      	cbnz	r3, 8002c4a <_svfiprintf_r+0x36>
 8002c2c:	2140      	movs	r1, #64	@ 0x40
 8002c2e:	f7ff ff09 	bl	8002a44 <_malloc_r>
 8002c32:	6028      	str	r0, [r5, #0]
 8002c34:	6128      	str	r0, [r5, #16]
 8002c36:	b930      	cbnz	r0, 8002c46 <_svfiprintf_r+0x32>
 8002c38:	230c      	movs	r3, #12
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	b01d      	add	sp, #116	@ 0x74
 8002c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c46:	2340      	movs	r3, #64	@ 0x40
 8002c48:	616b      	str	r3, [r5, #20]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c4e:	2320      	movs	r3, #32
 8002c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c54:	2330      	movs	r3, #48	@ 0x30
 8002c56:	f04f 0901 	mov.w	r9, #1
 8002c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002df8 <_svfiprintf_r+0x1e4>
 8002c62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c66:	4623      	mov	r3, r4
 8002c68:	469a      	mov	sl, r3
 8002c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c6e:	b10a      	cbz	r2, 8002c74 <_svfiprintf_r+0x60>
 8002c70:	2a25      	cmp	r2, #37	@ 0x25
 8002c72:	d1f9      	bne.n	8002c68 <_svfiprintf_r+0x54>
 8002c74:	ebba 0b04 	subs.w	fp, sl, r4
 8002c78:	d00b      	beq.n	8002c92 <_svfiprintf_r+0x7e>
 8002c7a:	465b      	mov	r3, fp
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4629      	mov	r1, r5
 8002c80:	4638      	mov	r0, r7
 8002c82:	f7ff ff6b 	bl	8002b5c <__ssputs_r>
 8002c86:	3001      	adds	r0, #1
 8002c88:	f000 80a7 	beq.w	8002dda <_svfiprintf_r+0x1c6>
 8002c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c8e:	445a      	add	r2, fp
 8002c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c92:	f89a 3000 	ldrb.w	r3, [sl]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 809f 	beq.w	8002dda <_svfiprintf_r+0x1c6>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca6:	f10a 0a01 	add.w	sl, sl, #1
 8002caa:	9304      	str	r3, [sp, #16]
 8002cac:	9307      	str	r3, [sp, #28]
 8002cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002cb4:	4654      	mov	r4, sl
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	484e      	ldr	r0, [pc, #312]	@ (8002df8 <_svfiprintf_r+0x1e4>)
 8002cbe:	f000 fa61 	bl	8003184 <memchr>
 8002cc2:	9a04      	ldr	r2, [sp, #16]
 8002cc4:	b9d8      	cbnz	r0, 8002cfe <_svfiprintf_r+0xea>
 8002cc6:	06d0      	lsls	r0, r2, #27
 8002cc8:	bf44      	itt	mi
 8002cca:	2320      	movmi	r3, #32
 8002ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cd0:	0711      	lsls	r1, r2, #28
 8002cd2:	bf44      	itt	mi
 8002cd4:	232b      	movmi	r3, #43	@ 0x2b
 8002cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cda:	f89a 3000 	ldrb.w	r3, [sl]
 8002cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ce0:	d015      	beq.n	8002d0e <_svfiprintf_r+0xfa>
 8002ce2:	4654      	mov	r4, sl
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f04f 0c0a 	mov.w	ip, #10
 8002cea:	9a07      	ldr	r2, [sp, #28]
 8002cec:	4621      	mov	r1, r4
 8002cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cf2:	3b30      	subs	r3, #48	@ 0x30
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d94b      	bls.n	8002d90 <_svfiprintf_r+0x17c>
 8002cf8:	b1b0      	cbz	r0, 8002d28 <_svfiprintf_r+0x114>
 8002cfa:	9207      	str	r2, [sp, #28]
 8002cfc:	e014      	b.n	8002d28 <_svfiprintf_r+0x114>
 8002cfe:	eba0 0308 	sub.w	r3, r0, r8
 8002d02:	fa09 f303 	lsl.w	r3, r9, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	46a2      	mov	sl, r4
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	e7d2      	b.n	8002cb4 <_svfiprintf_r+0xa0>
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	1d19      	adds	r1, r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	9103      	str	r1, [sp, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfbb      	ittet	lt
 8002d1a:	425b      	neglt	r3, r3
 8002d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d20:	9307      	strge	r3, [sp, #28]
 8002d22:	9307      	strlt	r3, [sp, #28]
 8002d24:	bfb8      	it	lt
 8002d26:	9204      	strlt	r2, [sp, #16]
 8002d28:	7823      	ldrb	r3, [r4, #0]
 8002d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d2c:	d10a      	bne.n	8002d44 <_svfiprintf_r+0x130>
 8002d2e:	7863      	ldrb	r3, [r4, #1]
 8002d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d32:	d132      	bne.n	8002d9a <_svfiprintf_r+0x186>
 8002d34:	9b03      	ldr	r3, [sp, #12]
 8002d36:	3402      	adds	r4, #2
 8002d38:	1d1a      	adds	r2, r3, #4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	9203      	str	r2, [sp, #12]
 8002d3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d42:	9305      	str	r3, [sp, #20]
 8002d44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002dfc <_svfiprintf_r+0x1e8>
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4650      	mov	r0, sl
 8002d4c:	7821      	ldrb	r1, [r4, #0]
 8002d4e:	f000 fa19 	bl	8003184 <memchr>
 8002d52:	b138      	cbz	r0, 8002d64 <_svfiprintf_r+0x150>
 8002d54:	2240      	movs	r2, #64	@ 0x40
 8002d56:	9b04      	ldr	r3, [sp, #16]
 8002d58:	eba0 000a 	sub.w	r0, r0, sl
 8002d5c:	4082      	lsls	r2, r0
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	3401      	adds	r4, #1
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	2206      	movs	r2, #6
 8002d6a:	4825      	ldr	r0, [pc, #148]	@ (8002e00 <_svfiprintf_r+0x1ec>)
 8002d6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d70:	f000 fa08 	bl	8003184 <memchr>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d036      	beq.n	8002de6 <_svfiprintf_r+0x1d2>
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <_svfiprintf_r+0x1f0>)
 8002d7a:	bb1b      	cbnz	r3, 8002dc4 <_svfiprintf_r+0x1b0>
 8002d7c:	9b03      	ldr	r3, [sp, #12]
 8002d7e:	3307      	adds	r3, #7
 8002d80:	f023 0307 	bic.w	r3, r3, #7
 8002d84:	3308      	adds	r3, #8
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d8a:	4433      	add	r3, r6
 8002d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d8e:	e76a      	b.n	8002c66 <_svfiprintf_r+0x52>
 8002d90:	460c      	mov	r4, r1
 8002d92:	2001      	movs	r0, #1
 8002d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d98:	e7a8      	b.n	8002cec <_svfiprintf_r+0xd8>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f04f 0c0a 	mov.w	ip, #10
 8002da0:	4619      	mov	r1, r3
 8002da2:	3401      	adds	r4, #1
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	4620      	mov	r0, r4
 8002da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dac:	3a30      	subs	r2, #48	@ 0x30
 8002dae:	2a09      	cmp	r2, #9
 8002db0:	d903      	bls.n	8002dba <_svfiprintf_r+0x1a6>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0c6      	beq.n	8002d44 <_svfiprintf_r+0x130>
 8002db6:	9105      	str	r1, [sp, #20]
 8002db8:	e7c4      	b.n	8002d44 <_svfiprintf_r+0x130>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dc2:	e7f0      	b.n	8002da6 <_svfiprintf_r+0x192>
 8002dc4:	ab03      	add	r3, sp, #12
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	462a      	mov	r2, r5
 8002dca:	4638      	mov	r0, r7
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <_svfiprintf_r+0x1f4>)
 8002dce:	a904      	add	r1, sp, #16
 8002dd0:	f3af 8000 	nop.w
 8002dd4:	1c42      	adds	r2, r0, #1
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	d1d6      	bne.n	8002d88 <_svfiprintf_r+0x174>
 8002dda:	89ab      	ldrh	r3, [r5, #12]
 8002ddc:	065b      	lsls	r3, r3, #25
 8002dde:	f53f af2d 	bmi.w	8002c3c <_svfiprintf_r+0x28>
 8002de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002de4:	e72c      	b.n	8002c40 <_svfiprintf_r+0x2c>
 8002de6:	ab03      	add	r3, sp, #12
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	462a      	mov	r2, r5
 8002dec:	4638      	mov	r0, r7
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <_svfiprintf_r+0x1f4>)
 8002df0:	a904      	add	r1, sp, #16
 8002df2:	f000 f87d 	bl	8002ef0 <_printf_i>
 8002df6:	e7ed      	b.n	8002dd4 <_svfiprintf_r+0x1c0>
 8002df8:	080032ae 	.word	0x080032ae
 8002dfc:	080032b4 	.word	0x080032b4
 8002e00:	080032b8 	.word	0x080032b8
 8002e04:	00000000 	.word	0x00000000
 8002e08:	08002b5d 	.word	0x08002b5d

08002e0c <_printf_common>:
 8002e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e10:	4616      	mov	r6, r2
 8002e12:	4698      	mov	r8, r3
 8002e14:	688a      	ldr	r2, [r1, #8]
 8002e16:	690b      	ldr	r3, [r1, #16]
 8002e18:	4607      	mov	r7, r0
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	bfb8      	it	lt
 8002e1e:	4613      	movlt	r3, r2
 8002e20:	6033      	str	r3, [r6, #0]
 8002e22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e26:	460c      	mov	r4, r1
 8002e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e2c:	b10a      	cbz	r2, 8002e32 <_printf_common+0x26>
 8002e2e:	3301      	adds	r3, #1
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	0699      	lsls	r1, r3, #26
 8002e36:	bf42      	ittt	mi
 8002e38:	6833      	ldrmi	r3, [r6, #0]
 8002e3a:	3302      	addmi	r3, #2
 8002e3c:	6033      	strmi	r3, [r6, #0]
 8002e3e:	6825      	ldr	r5, [r4, #0]
 8002e40:	f015 0506 	ands.w	r5, r5, #6
 8002e44:	d106      	bne.n	8002e54 <_printf_common+0x48>
 8002e46:	f104 0a19 	add.w	sl, r4, #25
 8002e4a:	68e3      	ldr	r3, [r4, #12]
 8002e4c:	6832      	ldr	r2, [r6, #0]
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	42ab      	cmp	r3, r5
 8002e52:	dc2b      	bgt.n	8002eac <_printf_common+0xa0>
 8002e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	3b00      	subs	r3, #0
 8002e5c:	bf18      	it	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	0692      	lsls	r2, r2, #26
 8002e62:	d430      	bmi.n	8002ec6 <_printf_common+0xba>
 8002e64:	4641      	mov	r1, r8
 8002e66:	4638      	mov	r0, r7
 8002e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e6c:	47c8      	blx	r9
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d023      	beq.n	8002eba <_printf_common+0xae>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	6922      	ldr	r2, [r4, #16]
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf14      	ite	ne
 8002e7e:	2500      	movne	r5, #0
 8002e80:	6833      	ldreq	r3, [r6, #0]
 8002e82:	f04f 0600 	mov.w	r6, #0
 8002e86:	bf08      	it	eq
 8002e88:	68e5      	ldreq	r5, [r4, #12]
 8002e8a:	f104 041a 	add.w	r4, r4, #26
 8002e8e:	bf08      	it	eq
 8002e90:	1aed      	subeq	r5, r5, r3
 8002e92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002e96:	bf08      	it	eq
 8002e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bfc4      	itt	gt
 8002ea0:	1a9b      	subgt	r3, r3, r2
 8002ea2:	18ed      	addgt	r5, r5, r3
 8002ea4:	42b5      	cmp	r5, r6
 8002ea6:	d11a      	bne.n	8002ede <_printf_common+0xd2>
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	e008      	b.n	8002ebe <_printf_common+0xb2>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4652      	mov	r2, sl
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	47c8      	blx	r9
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d103      	bne.n	8002ec2 <_printf_common+0xb6>
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	e7c1      	b.n	8002e4a <_printf_common+0x3e>
 8002ec6:	2030      	movs	r0, #48	@ 0x30
 8002ec8:	18e1      	adds	r1, r4, r3
 8002eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ed4:	4422      	add	r2, r4
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002edc:	e7c2      	b.n	8002e64 <_printf_common+0x58>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	47c8      	blx	r9
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d0e6      	beq.n	8002eba <_printf_common+0xae>
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7d9      	b.n	8002ea4 <_printf_common+0x98>

08002ef0 <_printf_i>:
 8002ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	7e0f      	ldrb	r7, [r1, #24]
 8002ef6:	4691      	mov	r9, r2
 8002ef8:	2f78      	cmp	r7, #120	@ 0x78
 8002efa:	4680      	mov	r8, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	469a      	mov	sl, r3
 8002f00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f06:	d807      	bhi.n	8002f18 <_printf_i+0x28>
 8002f08:	2f62      	cmp	r7, #98	@ 0x62
 8002f0a:	d80a      	bhi.n	8002f22 <_printf_i+0x32>
 8002f0c:	2f00      	cmp	r7, #0
 8002f0e:	f000 80d3 	beq.w	80030b8 <_printf_i+0x1c8>
 8002f12:	2f58      	cmp	r7, #88	@ 0x58
 8002f14:	f000 80ba 	beq.w	800308c <_printf_i+0x19c>
 8002f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f20:	e03a      	b.n	8002f98 <_printf_i+0xa8>
 8002f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f26:	2b15      	cmp	r3, #21
 8002f28:	d8f6      	bhi.n	8002f18 <_printf_i+0x28>
 8002f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8002f30 <_printf_i+0x40>)
 8002f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f9d 	.word	0x08002f9d
 8002f38:	08002f19 	.word	0x08002f19
 8002f3c:	08002f19 	.word	0x08002f19
 8002f40:	08002f19 	.word	0x08002f19
 8002f44:	08002f19 	.word	0x08002f19
 8002f48:	08002f9d 	.word	0x08002f9d
 8002f4c:	08002f19 	.word	0x08002f19
 8002f50:	08002f19 	.word	0x08002f19
 8002f54:	08002f19 	.word	0x08002f19
 8002f58:	08002f19 	.word	0x08002f19
 8002f5c:	0800309f 	.word	0x0800309f
 8002f60:	08002fc7 	.word	0x08002fc7
 8002f64:	08003059 	.word	0x08003059
 8002f68:	08002f19 	.word	0x08002f19
 8002f6c:	08002f19 	.word	0x08002f19
 8002f70:	080030c1 	.word	0x080030c1
 8002f74:	08002f19 	.word	0x08002f19
 8002f78:	08002fc7 	.word	0x08002fc7
 8002f7c:	08002f19 	.word	0x08002f19
 8002f80:	08002f19 	.word	0x08002f19
 8002f84:	08003061 	.word	0x08003061
 8002f88:	6833      	ldr	r3, [r6, #0]
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6032      	str	r2, [r6, #0]
 8002f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e09e      	b.n	80030da <_printf_i+0x1ea>
 8002f9c:	6833      	ldr	r3, [r6, #0]
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	1d19      	adds	r1, r3, #4
 8002fa2:	6031      	str	r1, [r6, #0]
 8002fa4:	0606      	lsls	r6, r0, #24
 8002fa6:	d501      	bpl.n	8002fac <_printf_i+0xbc>
 8002fa8:	681d      	ldr	r5, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <_printf_i+0xc4>
 8002fac:	0645      	lsls	r5, r0, #25
 8002fae:	d5fb      	bpl.n	8002fa8 <_printf_i+0xb8>
 8002fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fb4:	2d00      	cmp	r5, #0
 8002fb6:	da03      	bge.n	8002fc0 <_printf_i+0xd0>
 8002fb8:	232d      	movs	r3, #45	@ 0x2d
 8002fba:	426d      	negs	r5, r5
 8002fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fc0:	230a      	movs	r3, #10
 8002fc2:	4859      	ldr	r0, [pc, #356]	@ (8003128 <_printf_i+0x238>)
 8002fc4:	e011      	b.n	8002fea <_printf_i+0xfa>
 8002fc6:	6821      	ldr	r1, [r4, #0]
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	0608      	lsls	r0, r1, #24
 8002fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002fd0:	d402      	bmi.n	8002fd8 <_printf_i+0xe8>
 8002fd2:	0649      	lsls	r1, r1, #25
 8002fd4:	bf48      	it	mi
 8002fd6:	b2ad      	uxthmi	r5, r5
 8002fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002fda:	6033      	str	r3, [r6, #0]
 8002fdc:	bf14      	ite	ne
 8002fde:	230a      	movne	r3, #10
 8002fe0:	2308      	moveq	r3, #8
 8002fe2:	4851      	ldr	r0, [pc, #324]	@ (8003128 <_printf_i+0x238>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002fea:	6866      	ldr	r6, [r4, #4]
 8002fec:	2e00      	cmp	r6, #0
 8002fee:	bfa8      	it	ge
 8002ff0:	6821      	ldrge	r1, [r4, #0]
 8002ff2:	60a6      	str	r6, [r4, #8]
 8002ff4:	bfa4      	itt	ge
 8002ff6:	f021 0104 	bicge.w	r1, r1, #4
 8002ffa:	6021      	strge	r1, [r4, #0]
 8002ffc:	b90d      	cbnz	r5, 8003002 <_printf_i+0x112>
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	d04b      	beq.n	800309a <_printf_i+0x1aa>
 8003002:	4616      	mov	r6, r2
 8003004:	fbb5 f1f3 	udiv	r1, r5, r3
 8003008:	fb03 5711 	mls	r7, r3, r1, r5
 800300c:	5dc7      	ldrb	r7, [r0, r7]
 800300e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003012:	462f      	mov	r7, r5
 8003014:	42bb      	cmp	r3, r7
 8003016:	460d      	mov	r5, r1
 8003018:	d9f4      	bls.n	8003004 <_printf_i+0x114>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d10b      	bne.n	8003036 <_printf_i+0x146>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	07df      	lsls	r7, r3, #31
 8003022:	d508      	bpl.n	8003036 <_printf_i+0x146>
 8003024:	6923      	ldr	r3, [r4, #16]
 8003026:	6861      	ldr	r1, [r4, #4]
 8003028:	4299      	cmp	r1, r3
 800302a:	bfde      	ittt	le
 800302c:	2330      	movle	r3, #48	@ 0x30
 800302e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003032:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003036:	1b92      	subs	r2, r2, r6
 8003038:	6122      	str	r2, [r4, #16]
 800303a:	464b      	mov	r3, r9
 800303c:	4621      	mov	r1, r4
 800303e:	4640      	mov	r0, r8
 8003040:	f8cd a000 	str.w	sl, [sp]
 8003044:	aa03      	add	r2, sp, #12
 8003046:	f7ff fee1 	bl	8002e0c <_printf_common>
 800304a:	3001      	adds	r0, #1
 800304c:	d14a      	bne.n	80030e4 <_printf_i+0x1f4>
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	b004      	add	sp, #16
 8003054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	f043 0320 	orr.w	r3, r3, #32
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	2778      	movs	r7, #120	@ 0x78
 8003062:	4832      	ldr	r0, [pc, #200]	@ (800312c <_printf_i+0x23c>)
 8003064:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	6831      	ldr	r1, [r6, #0]
 800306c:	061f      	lsls	r7, r3, #24
 800306e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003072:	d402      	bmi.n	800307a <_printf_i+0x18a>
 8003074:	065f      	lsls	r7, r3, #25
 8003076:	bf48      	it	mi
 8003078:	b2ad      	uxthmi	r5, r5
 800307a:	6031      	str	r1, [r6, #0]
 800307c:	07d9      	lsls	r1, r3, #31
 800307e:	bf44      	itt	mi
 8003080:	f043 0320 	orrmi.w	r3, r3, #32
 8003084:	6023      	strmi	r3, [r4, #0]
 8003086:	b11d      	cbz	r5, 8003090 <_printf_i+0x1a0>
 8003088:	2310      	movs	r3, #16
 800308a:	e7ab      	b.n	8002fe4 <_printf_i+0xf4>
 800308c:	4826      	ldr	r0, [pc, #152]	@ (8003128 <_printf_i+0x238>)
 800308e:	e7e9      	b.n	8003064 <_printf_i+0x174>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	f023 0320 	bic.w	r3, r3, #32
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	e7f6      	b.n	8003088 <_printf_i+0x198>
 800309a:	4616      	mov	r6, r2
 800309c:	e7bd      	b.n	800301a <_printf_i+0x12a>
 800309e:	6833      	ldr	r3, [r6, #0]
 80030a0:	6825      	ldr	r5, [r4, #0]
 80030a2:	1d18      	adds	r0, r3, #4
 80030a4:	6961      	ldr	r1, [r4, #20]
 80030a6:	6030      	str	r0, [r6, #0]
 80030a8:	062e      	lsls	r6, r5, #24
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	d501      	bpl.n	80030b2 <_printf_i+0x1c2>
 80030ae:	6019      	str	r1, [r3, #0]
 80030b0:	e002      	b.n	80030b8 <_printf_i+0x1c8>
 80030b2:	0668      	lsls	r0, r5, #25
 80030b4:	d5fb      	bpl.n	80030ae <_printf_i+0x1be>
 80030b6:	8019      	strh	r1, [r3, #0]
 80030b8:	2300      	movs	r3, #0
 80030ba:	4616      	mov	r6, r2
 80030bc:	6123      	str	r3, [r4, #16]
 80030be:	e7bc      	b.n	800303a <_printf_i+0x14a>
 80030c0:	6833      	ldr	r3, [r6, #0]
 80030c2:	2100      	movs	r1, #0
 80030c4:	1d1a      	adds	r2, r3, #4
 80030c6:	6032      	str	r2, [r6, #0]
 80030c8:	681e      	ldr	r6, [r3, #0]
 80030ca:	6862      	ldr	r2, [r4, #4]
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f859 	bl	8003184 <memchr>
 80030d2:	b108      	cbz	r0, 80030d8 <_printf_i+0x1e8>
 80030d4:	1b80      	subs	r0, r0, r6
 80030d6:	6060      	str	r0, [r4, #4]
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	6123      	str	r3, [r4, #16]
 80030dc:	2300      	movs	r3, #0
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030e2:	e7aa      	b.n	800303a <_printf_i+0x14a>
 80030e4:	4632      	mov	r2, r6
 80030e6:	4649      	mov	r1, r9
 80030e8:	4640      	mov	r0, r8
 80030ea:	6923      	ldr	r3, [r4, #16]
 80030ec:	47d0      	blx	sl
 80030ee:	3001      	adds	r0, #1
 80030f0:	d0ad      	beq.n	800304e <_printf_i+0x15e>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	079b      	lsls	r3, r3, #30
 80030f6:	d413      	bmi.n	8003120 <_printf_i+0x230>
 80030f8:	68e0      	ldr	r0, [r4, #12]
 80030fa:	9b03      	ldr	r3, [sp, #12]
 80030fc:	4298      	cmp	r0, r3
 80030fe:	bfb8      	it	lt
 8003100:	4618      	movlt	r0, r3
 8003102:	e7a6      	b.n	8003052 <_printf_i+0x162>
 8003104:	2301      	movs	r3, #1
 8003106:	4632      	mov	r2, r6
 8003108:	4649      	mov	r1, r9
 800310a:	4640      	mov	r0, r8
 800310c:	47d0      	blx	sl
 800310e:	3001      	adds	r0, #1
 8003110:	d09d      	beq.n	800304e <_printf_i+0x15e>
 8003112:	3501      	adds	r5, #1
 8003114:	68e3      	ldr	r3, [r4, #12]
 8003116:	9903      	ldr	r1, [sp, #12]
 8003118:	1a5b      	subs	r3, r3, r1
 800311a:	42ab      	cmp	r3, r5
 800311c:	dcf2      	bgt.n	8003104 <_printf_i+0x214>
 800311e:	e7eb      	b.n	80030f8 <_printf_i+0x208>
 8003120:	2500      	movs	r5, #0
 8003122:	f104 0619 	add.w	r6, r4, #25
 8003126:	e7f5      	b.n	8003114 <_printf_i+0x224>
 8003128:	080032bf 	.word	0x080032bf
 800312c:	080032d0 	.word	0x080032d0

08003130 <memmove>:
 8003130:	4288      	cmp	r0, r1
 8003132:	b510      	push	{r4, lr}
 8003134:	eb01 0402 	add.w	r4, r1, r2
 8003138:	d902      	bls.n	8003140 <memmove+0x10>
 800313a:	4284      	cmp	r4, r0
 800313c:	4623      	mov	r3, r4
 800313e:	d807      	bhi.n	8003150 <memmove+0x20>
 8003140:	1e43      	subs	r3, r0, #1
 8003142:	42a1      	cmp	r1, r4
 8003144:	d008      	beq.n	8003158 <memmove+0x28>
 8003146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800314a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800314e:	e7f8      	b.n	8003142 <memmove+0x12>
 8003150:	4601      	mov	r1, r0
 8003152:	4402      	add	r2, r0
 8003154:	428a      	cmp	r2, r1
 8003156:	d100      	bne.n	800315a <memmove+0x2a>
 8003158:	bd10      	pop	{r4, pc}
 800315a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800315e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003162:	e7f7      	b.n	8003154 <memmove+0x24>

08003164 <_sbrk_r>:
 8003164:	b538      	push	{r3, r4, r5, lr}
 8003166:	2300      	movs	r3, #0
 8003168:	4d05      	ldr	r5, [pc, #20]	@ (8003180 <_sbrk_r+0x1c>)
 800316a:	4604      	mov	r4, r0
 800316c:	4608      	mov	r0, r1
 800316e:	602b      	str	r3, [r5, #0]
 8003170:	f7fd f8d8 	bl	8000324 <_sbrk>
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	d102      	bne.n	800317e <_sbrk_r+0x1a>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	b103      	cbz	r3, 800317e <_sbrk_r+0x1a>
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	bd38      	pop	{r3, r4, r5, pc}
 8003180:	200002a0 	.word	0x200002a0

08003184 <memchr>:
 8003184:	4603      	mov	r3, r0
 8003186:	b510      	push	{r4, lr}
 8003188:	b2c9      	uxtb	r1, r1
 800318a:	4402      	add	r2, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	4618      	mov	r0, r3
 8003190:	d101      	bne.n	8003196 <memchr+0x12>
 8003192:	2000      	movs	r0, #0
 8003194:	e003      	b.n	800319e <memchr+0x1a>
 8003196:	7804      	ldrb	r4, [r0, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	428c      	cmp	r4, r1
 800319c:	d1f6      	bne.n	800318c <memchr+0x8>
 800319e:	bd10      	pop	{r4, pc}

080031a0 <memcpy>:
 80031a0:	440a      	add	r2, r1
 80031a2:	4291      	cmp	r1, r2
 80031a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031a8:	d100      	bne.n	80031ac <memcpy+0xc>
 80031aa:	4770      	bx	lr
 80031ac:	b510      	push	{r4, lr}
 80031ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031b2:	4291      	cmp	r1, r2
 80031b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031b8:	d1f9      	bne.n	80031ae <memcpy+0xe>
 80031ba:	bd10      	pop	{r4, pc}

080031bc <_realloc_r>:
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	4680      	mov	r8, r0
 80031c2:	4615      	mov	r5, r2
 80031c4:	460c      	mov	r4, r1
 80031c6:	b921      	cbnz	r1, 80031d2 <_realloc_r+0x16>
 80031c8:	4611      	mov	r1, r2
 80031ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ce:	f7ff bc39 	b.w	8002a44 <_malloc_r>
 80031d2:	b92a      	cbnz	r2, 80031e0 <_realloc_r+0x24>
 80031d4:	f7ff fbcc 	bl	8002970 <_free_r>
 80031d8:	2400      	movs	r4, #0
 80031da:	4620      	mov	r0, r4
 80031dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e0:	f000 f81a 	bl	8003218 <_malloc_usable_size_r>
 80031e4:	4285      	cmp	r5, r0
 80031e6:	4606      	mov	r6, r0
 80031e8:	d802      	bhi.n	80031f0 <_realloc_r+0x34>
 80031ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80031ee:	d8f4      	bhi.n	80031da <_realloc_r+0x1e>
 80031f0:	4629      	mov	r1, r5
 80031f2:	4640      	mov	r0, r8
 80031f4:	f7ff fc26 	bl	8002a44 <_malloc_r>
 80031f8:	4607      	mov	r7, r0
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d0ec      	beq.n	80031d8 <_realloc_r+0x1c>
 80031fe:	42b5      	cmp	r5, r6
 8003200:	462a      	mov	r2, r5
 8003202:	4621      	mov	r1, r4
 8003204:	bf28      	it	cs
 8003206:	4632      	movcs	r2, r6
 8003208:	f7ff ffca 	bl	80031a0 <memcpy>
 800320c:	4621      	mov	r1, r4
 800320e:	4640      	mov	r0, r8
 8003210:	f7ff fbae 	bl	8002970 <_free_r>
 8003214:	463c      	mov	r4, r7
 8003216:	e7e0      	b.n	80031da <_realloc_r+0x1e>

08003218 <_malloc_usable_size_r>:
 8003218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800321c:	1f18      	subs	r0, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	bfbc      	itt	lt
 8003222:	580b      	ldrlt	r3, [r1, r0]
 8003224:	18c0      	addlt	r0, r0, r3
 8003226:	4770      	bx	lr

08003228 <_init>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr

08003234 <_fini>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr
