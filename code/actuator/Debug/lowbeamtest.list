
lowbeamtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005658  08005658  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005658  08005658  00006658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005660  08005660  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005668  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  20000068  080056d0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  080056d0  00007aec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f187  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027dc  00000000  00000000  00016218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000189f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5c  00000000  00000000  00019898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ffe  00000000  00000000  0001a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a3c  00000000  00000000  000323f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb6e  00000000  00000000  00043e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf99c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  000cf9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d3b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800559c 	.word	0x0800559c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800559c 	.word	0x0800559c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000160:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000162:	4a18      	ldr	r2, [pc, #96]	@ (80001c4 <MX_CAN_Init+0x68>)
 8000164:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000166:	4b16      	ldr	r3, [pc, #88]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000168:	2204      	movs	r2, #4
 800016a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800016c:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_CAN_Init+0x64>)
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000172:	4b13      	ldr	r3, [pc, #76]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000174:	2200      	movs	r2, #0
 8000176:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000178:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <MX_CAN_Init+0x64>)
 800017a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800017e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000180:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000182:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000186:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000188:	4b0d      	ldr	r3, [pc, #52]	@ (80001c0 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800018e:	4b0c      	ldr	r3, [pc, #48]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000194:	4b0a      	ldr	r3, [pc, #40]	@ (80001c0 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800019a:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001a0:	4b07      	ldr	r3, [pc, #28]	@ (80001c0 <MX_CAN_Init+0x64>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <MX_CAN_Init+0x64>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <MX_CAN_Init+0x64>)
 80001ae:	f001 fe67 	bl	8001e80 <HAL_CAN_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001b8:	f001 f9ee 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	40006400 	.word	0x40006400

080001c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a29      	ldr	r2, [pc, #164]	@ (8000288 <HAL_CAN_MspInit+0xc0>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d14b      	bne.n	8000280 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001e8:	4b28      	ldr	r3, [pc, #160]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	4a27      	ldr	r2, [pc, #156]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 80001ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001f2:	61d3      	str	r3, [r2, #28]
 80001f4:	4b25      	ldr	r3, [pc, #148]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001fc:	613b      	str	r3, [r7, #16]
 80001fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a21      	ldr	r2, [pc, #132]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b1f      	ldr	r3, [pc, #124]	@ (800028c <HAL_CAN_MspInit+0xc4>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0308 	and.w	r3, r3, #8
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800021c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800021e:	2300      	movs	r3, #0
 8000220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	4619      	mov	r1, r3
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <HAL_CAN_MspInit+0xc8>)
 800022e:	f002 fe95 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000238:	2302      	movs	r3, #2
 800023a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800023c:	2303      	movs	r3, #3
 800023e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4619      	mov	r1, r3
 8000246:	4812      	ldr	r0, [pc, #72]	@ (8000290 <HAL_CAN_MspInit+0xc8>)
 8000248:	f002 fe88 	bl	8002f5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800024c:	4b11      	ldr	r3, [pc, #68]	@ (8000294 <HAL_CAN_MspInit+0xcc>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	627b      	str	r3, [r7, #36]	@ 0x24
 8000252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000254:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000258:	627b      	str	r3, [r7, #36]	@ 0x24
 800025a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800025c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000260:	627b      	str	r3, [r7, #36]	@ 0x24
 8000262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000268:	627b      	str	r3, [r7, #36]	@ 0x24
 800026a:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <HAL_CAN_MspInit+0xcc>)
 800026c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800026e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	2100      	movs	r1, #0
 8000274:	2014      	movs	r0, #20
 8000276:	f002 fc4c 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800027a:	2014      	movs	r0, #20
 800027c:	f002 fc65 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000280:	bf00      	nop
 8000282:	3728      	adds	r7, #40	@ 0x28
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40006400 	.word	0x40006400
 800028c:	40021000 	.word	0x40021000
 8000290:	40010c00 	.word	0x40010c00
 8000294:	40010000 	.word	0x40010000

08000298 <filter_init>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void filter_init(uint32_t filter_mask, uint32_t filter_id){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  canFilter1.FilterMaskIdHigh = filter_mask << 5; // 필터 마스크를 111 1111 0011 로 설정
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	015b      	lsls	r3, r3, #5
 80002a6:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <filter_init+0x58>)
 80002a8:	6093      	str	r3, [r2, #8]
  canFilter1.FilterIdHigh = filter_id << 5; // 필터 Id를 001 0000 0110 으로 설정
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	015b      	lsls	r3, r3, #5
 80002ae:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <filter_init+0x58>)
 80002b0:	6013      	str	r3, [r2, #0]
  canFilter1.FilterMaskIdLow = filter_mask << 5;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	015b      	lsls	r3, r3, #5
 80002b6:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <filter_init+0x58>)
 80002b8:	60d3      	str	r3, [r2, #12]
  canFilter1.FilterIdLow = filter_id << 5;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	015b      	lsls	r3, r3, #5
 80002be:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <filter_init+0x58>)
 80002c0:	6053      	str	r3, [r2, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK; // IDMASK 모드 사용
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <filter_init+0x58>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <filter_init+0x58>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0; // 0번 버퍼 사용
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <filter_init+0x58>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <filter_init+0x58>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 80002da:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <filter_init+0x58>)
 80002dc:	2201      	movs	r2, #1
 80002de:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &canFilter1); // 필터 적용
 80002e0:	4903      	ldr	r1, [pc, #12]	@ (80002f0 <filter_init+0x58>)
 80002e2:	4804      	ldr	r0, [pc, #16]	@ (80002f4 <filter_init+0x5c>)
 80002e4:	f001 fec7 	bl	8002076 <HAL_CAN_ConfigFilter>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000084 	.word	0x20000084
 80002f4:	200000d0 	.word	0x200000d0

080002f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_DMA_Init+0x58>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <MX_DMA_Init+0x58>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_DMA_Init+0x58>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000316:	2200      	movs	r2, #0
 8000318:	2100      	movs	r1, #0
 800031a:	200d      	movs	r0, #13
 800031c:	f002 fbf9 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000320:	200d      	movs	r0, #13
 8000322:	f002 fc12 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	2010      	movs	r0, #16
 800032c:	f002 fbf1 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f002 fc0a 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	2100      	movs	r1, #0
 800033a:	2011      	movs	r0, #17
 800033c:	f002 fbe9 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000340:	2011      	movs	r0, #17
 8000342:	f002 fc02 	bl	8002b4a <HAL_NVIC_EnableIRQ>

}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b42      	ldr	r3, [pc, #264]	@ (8000474 <MX_GPIO_Init+0x120>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a41      	ldr	r2, [pc, #260]	@ (8000474 <MX_GPIO_Init+0x120>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b3f      	ldr	r3, [pc, #252]	@ (8000474 <MX_GPIO_Init+0x120>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	4b3c      	ldr	r3, [pc, #240]	@ (8000474 <MX_GPIO_Init+0x120>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a3b      	ldr	r2, [pc, #236]	@ (8000474 <MX_GPIO_Init+0x120>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b39      	ldr	r3, [pc, #228]	@ (8000474 <MX_GPIO_Init+0x120>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b36      	ldr	r3, [pc, #216]	@ (8000474 <MX_GPIO_Init+0x120>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a35      	ldr	r2, [pc, #212]	@ (8000474 <MX_GPIO_Init+0x120>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b33      	ldr	r3, [pc, #204]	@ (8000474 <MX_GPIO_Init+0x120>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b30      	ldr	r3, [pc, #192]	@ (8000474 <MX_GPIO_Init+0x120>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000474 <MX_GPIO_Init+0x120>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000474 <MX_GPIO_Init+0x120>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LSTEPB_Pin|LSTEPA_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80003ce:	482a      	ldr	r0, [pc, #168]	@ (8000478 <MX_GPIO_Init+0x124>)
 80003d0:	f002 ff48 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSTEPA_Pin|LSTEPD_Pin|LSTEPC_Pin|RSTEPD_Pin
 80003d4:	2200      	movs	r2, #0
 80003d6:	f64f 0132 	movw	r1, #63538	@ 0xf832
 80003da:	4828      	ldr	r0, [pc, #160]	@ (800047c <MX_GPIO_Init+0x128>)
 80003dc:	f002 ff42 	bl	8003264 <HAL_GPIO_WritePin>
                          |RSTEPC_Pin|RSTEPB_Pin|LCORNER_Pin|RCORNER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FOG_GPIO_Port, FOG_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	@ 0x80
 80003e4:	4826      	ldr	r0, [pc, #152]	@ (8000480 <MX_GPIO_Init+0x12c>)
 80003e6:	f002 ff3d 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f0:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <MX_GPIO_Init+0x130>)
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4820      	ldr	r0, [pc, #128]	@ (8000480 <MX_GPIO_Init+0x12c>)
 8000400:	f002 fdac 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LSTEPB_Pin LSTEPA_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LSTEPB_Pin|LSTEPA_Pin;
 8000404:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4816      	ldr	r0, [pc, #88]	@ (8000478 <MX_GPIO_Init+0x124>)
 800041e:	f002 fd9d 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RSTEPA_Pin LSTEPD_Pin LSTEPC_Pin RSTEPD_Pin
                           RSTEPC_Pin RSTEPB_Pin LCORNER_Pin RCORNER_Pin */
  GPIO_InitStruct.Pin = RSTEPA_Pin|LSTEPD_Pin|LSTEPC_Pin|RSTEPD_Pin
 8000422:	f64f 0332 	movw	r3, #63538	@ 0xf832
 8000426:	613b      	str	r3, [r7, #16]
                          |RSTEPC_Pin|RSTEPB_Pin|LCORNER_Pin|RCORNER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4810      	ldr	r0, [pc, #64]	@ (800047c <MX_GPIO_Init+0x128>)
 800043c:	f002 fd8e 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : FOG_Pin */
  GPIO_InitStruct.Pin = FOG_Pin;
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FOG_GPIO_Port, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	480a      	ldr	r0, [pc, #40]	@ (8000480 <MX_GPIO_Init+0x12c>)
 8000458:	f002 fd80 	bl	8002f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2100      	movs	r1, #0
 8000460:	2028      	movs	r0, #40	@ 0x28
 8000462:	f002 fb56 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000466:	2028      	movs	r0, #40	@ 0x28
 8000468:	f002 fb6f 	bl	8002b4a <HAL_NVIC_EnableIRQ>

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	40010c00 	.word	0x40010c00
 8000480:	40011000 	.word	0x40011000
 8000484:	10110000 	.word	0x10110000

08000488 <can_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void can_init(filter_mask,filter_id){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	filter_init(filter_mask, filter_id);
 8000492:	6839      	ldr	r1, [r7, #0]
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff feff 	bl	8000298 <filter_init>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // 수신 인터럽트 ON
 800049a:	2102      	movs	r1, #2
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <can_init+0x28>)
 800049e:	f002 f818 	bl	80024d2 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan); // can 모듈 시작
 80004a2:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <can_init+0x28>)
 80004a4:	f001 feb0 	bl	8002208 <HAL_CAN_Start>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000d0 	.word	0x200000d0

080004b4 <ws2812_set_lowbeam_colors>:
void ws2812_set_lowbeam_colors(uint8_t (*lcolors)[3],uint8_t (*rcolors)[3])  // colors[i][0]=R, [1]=G, [2]=B

{
 80004b4:	b480      	push	{r7}
 80004b6:	b08b      	sub	sp, #44	@ 0x2c
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int led = 0; led < LED_NUM; led++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	623b      	str	r3, [r7, #32]
 80004c6:	e083      	b.n	80005d0 <ws2812_set_lowbeam_colors+0x11c>
    {
        uint8_t g = lcolors[led][1];
 80004c8:	6a3a      	ldr	r2, [r7, #32]
 80004ca:	4613      	mov	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	785b      	ldrb	r3, [r3, #1]
 80004d6:	747b      	strb	r3, [r7, #17]
        uint8_t r = lcolors[led][0];
 80004d8:	6a3a      	ldr	r2, [r7, #32]
 80004da:	4613      	mov	r3, r2
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	4413      	add	r3, r2
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	743b      	strb	r3, [r7, #16]
        uint8_t b = lcolors[led][2];
 80004e8:	6a3a      	ldr	r2, [r7, #32]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	73fb      	strb	r3, [r7, #15]

        for (; i <  80; i++) ws2812_lbuffer[i] = 0;
 80004f8:	e007      	b.n	800050a <ws2812_set_lowbeam_colors+0x56>
 80004fa:	4a81      	ldr	r2, [pc, #516]	@ (8000700 <ws2812_set_lowbeam_colors+0x24c>)
 80004fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004fe:	2100      	movs	r1, #0
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000506:	3301      	adds	r3, #1
 8000508:	627b      	str	r3, [r7, #36]	@ 0x24
 800050a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800050c:	2b4f      	cmp	r3, #79	@ 0x4f
 800050e:	d9f4      	bls.n	80004fa <ws2812_set_lowbeam_colors+0x46>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8000510:	2307      	movs	r3, #7
 8000512:	77fb      	strb	r3, [r7, #31]
 8000514:	e017      	b.n	8000546 <ws2812_set_lowbeam_colors+0x92>
 8000516:	7c7a      	ldrb	r2, [r7, #17]
 8000518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800051c:	fa42 f303 	asr.w	r3, r2, r3
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <ws2812_set_lowbeam_colors+0x78>
 8000528:	212c      	movs	r1, #44	@ 0x2c
 800052a:	e000      	b.n	800052e <ws2812_set_lowbeam_colors+0x7a>
 800052c:	2119      	movs	r1, #25
 800052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	627a      	str	r2, [r7, #36]	@ 0x24
 8000534:	4a72      	ldr	r2, [pc, #456]	@ (8000700 <ws2812_set_lowbeam_colors+0x24c>)
 8000536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800053a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3b01      	subs	r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	77fb      	strb	r3, [r7, #31]
 8000546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dae3      	bge.n	8000516 <ws2812_set_lowbeam_colors+0x62>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 800054e:	2307      	movs	r3, #7
 8000550:	77bb      	strb	r3, [r7, #30]
 8000552:	e017      	b.n	8000584 <ws2812_set_lowbeam_colors+0xd0>
 8000554:	7c3a      	ldrb	r2, [r7, #16]
 8000556:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800055a:	fa42 f303 	asr.w	r3, r2, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <ws2812_set_lowbeam_colors+0xb6>
 8000566:	212c      	movs	r1, #44	@ 0x2c
 8000568:	e000      	b.n	800056c <ws2812_set_lowbeam_colors+0xb8>
 800056a:	2119      	movs	r1, #25
 800056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	627a      	str	r2, [r7, #36]	@ 0x24
 8000572:	4a63      	ldr	r2, [pc, #396]	@ (8000700 <ws2812_set_lowbeam_colors+0x24c>)
 8000574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000578:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	3b01      	subs	r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	77bb      	strb	r3, [r7, #30]
 8000584:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000588:	2b00      	cmp	r3, #0
 800058a:	dae3      	bge.n	8000554 <ws2812_set_lowbeam_colors+0xa0>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_lbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 800058c:	2307      	movs	r3, #7
 800058e:	777b      	strb	r3, [r7, #29]
 8000590:	e017      	b.n	80005c2 <ws2812_set_lowbeam_colors+0x10e>
 8000592:	7bfa      	ldrb	r2, [r7, #15]
 8000594:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000598:	fa42 f303 	asr.w	r3, r2, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <ws2812_set_lowbeam_colors+0xf4>
 80005a4:	212c      	movs	r1, #44	@ 0x2c
 80005a6:	e000      	b.n	80005aa <ws2812_set_lowbeam_colors+0xf6>
 80005a8:	2119      	movs	r1, #25
 80005aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80005b0:	4a53      	ldr	r2, [pc, #332]	@ (8000700 <ws2812_set_lowbeam_colors+0x24c>)
 80005b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	3b01      	subs	r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	777b      	strb	r3, [r7, #29]
 80005c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	dae3      	bge.n	8000592 <ws2812_set_lowbeam_colors+0xde>
    for (int led = 0; led < LED_NUM; led++)
 80005ca:	6a3b      	ldr	r3, [r7, #32]
 80005cc:	3301      	adds	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	f77f af78 	ble.w	80004c8 <ws2812_set_lowbeam_colors+0x14>
    }

    i = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int led = 0; led < LED_NUM; led++)
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	e083      	b.n	80006ea <ws2812_set_lowbeam_colors+0x236>
	{
		uint8_t g = rcolors[led][1];
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	753b      	strb	r3, [r7, #20]
		uint8_t r = rcolors[led][0];
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	74fb      	strb	r3, [r7, #19]
		uint8_t b = rcolors[led][2];
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4413      	add	r3, r2
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	74bb      	strb	r3, [r7, #18]

		for (; i < 80; i++) ws2812_rbuffer[i] = 0;
 8000612:	e007      	b.n	8000624 <ws2812_set_lowbeam_colors+0x170>
 8000614:	4a3b      	ldr	r2, [pc, #236]	@ (8000704 <ws2812_set_lowbeam_colors+0x250>)
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	2100      	movs	r1, #0
 800061a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	3301      	adds	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
 8000624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000626:	2b4f      	cmp	r3, #79	@ 0x4f
 8000628:	d9f4      	bls.n	8000614 <ws2812_set_lowbeam_colors+0x160>
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 800062a:	2307      	movs	r3, #7
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e017      	b.n	8000660 <ws2812_set_lowbeam_colors+0x1ac>
 8000630:	7d3a      	ldrb	r2, [r7, #20]
 8000632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000636:	fa42 f303 	asr.w	r3, r2, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <ws2812_set_lowbeam_colors+0x192>
 8000642:	212c      	movs	r1, #44	@ 0x2c
 8000644:	e000      	b.n	8000648 <ws2812_set_lowbeam_colors+0x194>
 8000646:	2119      	movs	r1, #25
 8000648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	627a      	str	r2, [r7, #36]	@ 0x24
 800064e:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <ws2812_set_lowbeam_colors+0x250>)
 8000650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	3b01      	subs	r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	75fb      	strb	r3, [r7, #23]
 8000660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000664:	2b00      	cmp	r3, #0
 8000666:	dae3      	bge.n	8000630 <ws2812_set_lowbeam_colors+0x17c>
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8000668:	2307      	movs	r3, #7
 800066a:	75bb      	strb	r3, [r7, #22]
 800066c:	e017      	b.n	800069e <ws2812_set_lowbeam_colors+0x1ea>
 800066e:	7cfa      	ldrb	r2, [r7, #19]
 8000670:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000674:	fa42 f303 	asr.w	r3, r2, r3
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <ws2812_set_lowbeam_colors+0x1d0>
 8000680:	212c      	movs	r1, #44	@ 0x2c
 8000682:	e000      	b.n	8000686 <ws2812_set_lowbeam_colors+0x1d2>
 8000684:	2119      	movs	r1, #25
 8000686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	627a      	str	r2, [r7, #36]	@ 0x24
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <ws2812_set_lowbeam_colors+0x250>)
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000692:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	75bb      	strb	r3, [r7, #22]
 800069e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dae3      	bge.n	800066e <ws2812_set_lowbeam_colors+0x1ba>
		for (int8_t bit = 7; bit >= 0; bit--) ws2812_rbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80006a6:	2307      	movs	r3, #7
 80006a8:	757b      	strb	r3, [r7, #21]
 80006aa:	e017      	b.n	80006dc <ws2812_set_lowbeam_colors+0x228>
 80006ac:	7cba      	ldrb	r2, [r7, #18]
 80006ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006b2:	fa42 f303 	asr.w	r3, r2, r3
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <ws2812_set_lowbeam_colors+0x20e>
 80006be:	212c      	movs	r1, #44	@ 0x2c
 80006c0:	e000      	b.n	80006c4 <ws2812_set_lowbeam_colors+0x210>
 80006c2:	2119      	movs	r1, #25
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <ws2812_set_lowbeam_colors+0x250>)
 80006cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006d0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	757b      	strb	r3, [r7, #21]
 80006dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dae3      	bge.n	80006ac <ws2812_set_lowbeam_colors+0x1f8>
	for (int led = 0; led < LED_NUM; led++)
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3301      	adds	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	f77f af78 	ble.w	80005e2 <ws2812_set_lowbeam_colors+0x12e>

	}
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	372c      	adds	r7, #44	@ 0x2c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200000f8 	.word	0x200000f8
 8000704:	20000318 	.word	0x20000318

08000708 <ws2812_set_highbeam_colors>:
void ws2812_set_highbeam_colors(uint8_t (*hcolors)[3])  // colors[i][0]=R, [1]=G, [2]=B

{
 8000708:	b480      	push	{r7}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    uint32_t i = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
    for (int led = 0; led < LED_NUM; led++)
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	e083      	b.n	8000822 <ws2812_set_highbeam_colors+0x11a>
    {
        uint8_t g = hcolors[led][1];
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	785b      	ldrb	r3, [r3, #1]
 8000728:	733b      	strb	r3, [r7, #12]
        uint8_t r = hcolors[led][0];
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	72fb      	strb	r3, [r7, #11]
        uint8_t b = hcolors[led][2];
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	72bb      	strb	r3, [r7, #10]

        for (; i <  80; i++) ws2812_hbuffer[i] = 0;
 800074a:	e007      	b.n	800075c <ws2812_set_highbeam_colors+0x54>
 800074c:	4a3a      	ldr	r2, [pc, #232]	@ (8000838 <ws2812_set_highbeam_colors+0x130>)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	2100      	movs	r1, #0
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000760:	d9f4      	bls.n	800074c <ws2812_set_highbeam_colors+0x44>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (g >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 8000762:	2307      	movs	r3, #7
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e017      	b.n	8000798 <ws2812_set_highbeam_colors+0x90>
 8000768:	7b3a      	ldrb	r2, [r7, #12]
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	fa42 f303 	asr.w	r3, r2, r3
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <ws2812_set_highbeam_colors+0x76>
 800077a:	212c      	movs	r1, #44	@ 0x2c
 800077c:	e000      	b.n	8000780 <ws2812_set_highbeam_colors+0x78>
 800077e:	2119      	movs	r1, #25
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	617a      	str	r2, [r7, #20]
 8000786:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <ws2812_set_highbeam_colors+0x130>)
 8000788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800078c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dae3      	bge.n	8000768 <ws2812_set_highbeam_colors+0x60>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (r >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80007a0:	2307      	movs	r3, #7
 80007a2:	73bb      	strb	r3, [r7, #14]
 80007a4:	e017      	b.n	80007d6 <ws2812_set_highbeam_colors+0xce>
 80007a6:	7afa      	ldrb	r2, [r7, #11]
 80007a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007ac:	fa42 f303 	asr.w	r3, r2, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <ws2812_set_highbeam_colors+0xb4>
 80007b8:	212c      	movs	r1, #44	@ 0x2c
 80007ba:	e000      	b.n	80007be <ws2812_set_highbeam_colors+0xb6>
 80007bc:	2119      	movs	r1, #25
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	617a      	str	r2, [r7, #20]
 80007c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <ws2812_set_highbeam_colors+0x130>)
 80007c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73bb      	strb	r3, [r7, #14]
 80007d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dae3      	bge.n	80007a6 <ws2812_set_highbeam_colors+0x9e>
        for (int8_t bit = 7; bit >= 0; bit--) ws2812_hbuffer[i++] = (b >> bit) & 1 ? WS2812_HIGH : WS2812_LOW;
 80007de:	2307      	movs	r3, #7
 80007e0:	737b      	strb	r3, [r7, #13]
 80007e2:	e017      	b.n	8000814 <ws2812_set_highbeam_colors+0x10c>
 80007e4:	7aba      	ldrb	r2, [r7, #10]
 80007e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007ea:	fa42 f303 	asr.w	r3, r2, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <ws2812_set_highbeam_colors+0xf2>
 80007f6:	212c      	movs	r1, #44	@ 0x2c
 80007f8:	e000      	b.n	80007fc <ws2812_set_highbeam_colors+0xf4>
 80007fa:	2119      	movs	r1, #25
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	617a      	str	r2, [r7, #20]
 8000802:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <ws2812_set_highbeam_colors+0x130>)
 8000804:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000808:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3b01      	subs	r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	737b      	strb	r3, [r7, #13]
 8000814:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dae3      	bge.n	80007e4 <ws2812_set_highbeam_colors+0xdc>
    for (int led = 0; led < LED_NUM; led++)
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	3301      	adds	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	2b07      	cmp	r3, #7
 8000826:	f77f af78 	ble.w	800071a <ws2812_set_highbeam_colors+0x12>
    }


}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000538 	.word	0x20000538

0800083c <ws2812_show>:
void ws2812_show(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    // DMA로 PWM 전송 시작
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)ws2812_lbuffer, LED_BIT_LEN + BIT_OFFSET);
 8000840:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <ws2812_show+0x38>)
 8000846:	2100      	movs	r1, #0
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <ws2812_show+0x3c>)
 800084a:	f003 f9a5 	bl	8003b98 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)ws2812_rbuffer, LED_BIT_LEN + BIT_OFFSET);
 800084e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <ws2812_show+0x40>)
 8000854:	2104      	movs	r1, #4
 8000856:	480a      	ldr	r0, [pc, #40]	@ (8000880 <ws2812_show+0x44>)
 8000858:	f003 f99e 	bl	8003b98 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)ws2812_hbuffer, LED_BIT_LEN + BIT_OFFSET);
 800085c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000860:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <ws2812_show+0x48>)
 8000862:	2104      	movs	r1, #4
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <ws2812_show+0x4c>)
 8000866:	f003 f997 	bl	8003b98 <HAL_TIM_PWM_Start_DMA>
    // reset time 확보를 위해 전송 후 잠시 대기
    HAL_Delay(2);  // 최소 50µs 이상 필요 (1ms이면 충분)
 800086a:	2002      	movs	r0, #2
 800086c:	f001 fae4 	bl	8001e38 <HAL_Delay>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000f8 	.word	0x200000f8
 8000878:	20000844 	.word	0x20000844
 800087c:	20000318 	.word	0x20000318
 8000880:	200007fc 	.word	0x200007fc
 8000884:	20000538 	.word	0x20000538
 8000888:	200007b4 	.word	0x200007b4

0800088c <set_lowbeam>:
void set_lowbeam(uint8_t brightness)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < LED_NUM; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e056      	b.n	800094a <set_lowbeam+0xbe>
	{
		lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = brightness;
 800089c:	4931      	ldr	r1, [pc, #196]	@ (8000964 <set_lowbeam+0xd8>)
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	3302      	adds	r3, #2
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	492d      	ldr	r1, [pc, #180]	@ (8000964 <set_lowbeam+0xd8>)
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	3302      	adds	r3, #2
 80008bc:	7818      	ldrb	r0, [r3, #0]
 80008be:	4929      	ldr	r1, [pc, #164]	@ (8000964 <set_lowbeam+0xd8>)
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	3301      	adds	r3, #1
 80008cc:	4602      	mov	r2, r0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	4924      	ldr	r1, [pc, #144]	@ (8000964 <set_lowbeam+0xd8>)
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	3301      	adds	r3, #1
 80008de:	7818      	ldrb	r0, [r3, #0]
 80008e0:	4920      	ldr	r1, [pc, #128]	@ (8000964 <set_lowbeam+0xd8>)
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	4602      	mov	r2, r0
 80008ee:	701a      	strb	r2, [r3, #0]
		rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = brightness;
 80008f0:	491d      	ldr	r1, [pc, #116]	@ (8000968 <set_lowbeam+0xdc>)
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	3302      	adds	r3, #2
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	4919      	ldr	r1, [pc, #100]	@ (8000968 <set_lowbeam+0xdc>)
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	440b      	add	r3, r1
 800090e:	3302      	adds	r3, #2
 8000910:	7818      	ldrb	r0, [r3, #0]
 8000912:	4915      	ldr	r1, [pc, #84]	@ (8000968 <set_lowbeam+0xdc>)
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	440b      	add	r3, r1
 800091e:	3301      	adds	r3, #1
 8000920:	4602      	mov	r2, r0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4910      	ldr	r1, [pc, #64]	@ (8000968 <set_lowbeam+0xdc>)
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	440b      	add	r3, r1
 8000930:	3301      	adds	r3, #1
 8000932:	7818      	ldrb	r0, [r3, #0]
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <set_lowbeam+0xdc>)
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	440b      	add	r3, r1
 8000940:	4602      	mov	r2, r0
 8000942:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_NUM; i++)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b07      	cmp	r3, #7
 800094e:	dda5      	ble.n	800089c <set_lowbeam+0x10>
	}
	ws2812_set_lowbeam_colors(lcolors,rcolors);
 8000950:	4905      	ldr	r1, [pc, #20]	@ (8000968 <set_lowbeam+0xdc>)
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <set_lowbeam+0xd8>)
 8000954:	f7ff fdae 	bl	80004b4 <ws2812_set_lowbeam_colors>
	ws2812_show();
 8000958:	f7ff ff70 	bl	800083c <ws2812_show>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000758 	.word	0x20000758
 8000968:	20000770 	.word	0x20000770

0800096c <set_highbeam>:
void set_highbeam(uint8_t brightness)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < LED_NUM; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e02c      	b.n	80009d6 <set_highbeam+0x6a>
	{
		hcolors[i][0] = hcolors[i][1] = hcolors[i][2] = brightness;
 800097c:	491c      	ldr	r1, [pc, #112]	@ (80009f0 <set_highbeam+0x84>)
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	440b      	add	r3, r1
 8000988:	3302      	adds	r3, #2
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <set_highbeam+0x84>)
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	440b      	add	r3, r1
 800099a:	3302      	adds	r3, #2
 800099c:	7818      	ldrb	r0, [r3, #0]
 800099e:	4914      	ldr	r1, [pc, #80]	@ (80009f0 <set_highbeam+0x84>)
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	3301      	adds	r3, #1
 80009ac:	4602      	mov	r2, r0
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	490f      	ldr	r1, [pc, #60]	@ (80009f0 <set_highbeam+0x84>)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	440b      	add	r3, r1
 80009bc:	3301      	adds	r3, #1
 80009be:	7818      	ldrb	r0, [r3, #0]
 80009c0:	490b      	ldr	r1, [pc, #44]	@ (80009f0 <set_highbeam+0x84>)
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	4602      	mov	r2, r0
 80009ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_NUM; i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	ddcf      	ble.n	800097c <set_highbeam+0x10>
	}
	ws2812_set_highbeam_colors(hcolors);
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <set_highbeam+0x84>)
 80009de:	f7ff fe93 	bl	8000708 <ws2812_set_highbeam_colors>
	ws2812_show();
 80009e2:	f7ff ff2b 	bl	800083c <ws2812_show>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000788 	.word	0x20000788

080009f4 <light_init>:
void light_init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	ws2812_scroll_init();
 80009f8:	f000 f820 	bl	8000a3c <ws2812_scroll_init>
	set_lowbeam(255);
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	f7ff ff45 	bl	800088c <set_lowbeam>
	set_highbeam(255);
 8000a02:	20ff      	movs	r0, #255	@ 0xff
 8000a04:	f7ff ffb2 	bl	800096c <set_highbeam>
	HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a0c:	f001 fa14 	bl	8001e38 <HAL_Delay>

	set_lowbeam(125);
 8000a10:	207d      	movs	r0, #125	@ 0x7d
 8000a12:	f7ff ff3b 	bl	800088c <set_lowbeam>
	set_highbeam(125);
 8000a16:	207d      	movs	r0, #125	@ 0x7d
 8000a18:	f7ff ffa8 	bl	800096c <set_highbeam>
	HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a20:	f001 fa0a 	bl	8001e38 <HAL_Delay>

	set_lowbeam(0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff31 	bl	800088c <set_lowbeam>
	set_highbeam(0);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ff9e 	bl	800096c <set_highbeam>
	HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a34:	f001 fa00 	bl	8001e38 <HAL_Delay>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ws2812_scroll_init>:
void ws2812_scroll_init(void)// LED 시작시에 애니메이션 기능을 넣으면 좋지않을까? -> 보완해야함
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
//		ws2812_show();
//
//		HAL_Delay(100);  // 속도 조절
//		}
//	}
	for (int i = 0; i < LED_NUM; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e056      	b.n	8000af6 <ws2812_scroll_init+0xba>
		  	        lcolors[i][0] = lcolors[i][1] = lcolors[i][2] = 0;
 8000a48:	4967      	ldr	r1, [pc, #412]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	3302      	adds	r3, #2
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	4963      	ldr	r1, [pc, #396]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	3302      	adds	r3, #2
 8000a68:	7818      	ldrb	r0, [r3, #0]
 8000a6a:	495f      	ldr	r1, [pc, #380]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	3301      	adds	r3, #1
 8000a78:	4602      	mov	r2, r0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	495a      	ldr	r1, [pc, #360]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	3301      	adds	r3, #1
 8000a8a:	7818      	ldrb	r0, [r3, #0]
 8000a8c:	4956      	ldr	r1, [pc, #344]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	4602      	mov	r2, r0
 8000a9a:	701a      	strb	r2, [r3, #0]
		  	        rcolors[i][0] = rcolors[i][1] = rcolors[i][2] = 0;
 8000a9c:	4953      	ldr	r1, [pc, #332]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	494f      	ldr	r1, [pc, #316]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	3302      	adds	r3, #2
 8000abc:	7818      	ldrb	r0, [r3, #0]
 8000abe:	494b      	ldr	r1, [pc, #300]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3301      	adds	r3, #1
 8000acc:	4602      	mov	r2, r0
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	4946      	ldr	r1, [pc, #280]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	3301      	adds	r3, #1
 8000ade:	7818      	ldrb	r0, [r3, #0]
 8000ae0:	4942      	ldr	r1, [pc, #264]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	4602      	mov	r2, r0
 8000aee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_NUM; i++) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	dda5      	ble.n	8000a48 <ws2812_scroll_init+0xc>
		  	    }

		  	    for (int i = 0; i < LED_NUM; i++) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	e069      	b.n	8000bd6 <ws2812_scroll_init+0x19a>
		  	        // i번째까지 흰색으로 설정
		  	        for (int j = 0; j <= i; j++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	e056      	b.n	8000bb6 <ws2812_scroll_init+0x17a>
		  	            lcolors[j][0] = lcolors[j][1] = lcolors[j][2] = 255;  // 왼쪽
 8000b08:	4937      	ldr	r1, [pc, #220]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	3302      	adds	r3, #2
 8000b16:	22ff      	movs	r2, #255	@ 0xff
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	4933      	ldr	r1, [pc, #204]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	3302      	adds	r3, #2
 8000b28:	7818      	ldrb	r0, [r3, #0]
 8000b2a:	492f      	ldr	r1, [pc, #188]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	3301      	adds	r3, #1
 8000b38:	4602      	mov	r2, r0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	492a      	ldr	r1, [pc, #168]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	3301      	adds	r3, #1
 8000b4a:	7818      	ldrb	r0, [r3, #0]
 8000b4c:	4926      	ldr	r1, [pc, #152]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	4602      	mov	r2, r0
 8000b5a:	701a      	strb	r2, [r3, #0]
		  	            rcolors[j][0] = rcolors[j][1] = rcolors[j][2] = 255;  // 오른쪽
 8000b5c:	4923      	ldr	r1, [pc, #140]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	3302      	adds	r3, #2
 8000b6a:	22ff      	movs	r2, #255	@ 0xff
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	491f      	ldr	r1, [pc, #124]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	7818      	ldrb	r0, [r3, #0]
 8000b7e:	491b      	ldr	r1, [pc, #108]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	4916      	ldr	r1, [pc, #88]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	4912      	ldr	r1, [pc, #72]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	4602      	mov	r2, r0
 8000bae:	701a      	strb	r2, [r3, #0]
		  	        for (int j = 0; j <= i; j++) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dda4      	ble.n	8000b08 <ws2812_scroll_init+0xcc>
		  	        }

		  	        ws2812_set_lowbeam_colors(lcolors, rcolors);
 8000bbe:	490b      	ldr	r1, [pc, #44]	@ (8000bec <ws2812_scroll_init+0x1b0>)
 8000bc0:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <ws2812_scroll_init+0x1ac>)
 8000bc2:	f7ff fc77 	bl	80004b4 <ws2812_set_lowbeam_colors>
		  	        ws2812_show();
 8000bc6:	f7ff fe39 	bl	800083c <ws2812_show>
		  	        HAL_Delay(100);  // 속도 조절
 8000bca:	2064      	movs	r0, #100	@ 0x64
 8000bcc:	f001 f934 	bl	8001e38 <HAL_Delay>
		  	    for (int i = 0; i < LED_NUM; i++) {
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	dd92      	ble.n	8000b02 <ws2812_scroll_init+0xc6>
		  	    }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000758 	.word	0x20000758
 8000bec:	20000770 	.word	0x20000770

08000bf0 <low_beam_power_control>:

void low_beam_power_control(LowBeam mode) // LED를 0%와 70%로 토글
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	static uint8_t day_count = 0;
	static uint8_t night_count = 0;
	static LowBeam last_input = -1;
	static LowBeam current_mode = -1;
	if (mode != last_input)
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <low_beam_power_control+0xb4>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d005      	beq.n	8000c10 <low_beam_power_control+0x20>
	{
		day_count = 0;
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
		night_count = 0;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	}
	switch(mode)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <low_beam_power_control+0x2c>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d007      	beq.n	8000c2a <low_beam_power_control+0x3a>
 8000c1a:	e00d      	b.n	8000c38 <low_beam_power_control+0x48>
	{
	case DAY:
		day_count++;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c26:	701a      	strb	r2, [r3, #0]
		break;
 8000c28:	e006      	b.n	8000c38 <low_beam_power_control+0x48>
	case NIGHT:
		night_count++;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c34:	701a      	strb	r2, [r3, #0]
		break;
 8000c36:	bf00      	nop
	}


	if (day_count >= THRESHOLD && current_mode !=DAY)
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d912      	bls.n	8000c66 <low_beam_power_control+0x76>
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <low_beam_power_control+0xc0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00e      	beq.n	8000c66 <low_beam_power_control+0x76>
	{
		uint8_t brightness = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
		set_lowbeam(brightness);
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe1c 	bl	800088c <set_lowbeam>
		current_mode = DAY;
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <low_beam_power_control+0xc0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
		day_count = 0;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		night_count = 0;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	}

	if (night_count >= THRESHOLD && current_mode != NIGHT)
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d912      	bls.n	8000c94 <low_beam_power_control+0xa4>
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <low_beam_power_control+0xc0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d00e      	beq.n	8000c94 <low_beam_power_control+0xa4>
	{
		uint8_t brightness = 178;
 8000c76:	23b2      	movs	r3, #178	@ 0xb2
 8000c78:	73bb      	strb	r3, [r7, #14]
		set_lowbeam(brightness);
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe05 	bl	800088c <set_lowbeam>
		current_mode = NIGHT;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <low_beam_power_control+0xc0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
		day_count = 0;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <low_beam_power_control+0xb8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
		night_count = 0;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <low_beam_power_control+0xbc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	}

	last_input = mode;
 8000c94:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <low_beam_power_control+0xb4>)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	7013      	strb	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200007a1 	.word	0x200007a1
 8000cac:	200007a2 	.word	0x200007a2
 8000cb0:	20000001 	.word	0x20000001

08000cb4 <driving_mode_change>:

void driving_mode_change(DriveMode mode) // 스텝모터 드라이버가 없어서 보류
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	static uint8_t country_count = 0;
	static uint8_t highway_count = 0;

	static DriveMode last_input = -1;
	static DriveMode current_mode = -1;
	if (mode != last_input)
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <driving_mode_change+0x11c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d008      	beq.n	8000cda <driving_mode_change+0x26>
	{
		city_count = 0;
 8000cc8:	4b42      	ldr	r3, [pc, #264]	@ (8000dd4 <driving_mode_change+0x120>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		country_count = 0;
 8000cce:	4b42      	ldr	r3, [pc, #264]	@ (8000dd8 <driving_mode_change+0x124>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
		highway_count = 0;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <driving_mode_change+0x128>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
	}
	switch(mode)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d014      	beq.n	8000d0a <driving_mode_change+0x56>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dc19      	bgt.n	8000d18 <driving_mode_change+0x64>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <driving_mode_change+0x3a>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d007      	beq.n	8000cfc <driving_mode_change+0x48>
 8000cec:	e014      	b.n	8000d18 <driving_mode_change+0x64>
	{
	case CITY:
		city_count++;
 8000cee:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <driving_mode_change+0x120>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <driving_mode_change+0x120>)
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e00d      	b.n	8000d18 <driving_mode_change+0x64>
	case COUNTRY:
		country_count++;
 8000cfc:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <driving_mode_change+0x124>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <driving_mode_change+0x124>)
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	e006      	b.n	8000d18 <driving_mode_change+0x64>
	case HIGHWAY:
		highway_count++;
 8000d0a:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <driving_mode_change+0x128>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <driving_mode_change+0x128>)
 8000d14:	701a      	strb	r2, [r3, #0]
		break;
 8000d16:	bf00      	nop
	}

	if (city_count >= THRESHOLD && current_mode !=CITY)
 8000d18:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <driving_mode_change+0x120>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d90f      	bls.n	8000d40 <driving_mode_change+0x8c>
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00b      	beq.n	8000d40 <driving_mode_change+0x8c>
	{

		current_mode = CITY;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
		city_count = 0;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <driving_mode_change+0x120>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
		country_count = 0;
 8000d34:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <driving_mode_change+0x124>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
		highway_count = 0;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <driving_mode_change+0x128>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

	}

	if (country_count >= THRESHOLD && current_mode != COUNTRY)
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <driving_mode_change+0x124>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d91d      	bls.n	8000d84 <driving_mode_change+0xd0>
 8000d48:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d019      	beq.n	8000d84 <driving_mode_change+0xd0>
	{
		if(current_mode == HIGHWAY)
 8000d50:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d109      	bne.n	8000d6c <driving_mode_change+0xb8>
		{
			rotate_rmotor(1, 5, 100); // 반시계 방향 100스텝
 8000d58:	2264      	movs	r2, #100	@ 0x64
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 faf3 	bl	8001348 <rotate_rmotor>
			rotate_lmotor(0, 5, 100); // 시계 방향 100스텝
 8000d62:	2264      	movs	r2, #100	@ 0x64
 8000d64:	2105      	movs	r1, #5
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 fab4 	bl	80012d4 <rotate_lmotor>
		}

		current_mode = COUNTRY;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
		city_count = 0;
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <driving_mode_change+0x120>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		country_count = 0;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <driving_mode_change+0x124>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		highway_count = 0;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <driving_mode_change+0x128>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	}
	if (highway_count >= THRESHOLD && current_mode != HIGHWAY)
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <driving_mode_change+0x128>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d919      	bls.n	8000dc0 <driving_mode_change+0x10c>
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <driving_mode_change+0x12c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d015      	beq.n	8000dc0 <driving_mode_change+0x10c>
	{

		rotate_rmotor(0, 5, 100); // 시계 방향 100스텝
 8000d94:	2264      	movs	r2, #100	@ 0x64
 8000d96:	2105      	movs	r1, #5
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 fad5 	bl	8001348 <rotate_rmotor>
		rotate_lmotor(1, 5, 100); // 반시계 방향 100스텝
 8000d9e:	2264      	movs	r2, #100	@ 0x64
 8000da0:	2105      	movs	r1, #5
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fa96 	bl	80012d4 <rotate_lmotor>

		current_mode = HIGHWAY;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <driving_mode_change+0x12c>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
		city_count = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <driving_mode_change+0x120>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
		country_count = 0;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <driving_mode_change+0x124>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		highway_count = 0;
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <driving_mode_change+0x128>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
	}


	last_input = mode;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <driving_mode_change+0x11c>)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	7013      	strb	r3, [r2, #0]

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000002 	.word	0x20000002
 8000dd4:	200007a3 	.word	0x200007a3
 8000dd8:	200007a4 	.word	0x200007a4
 8000ddc:	200007a5 	.word	0x200007a5
 8000de0:	20000003 	.word	0x20000003

08000de4 <rainroad_mode_change>:

void rainroad_mode_change(RainRoad mode) // LED의 밝기를 70% 와 100%로 토글
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    static uint8_t weak_count = 0;
    static uint8_t strong_count = 0;
    static RainRoad last_input = -1;
    static RainRoad current_mode = -1;
    if (mode != last_input)
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <rainroad_mode_change+0xb4>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d005      	beq.n	8000e04 <rainroad_mode_change+0x20>
    {
		weak_count = 0;
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
		strong_count = 0;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
    }

    switch(mode)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <rainroad_mode_change+0x2c>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d007      	beq.n	8000e1e <rainroad_mode_change+0x3a>
 8000e0e:	e00d      	b.n	8000e2c <rainroad_mode_change+0x48>
    {
    case WEAK:
    	weak_count++;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000e1a:	701a      	strb	r2, [r3, #0]
    	break;
 8000e1c:	e006      	b.n	8000e2c <rainroad_mode_change+0x48>
    case STRONG:
    	strong_count++;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e28:	701a      	strb	r2, [r3, #0]
    	break;
 8000e2a:	bf00      	nop
    }

    if (weak_count >= THRESHOLD && current_mode!=WEAK)
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d912      	bls.n	8000e5a <rainroad_mode_change+0x76>
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <rainroad_mode_change+0xc0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00e      	beq.n	8000e5a <rainroad_mode_change+0x76>
    {
		uint8_t brightness = 178;
 8000e3c:	23b2      	movs	r3, #178	@ 0xb2
 8000e3e:	73fb      	strb	r3, [r7, #15]
		set_lowbeam(brightness);
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fd22 	bl	800088c <set_lowbeam>
		current_mode = WEAK;
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <rainroad_mode_change+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		weak_count = 0;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
		strong_count = 0;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	}

	if (strong_count >= THRESHOLD && current_mode!=STRONG)
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d912      	bls.n	8000e88 <rainroad_mode_change+0xa4>
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <rainroad_mode_change+0xc0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d00e      	beq.n	8000e88 <rainroad_mode_change+0xa4>
	{
		uint8_t brightness = 255;
 8000e6a:	23ff      	movs	r3, #255	@ 0xff
 8000e6c:	73bb      	strb	r3, [r7, #14]
		set_lowbeam(brightness);
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd0b 	bl	800088c <set_lowbeam>
		current_mode = STRONG;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <rainroad_mode_change+0xc0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		weak_count = 0;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <rainroad_mode_change+0xb8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		strong_count = 0;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <rainroad_mode_change+0xbc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
	}

	last_input = mode;
 8000e88:	4a03      	ldr	r2, [pc, #12]	@ (8000e98 <rainroad_mode_change+0xb4>)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	7013      	strb	r3, [r2, #0]

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	200007a6 	.word	0x200007a6
 8000ea0:	200007a7 	.word	0x200007a7
 8000ea4:	20000005 	.word	0x20000005

08000ea8 <high_beam_power_control>:

void high_beam_power_control(HighBeam mode)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	static uint8_t on_count = 0;
	static uint8_t off_count = 0;
	static HighBeam last_input = -1;
	static HighBeam current_mode = -1;
	if (mode != last_input)
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <high_beam_power_control+0xb4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d005      	beq.n	8000ec8 <high_beam_power_control+0x20>
	{
		on_count = 0;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 8000ec2:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	}
	switch(mode)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <high_beam_power_control+0x2c>
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d007      	beq.n	8000ee2 <high_beam_power_control+0x3a>
 8000ed2:	e00d      	b.n	8000ef0 <high_beam_power_control+0x48>
	{
	case H_ON:
		on_count++;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000ede:	701a      	strb	r2, [r3, #0]
		break;
 8000ee0:	e006      	b.n	8000ef0 <high_beam_power_control+0x48>
	case H_OFF:
		off_count++;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000eec:	701a      	strb	r2, [r3, #0]
		break;
 8000eee:	bf00      	nop
	}


	if (on_count >= THRESHOLD && current_mode !=H_ON)
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d912      	bls.n	8000f1e <high_beam_power_control+0x76>
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <high_beam_power_control+0xc0>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00e      	beq.n	8000f1e <high_beam_power_control+0x76>
	{
		uint8_t brightness = 255;
 8000f00:	23ff      	movs	r3, #255	@ 0xff
 8000f02:	73fb      	strb	r3, [r7, #15]
		set_highbeam(brightness);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fd30 	bl	800096c <set_highbeam>
		current_mode = H_ON;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <high_beam_power_control+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
		on_count = 0;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	}

	if (off_count >= THRESHOLD && current_mode != H_OFF)
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d912      	bls.n	8000f4c <high_beam_power_control+0xa4>
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <high_beam_power_control+0xc0>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d00e      	beq.n	8000f4c <high_beam_power_control+0xa4>
	{
		uint8_t brightness = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73bb      	strb	r3, [r7, #14]
		set_highbeam(brightness);
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fd19 	bl	800096c <set_highbeam>
		current_mode = H_OFF;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <high_beam_power_control+0xc0>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
		on_count = 0;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <high_beam_power_control+0xb8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <high_beam_power_control+0xbc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
	}

	last_input = mode;
 8000f4c:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <high_beam_power_control+0xb4>)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	7013      	strb	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000006 	.word	0x20000006
 8000f60:	200007a8 	.word	0x200007a8
 8000f64:	200007a9 	.word	0x200007a9
 8000f68:	20000007 	.word	0x20000007

08000f6c <foglight_power_control>:

void foglight_power_control(FogLight mode)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	static uint8_t clean_count = 0;
	static uint8_t fog_count = 0;
	static FogLight last_input = -1;
	static FogLight current_mode = -1;
	if (mode != last_input)
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <foglight_power_control+0xb0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d005      	beq.n	8000f8c <foglight_power_control+0x20>
	{
		clean_count = 0;
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <foglight_power_control+0xb4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		fog_count = 0;
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <foglight_power_control+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	}
	switch(mode)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <foglight_power_control+0x2c>
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <foglight_power_control+0x3a>
 8000f96:	e00d      	b.n	8000fb4 <foglight_power_control+0x48>
	{
	case CLEAN:
		clean_count++;
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <foglight_power_control+0xb4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <foglight_power_control+0xb4>)
 8000fa2:	701a      	strb	r2, [r3, #0]
		break;
 8000fa4:	e006      	b.n	8000fb4 <foglight_power_control+0x48>
	case FOG:
		fog_count++;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <foglight_power_control+0xb8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <foglight_power_control+0xb8>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		break;
 8000fb2:	bf00      	nop
	}


	if (clean_count >= THRESHOLD && current_mode !=CLEAN)
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <foglight_power_control+0xb4>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d911      	bls.n	8000fe0 <foglight_power_control+0x74>
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <foglight_power_control+0xbc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <foglight_power_control+0x74>
	{
		FOG_OFF();
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	@ 0x80
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <foglight_power_control+0xc0>)
 8000fca:	f002 f94b 	bl	8003264 <HAL_GPIO_WritePin>
		//안개등 작동 off
		current_mode = CLEAN;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <foglight_power_control+0xbc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
		clean_count = 0;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <foglight_power_control+0xb4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
		fog_count = 0;
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <foglight_power_control+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	}

	if (fog_count >= THRESHOLD && current_mode != FOG)
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <foglight_power_control+0xb8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d911      	bls.n	800100c <foglight_power_control+0xa0>
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <foglight_power_control+0xbc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d00d      	beq.n	800100c <foglight_power_control+0xa0>
	{
		FOG_ON();
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	480d      	ldr	r0, [pc, #52]	@ (800102c <foglight_power_control+0xc0>)
 8000ff6:	f002 f935 	bl	8003264 <HAL_GPIO_WritePin>
		//안개등 작동 on
		current_mode = FOG;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <foglight_power_control+0xbc>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
		clean_count = 0;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <foglight_power_control+0xb4>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
		fog_count = 0;
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <foglight_power_control+0xb8>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	}

	last_input = mode;
 800100c:	4a03      	ldr	r2, [pc, #12]	@ (800101c <foglight_power_control+0xb0>)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	7013      	strb	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	200007aa 	.word	0x200007aa
 8001024:	200007ab 	.word	0x200007ab
 8001028:	20000009 	.word	0x20000009
 800102c:	40011000 	.word	0x40011000

08001030 <cornerlight_power_control>:

void cornerlight_power_control(CornerLight mode)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	static uint8_t right_count = 0;
	static uint8_t left_count = 0;

	static CornerLight last_input = -1;
	static CornerLight current_mode = -1;
	if (mode != last_input)
 800103a:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <cornerlight_power_control+0x198>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	429a      	cmp	r2, r3
 8001042:	d00b      	beq.n	800105c <cornerlight_power_control+0x2c>
	{
		off_count = 0;
 8001044:	4b61      	ldr	r3, [pc, #388]	@ (80011cc <cornerlight_power_control+0x19c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
		both_count = 0;
 800104a:	4b61      	ldr	r3, [pc, #388]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 8001050:	4b60      	ldr	r3, [pc, #384]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		left_count = 0;
 8001056:	4b60      	ldr	r3, [pc, #384]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	}
	switch(mode)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d826      	bhi.n	80010b0 <cornerlight_power_control+0x80>
 8001062:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <cornerlight_power_control+0x38>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001079 	.word	0x08001079
 800106c:	08001087 	.word	0x08001087
 8001070:	08001095 	.word	0x08001095
 8001074:	080010a3 	.word	0x080010a3
	{
	case OFF:
		off_count++;
 8001078:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <cornerlight_power_control+0x19c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <cornerlight_power_control+0x19c>)
 8001082:	701a      	strb	r2, [r3, #0]
		break;
 8001084:	e014      	b.n	80010b0 <cornerlight_power_control+0x80>
	case BOTH:
		both_count++;
 8001086:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b50      	ldr	r3, [pc, #320]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 8001090:	701a      	strb	r2, [r3, #0]
		break;
 8001092:	e00d      	b.n	80010b0 <cornerlight_power_control+0x80>
	case RIGHT:
		right_count++;
 8001094:	4b4f      	ldr	r3, [pc, #316]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 800109e:	701a      	strb	r2, [r3, #0]
		break;
 80010a0:	e006      	b.n	80010b0 <cornerlight_power_control+0x80>
	case LEFT:
		left_count++;
 80010a2:	4b4d      	ldr	r3, [pc, #308]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 80010ac:	701a      	strb	r2, [r3, #0]
		break;
 80010ae:	bf00      	nop
	}

	if (off_count >= THRESHOLD && current_mode !=OFF)
 80010b0:	4b46      	ldr	r3, [pc, #280]	@ (80011cc <cornerlight_power_control+0x19c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d91c      	bls.n	80010f2 <cornerlight_power_control+0xc2>
 80010b8:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <cornerlight_power_control+0x1ac>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d018      	beq.n	80010f2 <cornerlight_power_control+0xc2>
	{
		LCORNER_OFF();
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	4846      	ldr	r0, [pc, #280]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 80010c6:	f002 f8cd 	bl	8003264 <HAL_GPIO_WritePin>
		RCORNER_OFF();
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4844      	ldr	r0, [pc, #272]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 80010d0:	f002 f8c8 	bl	8003264 <HAL_GPIO_WritePin>

		current_mode = OFF;
 80010d4:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <cornerlight_power_control+0x1ac>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 80010da:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <cornerlight_power_control+0x19c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
		both_count = 0;
 80010e0:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
		left_count = 0;
 80010ec:	4b3a      	ldr	r3, [pc, #232]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	}

	if (both_count >= THRESHOLD && current_mode != BOTH)
 80010f2:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d91c      	bls.n	8001134 <cornerlight_power_control+0x104>
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <cornerlight_power_control+0x1ac>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d018      	beq.n	8001134 <cornerlight_power_control+0x104>
	{
		LCORNER_ON();
 8001102:	2201      	movs	r2, #1
 8001104:	2110      	movs	r1, #16
 8001106:	4836      	ldr	r0, [pc, #216]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 8001108:	f002 f8ac 	bl	8003264 <HAL_GPIO_WritePin>
		RCORNER_ON();
 800110c:	2201      	movs	r2, #1
 800110e:	2120      	movs	r1, #32
 8001110:	4833      	ldr	r0, [pc, #204]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 8001112:	f002 f8a7 	bl	8003264 <HAL_GPIO_WritePin>

		current_mode = BOTH;
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <cornerlight_power_control+0x1ac>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <cornerlight_power_control+0x19c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		both_count = 0;
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		left_count = 0;
 800112e:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
	}
	if (right_count >= THRESHOLD && current_mode != RIGHT)
 8001134:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d91c      	bls.n	8001176 <cornerlight_power_control+0x146>
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <cornerlight_power_control+0x1ac>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d018      	beq.n	8001176 <cornerlight_power_control+0x146>
	{
		LCORNER_OFF();
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 800114a:	f002 f88b 	bl	8003264 <HAL_GPIO_WritePin>
		RCORNER_ON();
 800114e:	2201      	movs	r2, #1
 8001150:	2120      	movs	r1, #32
 8001152:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 8001154:	f002 f886 	bl	8003264 <HAL_GPIO_WritePin>

		current_mode = RIGHT;
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <cornerlight_power_control+0x1ac>)
 800115a:	2202      	movs	r2, #2
 800115c:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <cornerlight_power_control+0x19c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
		both_count = 0;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
		left_count = 0;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	}
	if (left_count >= THRESHOLD && current_mode != LEFT)
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d91c      	bls.n	80011b8 <cornerlight_power_control+0x188>
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <cornerlight_power_control+0x1ac>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d018      	beq.n	80011b8 <cornerlight_power_control+0x188>
	{
		LCORNER_ON();
 8001186:	2201      	movs	r2, #1
 8001188:	2110      	movs	r1, #16
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 800118c:	f002 f86a 	bl	8003264 <HAL_GPIO_WritePin>
		RCORNER_OFF();
 8001190:	2200      	movs	r2, #0
 8001192:	2120      	movs	r1, #32
 8001194:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <cornerlight_power_control+0x1b0>)
 8001196:	f002 f865 	bl	8003264 <HAL_GPIO_WritePin>

		current_mode = LEFT;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <cornerlight_power_control+0x1ac>)
 800119c:	2203      	movs	r2, #3
 800119e:	701a      	strb	r2, [r3, #0]
		off_count = 0;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <cornerlight_power_control+0x19c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
		both_count = 0;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <cornerlight_power_control+0x1a0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		right_count = 0;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <cornerlight_power_control+0x1a4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		left_count = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <cornerlight_power_control+0x1a8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	}

	last_input = mode;
 80011b8:	4a03      	ldr	r2, [pc, #12]	@ (80011c8 <cornerlight_power_control+0x198>)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	7013      	strb	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000a 	.word	0x2000000a
 80011cc:	200007ac 	.word	0x200007ac
 80011d0:	200007ad 	.word	0x200007ad
 80011d4:	200007ae 	.word	0x200007ae
 80011d8:	200007af 	.word	0x200007af
 80011dc:	2000000b 	.word	0x2000000b
 80011e0:	40010c00 	.word	0x40010c00

080011e4 <lstep_motor>:

void lstep_motor(uint8_t step)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LSTEPA_GPIO_Port, LSTEPA_Pin, (step == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2301      	moveq	r3, #1
 80011f6:	2300      	movne	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001200:	4815      	ldr	r0, [pc, #84]	@ (8001258 <lstep_motor+0x74>)
 8001202:	f002 f82f 	bl	8003264 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LSTEPB_GPIO_Port, LSTEPB_Pin, (step == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b01      	cmp	r3, #1
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001218:	480f      	ldr	r0, [pc, #60]	@ (8001258 <lstep_motor+0x74>)
 800121a:	f002 f823 	bl	8003264 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LSTEPC_GPIO_Port, LSTEPC_Pin, (step == 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b02      	cmp	r3, #2
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001230:	480a      	ldr	r0, [pc, #40]	@ (800125c <lstep_motor+0x78>)
 8001232:	f002 f817 	bl	8003264 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LSTEPD_GPIO_Port, LSTEPD_Pin, (step == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b03      	cmp	r3, #3
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <lstep_motor+0x78>)
 800124a:	f002 f80b 	bl	8003264 <HAL_GPIO_WritePin>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00

08001260 <rstep_motor>:
void rstep_motor(uint8_t step)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(RSTEPA_GPIO_Port, RSTEPA_Pin, (step == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	2102      	movs	r1, #2
 800127a:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <rstep_motor+0x70>)
 800127c:	f001 fff2 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RSTEPB_GPIO_Port, RSTEPB_Pin, (step == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b01      	cmp	r3, #1
 8001284:	bf0c      	ite	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	2300      	movne	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001292:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <rstep_motor+0x70>)
 8001294:	f001 ffe6 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RSTEPC_GPIO_Port, RSTEPC_Pin, (step == 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b02      	cmp	r3, #2
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012aa:	4809      	ldr	r0, [pc, #36]	@ (80012d0 <rstep_motor+0x70>)
 80012ac:	f001 ffda 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RSTEPD_GPIO_Port, RSTEPD_Pin, (step == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <rstep_motor+0x70>)
 80012c4:	f001 ffce 	bl	8003264 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40010c00 	.word	0x40010c00

080012d4 <rotate_lmotor>:


void rotate_lmotor(uint8_t dir, uint16_t delay_ms, uint16_t steps)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	460b      	mov	r3, r1
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < steps; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e024      	b.n	8001336 <rotate_lmotor+0x62>
        uint8_t step = dir ? (i % 4) : (3 - (i % 4));
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <rotate_lmotor+0x32>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	425a      	negs	r2, r3
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	bf58      	it	pl
 8001300:	4253      	negpl	r3, r2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	e00b      	b.n	800131e <rotate_lmotor+0x4a>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	425a      	negs	r2, r3
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	bf58      	it	pl
 8001314:	4253      	negpl	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f1c3 0303 	rsb	r3, r3, #3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	72fb      	strb	r3, [r7, #11]
        lstep_motor(step);
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff5e 	bl	80011e4 <lstep_motor>
        HAL_Delay(delay_ms);
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fd84 	bl	8001e38 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbd6      	blt.n	80012ec <rotate_lmotor+0x18>
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <rotate_rmotor>:
void rotate_rmotor(uint8_t dir, uint16_t delay_ms, uint16_t steps)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < steps; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e024      	b.n	80013aa <rotate_rmotor+0x62>
        uint8_t step = dir ? (i % 4) : (3 - (i % 4));
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <rotate_rmotor+0x32>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	425a      	negs	r2, r3
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	bf58      	it	pl
 8001374:	4253      	negpl	r3, r2
 8001376:	b2db      	uxtb	r3, r3
 8001378:	e00b      	b.n	8001392 <rotate_rmotor+0x4a>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	425a      	negs	r2, r3
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	bf58      	it	pl
 8001388:	4253      	negpl	r3, r2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f1c3 0303 	rsb	r3, r3, #3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72fb      	strb	r3, [r7, #11]
        rstep_motor(step);
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff62 	bl	8001260 <rstep_motor>
        HAL_Delay(delay_ms);
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd4a 	bl	8001e38 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbd6      	blt.n	8001360 <rotate_rmotor+0x18>
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <change_state>:
void change_state(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	low_beam_power_control(can1Rx0Data[0]);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <change_state+0x44>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc13 	bl	8000bf0 <low_beam_power_control>
	driving_mode_change(can1Rx0Data[1]);
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <change_state+0x44>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc70 	bl	8000cb4 <driving_mode_change>
	rainroad_mode_change(can1Rx0Data[2]);
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <change_state+0x44>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fd03 	bl	8000de4 <rainroad_mode_change>
	high_beam_power_control(can1Rx0Data[3]);
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <change_state+0x44>)
 80013e0:	78db      	ldrb	r3, [r3, #3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fd60 	bl	8000ea8 <high_beam_power_control>
	foglight_power_control(can1Rx0Data[4]);
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <change_state+0x44>)
 80013ea:	791b      	ldrb	r3, [r3, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fdbd 	bl	8000f6c <foglight_power_control>
	cornerlight_power_control(can1Rx0Data[5]);
 80013f2:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <change_state+0x44>)
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe1a 	bl	8001030 <cornerlight_power_control>

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000c8 	.word	0x200000c8

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fcb4 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f824 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f7fe ffa0 	bl	8000354 <MX_GPIO_Init>
  MX_DMA_Init();
 8001414:	f7fe ff70 	bl	80002f8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001418:	f000 fa68 	bl	80018ec <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fc1c 	bl	8001c58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001420:	f000 fa0c 	bl	800183c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001424:	f000 f988 	bl	8001738 <MX_TIM1_Init>
  MX_CAN_Init();
 8001428:	f7fe fe98 	bl	800015c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  can_init(0x000,0x000);
 800142c:	2100      	movs	r1, #0
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff f82a 	bl	8000488 <can_init>
  light_init();
 8001434:	f7ff fade 	bl	80009f4 <light_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(change_flag == 1){
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <main+0x50>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d1fb      	bne.n	8001438 <main+0x34>
		  change_state();
 8001440:	f7ff ffbc 	bl	80013bc <change_state>
		  HAL_Delay(100);
 8001444:	2064      	movs	r0, #100	@ 0x64
 8001446:	f000 fcf7 	bl	8001e38 <HAL_Delay>
		  change_flag = 0;
 800144a:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <main+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	  if(change_flag == 1){
 8001450:	e7f2      	b.n	8001438 <main+0x34>
 8001452:	bf00      	nop
 8001454:	200007a0 	.word	0x200007a0

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	@ 0x40
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2228      	movs	r2, #40	@ 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fc08 	bl	8004c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	2301      	movs	r3, #1
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001482:	2310      	movs	r3, #16
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800148e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f001 ff1d 	bl	80032d8 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a4:	f000 f878 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 f98a 	bl	80037dc <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014ce:	f000 f863 	bl	8001598 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3740      	adds	r7, #64	@ 0x40
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b0a7      	sub	sp, #156	@ 0x9c
 80014e0:	af08      	add	r7, sp, #32
 80014e2:	60f8      	str	r0, [r7, #12]
////      if(canRxHeader.StdId == 0x104){
////    	  return;
////      }
//      can1_rx0_flag += 1;
//   }
	if (hcan->Instance == CAN1)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a25      	ldr	r2, [pc, #148]	@ (8001580 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d144      	bne.n	8001578 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
	  {

	    char uartBuf[100];
	    change_flag = 1;
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, can1Rx0Data);
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80014f6:	4a25      	ldr	r2, [pc, #148]	@ (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fec8 	bl	8002290 <HAL_CAN_GetRxMessage>

	    // 메시지를 문자열로 변환
	    snprintf(uartBuf, sizeof(uartBuf),
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001502:	681b      	ldr	r3, [r3, #0]
	             "CAN ID: 0x%03X | DATA: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
				 canRxHeader.StdId,
				 can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 8001504:	4a20      	ldr	r2, [pc, #128]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001506:	7812      	ldrb	r2, [r2, #0]
	    snprintf(uartBuf, sizeof(uartBuf),
 8001508:	4611      	mov	r1, r2
				 can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 800150a:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800150c:	7852      	ldrb	r2, [r2, #1]
	    snprintf(uartBuf, sizeof(uartBuf),
 800150e:	4614      	mov	r4, r2
				 can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001512:	7892      	ldrb	r2, [r2, #2]
	    snprintf(uartBuf, sizeof(uartBuf),
 8001514:	4615      	mov	r5, r2
				 can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2], can1Rx0Data[3],
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001518:	78d2      	ldrb	r2, [r2, #3]
	    snprintf(uartBuf, sizeof(uartBuf),
 800151a:	4616      	mov	r6, r2
				 can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 800151c:	4a1a      	ldr	r2, [pc, #104]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800151e:	7912      	ldrb	r2, [r2, #4]
	    snprintf(uartBuf, sizeof(uartBuf),
 8001520:	60ba      	str	r2, [r7, #8]
				 can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 8001522:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001524:	7952      	ldrb	r2, [r2, #5]
	    snprintf(uartBuf, sizeof(uartBuf),
 8001526:	607a      	str	r2, [r7, #4]
				 can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800152a:	7992      	ldrb	r2, [r2, #6]
	    snprintf(uartBuf, sizeof(uartBuf),
 800152c:	603a      	str	r2, [r7, #0]
				 can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6], can1Rx0Data[7]);
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001530:	79d2      	ldrb	r2, [r2, #7]
	    snprintf(uartBuf, sizeof(uartBuf),
 8001532:	f107 0014 	add.w	r0, r7, #20
 8001536:	9207      	str	r2, [sp, #28]
 8001538:	f8d7 c000 	ldr.w	ip, [r7]
 800153c:	f8cd c018 	str.w	ip, [sp, #24]
 8001540:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001544:	f8cd c014 	str.w	ip, [sp, #20]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	9204      	str	r2, [sp, #16]
 800154c:	9603      	str	r6, [sp, #12]
 800154e:	9502      	str	r5, [sp, #8]
 8001550:	9401      	str	r4, [sp, #4]
 8001552:	9100      	str	r1, [sp, #0]
 8001554:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001556:	2164      	movs	r1, #100	@ 0x64
 8001558:	f003 fb5c 	bl	8004c14 <sniprintf>

	    // UART2로 송신 (USB-Serial 통해 PC로 전송됨)
	    HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fdf3 	bl	800014c <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 0114 	add.w	r1, r7, #20
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001574:	f003 f979 	bl	800486a <HAL_UART_Transmit>
	  }
}
 8001578:	bf00      	nop
 800157a:	377c      	adds	r7, #124	@ 0x7c
 800157c:	46bd      	mov	sp, r7
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	40006400 	.word	0x40006400
 8001584:	200007a0 	.word	0x200007a0
 8001588:	200000c8 	.word	0x200000c8
 800158c:	200000ac 	.word	0x200000ac
 8001590:	080055b4 	.word	0x080055b4
 8001594:	20000958 	.word	0x20000958

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <Error_Handler+0x8>

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_MspInit+0x5c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <HAL_MspInit+0x5c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_MspInit+0x5c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <HAL_MspInit+0x5c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_MspInit+0x60>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_MspInit+0x60>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 fbd2 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA1_Channel3_IRQHandler+0x10>)
 8001666:	f001 fb45 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000088c 	.word	0x2000088c

08001674 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA1_Channel6_IRQHandler+0x10>)
 800167a:	f001 fb3b 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000914 	.word	0x20000914

08001688 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Channel7_IRQHandler+0x10>)
 800168e:	f001 fb31 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200008d0 	.word	0x200008d0

0800169c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016a2:	f000 ff3b 	bl	800251c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000d0 	.word	0x200000d0

080016b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016b8:	f001 fdec 	bl	8003294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f003 facc 	bl	8004c8c <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005000 	.word	0x20005000
 8001720:	00000400 	.word	0x00000400
 8001724:	200007b0 	.word	0x200007b0
 8001728:	20000af0 	.word	0x20000af0

0800172c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b092      	sub	sp, #72	@ 0x48
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fa8a 	bl	8004c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001768:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <MX_TIM1_Init+0xfc>)
 800176a:	4a33      	ldr	r2, [pc, #204]	@ (8001838 <MX_TIM1_Init+0x100>)
 800176c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800176e:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 79;
 800177a:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <MX_TIM1_Init+0xfc>)
 800177c:	224f      	movs	r2, #79	@ 0x4f
 800177e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b2c      	ldr	r3, [pc, #176]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001786:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <MX_TIM1_Init+0xfc>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001792:	4828      	ldr	r0, [pc, #160]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001794:	f002 f9b0 	bl	8003af8 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800179e:	f7ff fefb 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ae:	4619      	mov	r1, r3
 80017b0:	4820      	ldr	r0, [pc, #128]	@ (8001834 <MX_TIM1_Init+0xfc>)
 80017b2:	f002 ff5b 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80017bc:	f7ff feec 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c0:	2360      	movs	r3, #96	@ 0x60
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	2204      	movs	r2, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4813      	ldr	r0, [pc, #76]	@ (8001834 <MX_TIM1_Init+0xfc>)
 80017e6:	f002 fb79 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80017f0:	f7ff fed2 	bl	8001598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001818:	f002 ff86 	bl	8004728 <HAL_TIMEx_ConfigBreakDeadTime>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001822:	f7ff feb9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001826:	4803      	ldr	r0, [pc, #12]	@ (8001834 <MX_TIM1_Init+0xfc>)
 8001828:	f000 f98e 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 800182c:	bf00      	nop
 800182e:	3748      	adds	r7, #72	@ 0x48
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200007b4 	.word	0x200007b4
 8001838:	40012c00 	.word	0x40012c00

0800183c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	615a      	str	r2, [r3, #20]
 800185c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_TIM2_Init+0xac>)
 8001860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM2_Init+0xac>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM2_Init+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM2_Init+0xac>)
 8001874:	224f      	movs	r2, #79	@ 0x4f
 8001876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM2_Init+0xac>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_TIM2_Init+0xac>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001884:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <MX_TIM2_Init+0xac>)
 8001886:	f002 f937 	bl	8003af8 <HAL_TIM_PWM_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001890:	f7ff fe82 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	4619      	mov	r1, r3
 80018a2:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_TIM2_Init+0xac>)
 80018a4:	f002 fee2 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80018ae:	f7ff fe73 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b2:	2360      	movs	r3, #96	@ 0x60
 80018b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2204      	movs	r2, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <MX_TIM2_Init+0xac>)
 80018ca:	f002 fb07 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80018d4:	f7ff fe60 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <MX_TIM2_Init+0xac>)
 80018da:	f000 f935 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200007fc 	.word	0x200007fc

080018ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <MX_TIM3_Init+0xac>)
 8001912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <MX_TIM3_Init+0xa8>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001922:	224f      	movs	r2, #79	@ 0x4f
 8001924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <MX_TIM3_Init+0xa8>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001932:	4818      	ldr	r0, [pc, #96]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001934:	f002 f8e0 	bl	8003af8 <HAL_TIM_PWM_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800193e:	f7ff fe2b 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	4619      	mov	r1, r3
 8001950:	4810      	ldr	r0, [pc, #64]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001952:	f002 fe8b 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800195c:	f7ff fe1c 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001960:	2360      	movs	r3, #96	@ 0x60
 8001962:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001978:	f002 fab0 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001982:	f7ff fe09 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM3_Init+0xa8>)
 8001988:	f000 f8de 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	@ 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000844 	.word	0x20000844
 8001998:	40000400 	.word	0x40000400

0800199c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b24 <HAL_TIM_PWM_MspInit+0x188>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d135      	bne.n	8001a1a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80019c6:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019c8:	4a59      	ldr	r2, [pc, #356]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x194>)
 80019ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019ce:	2210      	movs	r2, #16
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b56      	ldr	r3, [pc, #344]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019de:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80019f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80019fc:	484b      	ldr	r0, [pc, #300]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 80019fe:	f001 f8bf 	bl	8002b80 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001a08:	f7ff fdc6 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a47      	ldr	r2, [pc, #284]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a12:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x190>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a18:	e080      	b.n	8001b1c <HAL_TIM_PWM_MspInit+0x180>
  else if(tim_pwmHandle->Instance==TIM2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a22:	d13b      	bne.n	8001a9c <HAL_TIM_PWM_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a24:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	4a3f      	ldr	r2, [pc, #252]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	61d3      	str	r3, [r2, #28]
 8001a30:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_TIM_PWM_MspInit+0x19c>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b3c      	ldr	r3, [pc, #240]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a44:	2210      	movs	r2, #16
 8001a46:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a54:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5c:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001a72:	4830      	ldr	r0, [pc, #192]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a74:	f001 f884 	bl	8002b80 <HAL_DMA_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8001a7e:	f7ff fd8b 	bl	8001598 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a88:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a94:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x198>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001a9a:	e03f      	b.n	8001b1c <HAL_TIM_PWM_MspInit+0x180>
  else if(tim_pwmHandle->Instance==TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a26      	ldr	r2, [pc, #152]	@ (8001b3c <HAL_TIM_PWM_MspInit+0x1a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d13a      	bne.n	8001b1c <HAL_TIM_PWM_MspInit+0x180>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x18c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ac0:	4a20      	ldr	r2, [pc, #128]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x1a8>)
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001adc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ae0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001af6:	f001 f843 	bl	8002b80 <HAL_DMA_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_PWM_MspInit+0x168>
      Error_Handler();
 8001b00:	f7ff fd4a 	bl	8001598 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x1a4>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	2000088c 	.word	0x2000088c
 8001b30:	40020030 	.word	0x40020030
 8001b34:	200008d0 	.word	0x200008d0
 8001b38:	40020080 	.word	0x40020080
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	20000914 	.word	0x20000914
 8001b44:	4002006c 	.word	0x4002006c

08001b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a37      	ldr	r2, [pc, #220]	@ (8001c40 <HAL_TIM_MspPostInit+0xf8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d119      	bne.n	8001b9c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a35      	ldr	r2, [pc, #212]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	482c      	ldr	r0, [pc, #176]	@ (8001c48 <HAL_TIM_MspPostInit+0x100>)
 8001b96:	f001 f9e1 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b9a:	e04c      	b.n	8001c36 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba4:	d12a      	bne.n	8001bfc <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481e      	ldr	r0, [pc, #120]	@ (8001c4c <HAL_TIM_MspPostInit+0x104>)
 8001bd2:	f001 f9c3 	bl	8002f5c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_TIM_MspPostInit+0x108>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf4:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <HAL_TIM_MspPostInit+0x108>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	6053      	str	r3, [r2, #4]
}
 8001bfa:	e01c      	b.n	8001c36 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <HAL_TIM_MspPostInit+0x10c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d117      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <HAL_TIM_MspPostInit+0xfc>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c1e:	2340      	movs	r3, #64	@ 0x40
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_TIM_MspPostInit+0x100>)
 8001c32:	f001 f993 	bl	8002f5c <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400

08001c58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <MX_USART2_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c90:	f002 fd9b 	bl	80047ca <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f7ff fc7d 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000958 	.word	0x20000958
 8001ca8:	40004400 	.word	0x40004400

08001cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <HAL_UART_MspInit+0x70>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d123      	bne.n	8001d14 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_UART_MspInit+0x74>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <HAL_UART_MspInit+0x78>)
 8001d10:	f001 f924 	bl	8002f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001d28:	f7ff fd00 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d2e:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d30:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d44:	4c09      	ldr	r4, [pc, #36]	@ (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f002 ffa1 	bl	8004c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d56:	f7ff fb55 	bl	8001404 <main>
  bx lr
 8001d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d64:	08005668 	.word	0x08005668
  ldr r2, =_sbss
 8001d68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d6c:	20000aec 	.word	0x20000aec

08001d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_2_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_Init+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_Init+0x28>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 feb9 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fc08 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fed1 	bl	8002b66 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 fe99 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	20000014 	.word	0x20000014
 8001dfc:	20000010 	.word	0x20000010

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	200009a0 	.word	0x200009a0

08001e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b02      	ldr	r3, [pc, #8]	@ (8001e34 <HAL_GetTick+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	200009a0 	.word	0x200009a0

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffe0 	bl	8001e24 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000014 	.word	0x20000014

08001e80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0ed      	b.n	800206e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe f992 	bl	80001c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb4:	f7ff ffb6 	bl	8001e24 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eba:	e012      	b.n	8001ee2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ebc:	f7ff ffb2 	bl	8001e24 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b0a      	cmp	r3, #10
 8001ec8:	d90b      	bls.n	8001ee2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0c5      	b.n	800206e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0e5      	beq.n	8001ebc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0202 	bic.w	r2, r2, #2
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f00:	f7ff ff90 	bl	8001e24 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f06:	e012      	b.n	8001f2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f08:	f7ff ff8c 	bl	8001e24 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	d90b      	bls.n	8001f2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e09f      	b.n	800206e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e5      	bne.n	8001f08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e1b      	ldrb	r3, [r3, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e5b      	ldrb	r3, [r3, #25]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e9b      	ldrb	r3, [r3, #26]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d108      	bne.n	8001faa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e007      	b.n	8001fba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0220 	bic.w	r2, r2, #32
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7edb      	ldrb	r3, [r3, #27]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d108      	bne.n	8001fd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0210 	bic.w	r2, r2, #16
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0210 	orr.w	r2, r2, #16
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7f1b      	ldrb	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0208 	orr.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7f5b      	ldrb	r3, [r3, #29]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	ea42 0103 	orr.w	r1, r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d003      	beq.n	800209c <HAL_CAN_ConfigFilter+0x26>
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b02      	cmp	r3, #2
 8002098:	f040 80aa 	bne.w	80021f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2201      	movs	r2, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d123      	bne.n	800211e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3248      	adds	r2, #72	@ 0x48
 80020fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002112:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002114:	6979      	ldr	r1, [r7, #20]
 8002116:	3348      	adds	r3, #72	@ 0x48
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d122      	bne.n	800216c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	431a      	orrs	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002146:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3248      	adds	r2, #72	@ 0x48
 800214c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002160:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002162:	6979      	ldr	r1, [r7, #20]
 8002164:	3348      	adds	r3, #72	@ 0x48
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002186:	e007      	b.n	8002198 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021e2:	f023 0201 	bic.w	r2, r3, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e006      	b.n	80021fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d12e      	bne.n	800227a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff fdf6 	bl	8001e24 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800223a:	e012      	b.n	8002262 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800223c:	f7ff fdf2 	bl	8001e24 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b0a      	cmp	r3, #10
 8002248:	d90b      	bls.n	8002262 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2205      	movs	r2, #5
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e012      	b.n	8002288 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e006      	b.n	8002288 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d003      	beq.n	80022b4 <HAL_CAN_GetRxMessage+0x24>
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f040 8103 	bne.w	80024ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10e      	bne.n	80022d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0f7      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e8      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	331b      	adds	r3, #27
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0204 	and.w	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10c      	bne.n	800232e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	331b      	adds	r3, #27
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0d5b      	lsrs	r3, r3, #21
 8002324:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e00b      	b.n	8002346 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	331b      	adds	r3, #27
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	331b      	adds	r3, #27
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0202 	and.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	331b      	adds	r3, #27
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2208      	movs	r2, #8
 8002378:	611a      	str	r2, [r3, #16]
 800237a:	e00b      	b.n	8002394 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	331b      	adds	r3, #27
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	331b      	adds	r3, #27
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	331b      	adds	r3, #27
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0a1a      	lsrs	r2, r3, #8
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3302      	adds	r3, #2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e1a      	lsrs	r2, r3, #24
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3303      	adds	r3, #3
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3304      	adds	r3, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0a1a      	lsrs	r2, r3, #8
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3305      	adds	r3, #5
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0c1a      	lsrs	r2, r3, #16
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3306      	adds	r3, #6
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e1a      	lsrs	r2, r3, #24
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3307      	adds	r3, #7
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0220 	orr.w	r2, r2, #32
 80024b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e006      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d002      	beq.n	80024f0 <HAL_CAN_ActivateNotification+0x1e>
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d109      	bne.n	8002504 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6959      	ldr	r1, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e006      	b.n	8002512 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07c      	beq.n	800265c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d023      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f983 	bl	800288a <HAL_CAN_TxMailbox0CompleteCallback>
 8002584:	e016      	b.n	80025b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
 8002598:	e00c      	b.n	80025b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	e002      	b.n	80025b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f986 	bl	80028c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d024      	beq.n	8002608 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f962 	bl	800289c <HAL_CAN_TxMailbox1CompleteCallback>
 80025d8:	e016      	b.n	8002608 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	e00c      	b.n	8002608 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e002      	b.n	8002608 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f965 	bl	80028d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d024      	beq.n	800265c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800261a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f941 	bl	80028ae <HAL_CAN_TxMailbox2CompleteCallback>
 800262c:	e016      	b.n	800265c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002640:	e00c      	b.n	800265c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
 8002654:	e002      	b.n	800265c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f944 	bl	80028e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f92a 	bl	80028f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe ff0e 	bl	80014dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f90a 	bl	800291a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8f2 	bl	8002908 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8f3 	bl	800292c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2208      	movs	r2, #8
 8002760:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8eb 	bl	800293e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d07b      	beq.n	800286a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d072      	beq.n	8002862 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d043      	beq.n	8002862 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03e      	beq.n	8002862 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ea:	2b60      	cmp	r3, #96	@ 0x60
 80027ec:	d02b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x32a>
 80027ee:	2b60      	cmp	r3, #96	@ 0x60
 80027f0:	d82e      	bhi.n	8002850 <HAL_CAN_IRQHandler+0x334>
 80027f2:	2b50      	cmp	r3, #80	@ 0x50
 80027f4:	d022      	beq.n	800283c <HAL_CAN_IRQHandler+0x320>
 80027f6:	2b50      	cmp	r3, #80	@ 0x50
 80027f8:	d82a      	bhi.n	8002850 <HAL_CAN_IRQHandler+0x334>
 80027fa:	2b40      	cmp	r3, #64	@ 0x40
 80027fc:	d019      	beq.n	8002832 <HAL_CAN_IRQHandler+0x316>
 80027fe:	2b40      	cmp	r3, #64	@ 0x40
 8002800:	d826      	bhi.n	8002850 <HAL_CAN_IRQHandler+0x334>
 8002802:	2b30      	cmp	r3, #48	@ 0x30
 8002804:	d010      	beq.n	8002828 <HAL_CAN_IRQHandler+0x30c>
 8002806:	2b30      	cmp	r3, #48	@ 0x30
 8002808:	d822      	bhi.n	8002850 <HAL_CAN_IRQHandler+0x334>
 800280a:	2b10      	cmp	r3, #16
 800280c:	d002      	beq.n	8002814 <HAL_CAN_IRQHandler+0x2f8>
 800280e:	2b20      	cmp	r3, #32
 8002810:	d005      	beq.n	800281e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002812:	e01d      	b.n	8002850 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800281c:	e019      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002826:	e014      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	f043 0320 	orr.w	r3, r3, #32
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002830:	e00f      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800283a:	e00a      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002844:	e005      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800284e:	e000      	b.n	8002852 <HAL_CAN_IRQHandler+0x336>
            break;
 8002850:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002860:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2204      	movs	r2, #4
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f867 	bl	8002950 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4906      	ldr	r1, [pc, #24]	@ (80029fc <__NVIC_EnableIRQ+0x34>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	@ (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	@ (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	@ 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	4313      	orrs	r3, r2
         );
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff90 	bl	8002a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff2d 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff42 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff90 	bl	8002a54 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5f 	bl	8002a00 <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff35 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e043      	b.n	8002c1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_DMA_Init+0xa8>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Init+0xac>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <HAL_DMA_Init+0xb0>)
 8002bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	bffdfff8 	.word	0xbffdfff8
 8002c2c:	cccccccd 	.word	0xcccccccd
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Start_IT+0x20>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e04b      	b.n	8002cec <HAL_DMA_Start_IT+0xb8>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d13a      	bne.n	8002cde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f937 	bl	8002f00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 020e 	orr.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e00f      	b.n	8002ccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 020a 	orr.w	r2, r2, #10
 8002cca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d04f      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc8>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d04a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a66      	ldr	r2, [pc, #408]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d029      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xae>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0xaa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a63      	ldr	r2, [pc, #396]	@ (8002eec <HAL_DMA_IRQHandler+0x1f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xa4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a62      	ldr	r2, [pc, #392]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d012      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a60      	ldr	r2, [pc, #384]	@ (8002ef4 <HAL_DMA_IRQHandler+0x200>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x98>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef8 <HAL_DMA_IRQHandler+0x204>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x92>
 8002d80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d84:	e00e      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d8a:	e00b      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d90:	e008      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d9c:	e002      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d9e:	2340      	movs	r3, #64	@ 0x40
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002da2:	2304      	movs	r3, #4
 8002da4:	4a55      	ldr	r2, [pc, #340]	@ (8002efc <HAL_DMA_IRQHandler+0x208>)
 8002da6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8094 	beq.w	8002eda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dba:	e08e      	b.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d056      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x186>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d051      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020a 	bic.w	r2, r2, #10
 8002df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d029      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x166>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a37      	ldr	r2, [pc, #220]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x162>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <HAL_DMA_IRQHandler+0x1f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01a      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x15c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x156>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <HAL_DMA_IRQHandler+0x200>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x150>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <HAL_DMA_IRQHandler+0x204>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x14a>
 8002e38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e3c:	e00e      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e42:	e00b      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e48:	e008      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e4e:	e005      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e54:	e002      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e56:	2320      	movs	r3, #32
 8002e58:	e000      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <HAL_DMA_IRQHandler+0x208>)
 8002e5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d034      	beq.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e78:	e02f      	b.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2208      	movs	r2, #8
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 020e 	bic.w	r2, r2, #14
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    }
  }
  return;
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
}
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40020008 	.word	0x40020008
 8002ee8:	4002001c 	.word	0x4002001c
 8002eec:	40020030 	.word	0x40020030
 8002ef0:	40020044 	.word	0x40020044
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	4002006c 	.word	0x4002006c
 8002efc:	40020000 	.word	0x40020000

08002f00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f3e:	e007      	b.n	8002f50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b08b      	sub	sp, #44	@ 0x2c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6e:	e169      	b.n	8003244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f70:	2201      	movs	r2, #1
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8158 	bne.w	800323e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a9a      	ldr	r2, [pc, #616]	@ (80031fc <HAL_GPIO_Init+0x2a0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d05e      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002f98:	4a98      	ldr	r2, [pc, #608]	@ (80031fc <HAL_GPIO_Init+0x2a0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d875      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002f9e:	4a98      	ldr	r2, [pc, #608]	@ (8003200 <HAL_GPIO_Init+0x2a4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d058      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a96      	ldr	r2, [pc, #600]	@ (8003200 <HAL_GPIO_Init+0x2a4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d86f      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002faa:	4a96      	ldr	r2, [pc, #600]	@ (8003204 <HAL_GPIO_Init+0x2a8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d052      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fb0:	4a94      	ldr	r2, [pc, #592]	@ (8003204 <HAL_GPIO_Init+0x2a8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d869      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fb6:	4a94      	ldr	r2, [pc, #592]	@ (8003208 <HAL_GPIO_Init+0x2ac>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04c      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fbc:	4a92      	ldr	r2, [pc, #584]	@ (8003208 <HAL_GPIO_Init+0x2ac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d863      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fc2:	4a92      	ldr	r2, [pc, #584]	@ (800320c <HAL_GPIO_Init+0x2b0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d046      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fc8:	4a90      	ldr	r2, [pc, #576]	@ (800320c <HAL_GPIO_Init+0x2b0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d85d      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fce:	2b12      	cmp	r3, #18
 8002fd0:	d82a      	bhi.n	8003028 <HAL_GPIO_Init+0xcc>
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d859      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_GPIO_Init+0x80>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003057 	.word	0x08003057
 8002fe0:	08003031 	.word	0x08003031
 8002fe4:	08003043 	.word	0x08003043
 8002fe8:	08003085 	.word	0x08003085
 8002fec:	0800308b 	.word	0x0800308b
 8002ff0:	0800308b 	.word	0x0800308b
 8002ff4:	0800308b 	.word	0x0800308b
 8002ff8:	0800308b 	.word	0x0800308b
 8002ffc:	0800308b 	.word	0x0800308b
 8003000:	0800308b 	.word	0x0800308b
 8003004:	0800308b 	.word	0x0800308b
 8003008:	0800308b 	.word	0x0800308b
 800300c:	0800308b 	.word	0x0800308b
 8003010:	0800308b 	.word	0x0800308b
 8003014:	0800308b 	.word	0x0800308b
 8003018:	0800308b 	.word	0x0800308b
 800301c:	0800308b 	.word	0x0800308b
 8003020:	08003039 	.word	0x08003039
 8003024:	0800304d 	.word	0x0800304d
 8003028:	4a79      	ldr	r2, [pc, #484]	@ (8003210 <HAL_GPIO_Init+0x2b4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800302e:	e02c      	b.n	800308a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	623b      	str	r3, [r7, #32]
          break;
 8003036:	e029      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	3304      	adds	r3, #4
 800303e:	623b      	str	r3, [r7, #32]
          break;
 8003040:	e024      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	3308      	adds	r3, #8
 8003048:	623b      	str	r3, [r7, #32]
          break;
 800304a:	e01f      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	330c      	adds	r3, #12
 8003052:	623b      	str	r3, [r7, #32]
          break;
 8003054:	e01a      	b.n	800308c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800305e:	2304      	movs	r3, #4
 8003060:	623b      	str	r3, [r7, #32]
          break;
 8003062:	e013      	b.n	800308c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800306c:	2308      	movs	r3, #8
 800306e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	611a      	str	r2, [r3, #16]
          break;
 8003076:	e009      	b.n	800308c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	615a      	str	r2, [r3, #20]
          break;
 8003082:	e003      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x130>
          break;
 800308a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2bff      	cmp	r3, #255	@ 0xff
 8003090:	d801      	bhi.n	8003096 <HAL_GPIO_Init+0x13a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	e001      	b.n	800309a <HAL_GPIO_Init+0x13e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2bff      	cmp	r3, #255	@ 0xff
 80030a0:	d802      	bhi.n	80030a8 <HAL_GPIO_Init+0x14c>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	e002      	b.n	80030ae <HAL_GPIO_Init+0x152>
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	3b08      	subs	r3, #8
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	210f      	movs	r1, #15
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	401a      	ands	r2, r3
 80030c0:	6a39      	ldr	r1, [r7, #32]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80b1 	beq.w	800323e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003214 <HAL_GPIO_Init+0x2b8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003214 <HAL_GPIO_Init+0x2b8>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6193      	str	r3, [r2, #24]
 80030e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_GPIO_Init+0x2b8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030f4:	4a48      	ldr	r2, [pc, #288]	@ (8003218 <HAL_GPIO_Init+0x2bc>)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a40      	ldr	r2, [pc, #256]	@ (800321c <HAL_GPIO_Init+0x2c0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_GPIO_Init+0x1ec>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3f      	ldr	r2, [pc, #252]	@ (8003220 <HAL_GPIO_Init+0x2c4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00d      	beq.n	8003144 <HAL_GPIO_Init+0x1e8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3e      	ldr	r2, [pc, #248]	@ (8003224 <HAL_GPIO_Init+0x2c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0x1e4>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3d      	ldr	r2, [pc, #244]	@ (8003228 <HAL_GPIO_Init+0x2cc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_GPIO_Init+0x1e0>
 8003138:	2303      	movs	r3, #3
 800313a:	e006      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 800313c:	2304      	movs	r3, #4
 800313e:	e004      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003140:	2302      	movs	r3, #2
 8003142:	e002      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003148:	2300      	movs	r3, #0
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	f002 0203 	and.w	r2, r2, #3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4093      	lsls	r3, r2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800315a:	492f      	ldr	r1, [pc, #188]	@ (8003218 <HAL_GPIO_Init+0x2bc>)
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	492c      	ldr	r1, [pc, #176]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003182:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	43db      	mvns	r3, r3
 800318a:	4928      	ldr	r1, [pc, #160]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 800318c:	4013      	ands	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800319c:	4b23      	ldr	r3, [pc, #140]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4922      	ldr	r1, [pc, #136]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	491e      	ldr	r1, [pc, #120]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4918      	ldr	r1, [pc, #96]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d2:	4b16      	ldr	r3, [pc, #88]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	4914      	ldr	r1, [pc, #80]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d021      	beq.n	8003230 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	490e      	ldr	r1, [pc, #56]	@ (800322c <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e021      	b.n	800323e <HAL_GPIO_Init+0x2e2>
 80031fa:	bf00      	nop
 80031fc:	10320000 	.word	0x10320000
 8003200:	10310000 	.word	0x10310000
 8003204:	10220000 	.word	0x10220000
 8003208:	10210000 	.word	0x10210000
 800320c:	10120000 	.word	0x10120000
 8003210:	10110000 	.word	0x10110000
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000
 800321c:	40010800 	.word	0x40010800
 8003220:	40010c00 	.word	0x40010c00
 8003224:	40011000 	.word	0x40011000
 8003228:	40011400 	.word	0x40011400
 800322c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_GPIO_Init+0x304>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	43db      	mvns	r3, r3
 8003238:	4909      	ldr	r1, [pc, #36]	@ (8003260 <HAL_GPIO_Init+0x304>)
 800323a:	4013      	ands	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f ae8e 	bne.w	8002f70 <HAL_GPIO_Init+0x14>
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	372c      	adds	r7, #44	@ 0x2c
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032aa:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f806 	bl	80032c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40010400 	.word	0x40010400

080032c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e272      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f8:	4b92      	ldr	r3, [pc, #584]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003304:	4b8f      	ldr	r3, [pc, #572]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
 8003310:	4b8c      	ldr	r3, [pc, #560]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b89      	ldr	r3, [pc, #548]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x12c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e24c      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x76>
 8003340:	4b80      	ldr	r3, [pc, #512]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7f      	ldr	r2, [pc, #508]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b7b      	ldr	r3, [pc, #492]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7a      	ldr	r2, [pc, #488]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b78      	ldr	r3, [pc, #480]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a77      	ldr	r2, [pc, #476]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xbc>
 800337a:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a71      	ldr	r2, [pc, #452]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6e      	ldr	r2, [pc, #440]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003394:	4b6b      	ldr	r3, [pc, #428]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6a      	ldr	r2, [pc, #424]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b68      	ldr	r3, [pc, #416]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a67      	ldr	r2, [pc, #412]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fd36 	bl	8001e24 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fd32 	bl	8001e24 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e200      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe4>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fd22 	bl	8001e24 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fd1e 	bl	8001e24 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1ec      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x10c>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d063      	beq.n	80034da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b4c      	ldr	r3, [pc, #304]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800341e:	4b49      	ldr	r3, [pc, #292]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x18c>
 800342a:	4b46      	ldr	r3, [pc, #280]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1c0      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4939      	ldr	r1, [pc, #228]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe fcd7 	bl	8001e24 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe fcd3 	bl	8001e24 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1a1      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4927      	ldr	r1, [pc, #156]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fcb6 	bl	8001e24 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe fcb2 	bl	8001e24 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e180      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d03a      	beq.n	800355c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b17      	ldr	r3, [pc, #92]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fc96 	bl	8001e24 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fc92 	bl	8001e24 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e160      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800351a:	2001      	movs	r0, #1
 800351c:	f000 face 	bl	8003abc <RCC_Delay>
 8003520:	e01c      	b.n	800355c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe fc7c 	bl	8001e24 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352e:	e00f      	b.n	8003550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fc78 	bl	8001e24 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d908      	bls.n	8003550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e146      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	42420000 	.word	0x42420000
 800354c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b92      	ldr	r3, [pc, #584]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e9      	bne.n	8003530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a6 	beq.w	80036b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b8b      	ldr	r3, [pc, #556]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a87      	ldr	r2, [pc, #540]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003584:	61d3      	str	r3, [r2, #28]
 8003586:	4b85      	ldr	r3, [pc, #532]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b82      	ldr	r3, [pc, #520]	@ (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b7f      	ldr	r3, [pc, #508]	@ (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7e      	ldr	r2, [pc, #504]	@ (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fc39 	bl	8001e24 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fc35 	bl	8001e24 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	@ 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e103      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b75      	ldr	r3, [pc, #468]	@ (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x312>
 80035dc:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	e02d      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x334>
 80035f2:	4b6a      	ldr	r3, [pc, #424]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a69      	ldr	r2, [pc, #420]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4b67      	ldr	r3, [pc, #412]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a66      	ldr	r2, [pc, #408]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	e01c      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b05      	cmp	r3, #5
 8003612:	d10c      	bne.n	800362e <HAL_RCC_OscConfig+0x356>
 8003614:	4b61      	ldr	r3, [pc, #388]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4a60      	ldr	r2, [pc, #384]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6213      	str	r3, [r2, #32]
 8003620:	4b5e      	ldr	r3, [pc, #376]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a5d      	ldr	r2, [pc, #372]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e00b      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 800362e:	4b5b      	ldr	r3, [pc, #364]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a5a      	ldr	r2, [pc, #360]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6213      	str	r3, [r2, #32]
 800363a:	4b58      	ldr	r3, [pc, #352]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a57      	ldr	r2, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fbe9 	bl	8001e24 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe fbe5 	bl	8001e24 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0b1      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	4b4b      	ldr	r3, [pc, #300]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ee      	beq.n	8003656 <HAL_RCC_OscConfig+0x37e>
 8003678:	e014      	b.n	80036a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fe fbd3 	bl	8001e24 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fbcf 	bl	8001e24 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e09b      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ee      	bne.n	8003682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4b3c      	ldr	r3, [pc, #240]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4a3b      	ldr	r2, [pc, #236]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c0:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d061      	beq.n	8003790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d146      	bne.n	8003762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe fba3 	bl	8001e24 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe fb9f 	bl	8001e24 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e06d      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f4:	4b29      	ldr	r3, [pc, #164]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d108      	bne.n	800371c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800370a:	4b24      	ldr	r3, [pc, #144]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4921      	ldr	r1, [pc, #132]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371c:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a19      	ldr	r1, [r3, #32]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	430b      	orrs	r3, r1
 800372e:	491b      	ldr	r1, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe fb73 	bl	8001e24 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe fb6f 	bl	8001e24 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e03d      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x46a>
 8003760:	e035      	b.n	80037ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fb5c 	bl	8001e24 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fb58 	bl	8001e24 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e026      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x498>
 800378e:	e01e      	b.n	80037ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e019      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
 800379c:	40021000 	.word	0x40021000
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <HAL_RCC_OscConfig+0x500>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0d0      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b6a      	ldr	r3, [pc, #424]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b67      	ldr	r3, [pc, #412]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	4965      	ldr	r1, [pc, #404]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b63      	ldr	r3, [pc, #396]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0b8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003838:	4b59      	ldr	r3, [pc, #356]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003850:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a52      	ldr	r2, [pc, #328]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800385a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	494d      	ldr	r1, [pc, #308]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d040      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e07f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b41      	ldr	r3, [pc, #260]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e073      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4936      	ldr	r1, [pc, #216]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fe faaa 	bl	8001e24 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe faa6 	bl	8001e24 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e053      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2d      	ldr	r3, [pc, #180]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b27      	ldr	r3, [pc, #156]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d210      	bcs.n	800392c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 0207 	bic.w	r2, r3, #7
 8003912:	4922      	ldr	r1, [pc, #136]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e032      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4916      	ldr	r1, [pc, #88]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490e      	ldr	r1, [pc, #56]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396a:	f000 f821 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	@ (80039a4 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_ClockConfig+0x1d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fa08 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	080055f8 	.word	0x080055f8
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	20000010 	.word	0x20000010

080039b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x30>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x36>
 80039de:	e027      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e2:	613b      	str	r3, [r7, #16]
      break;
 80039e4:	e027      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a17      	ldr	r2, [pc, #92]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d010      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0c5b      	lsrs	r3, r3, #17
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a12:	fb03 f202 	mul.w	r2, r3, r2
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e004      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a32:	613b      	str	r3, [r7, #16]
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	693b      	ldr	r3, [r7, #16]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	007a1200 	.word	0x007a1200
 8003a4c:	08005610 	.word	0x08005610
 8003a50:	08005620 	.word	0x08005620
 8003a54:	003d0900 	.word	0x003d0900

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b02      	ldr	r3, [pc, #8]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff2 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08005608 	.word	0x08005608

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0adb      	lsrs	r3, r3, #11
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	08005608 	.word	0x08005608

08003abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <RCC_Delay+0x34>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <RCC_Delay+0x38>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad8:	bf00      	nop
  }
  while (Delay --);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	60fa      	str	r2, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <RCC_Delay+0x1c>
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	10624dd3 	.word	0x10624dd3

08003af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e041      	b.n	8003b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd ff3c 	bl	800199c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 fb7e 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e022      	b.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x72>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d109      	bne.n	8003bde <HAL_TIM_PWM_Start_DMA+0x46>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	e015      	b.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x72>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d109      	bne.n	8003bf8 <HAL_TIM_PWM_Start_DMA+0x60>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e008      	b.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x72>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e153      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x94>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e022      	b.n	8003c72 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d109      	bne.n	8003c46 <HAL_TIM_PWM_Start_DMA+0xae>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e015      	b.n	8003c72 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d024      	beq.n	8003cc0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_TIM_PWM_Start_DMA+0xea>
 8003c7c:	887b      	ldrh	r3, [r7, #2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e119      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c94:	e016      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca4:	e00e      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb4:	e006      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cbe:	e001      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0fa      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	f200 80ae 	bhi.w	8003e28 <HAL_TIM_PWM_Start_DMA+0x290>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003e29 	.word	0x08003e29
 8003cdc:	08003e29 	.word	0x08003e29
 8003ce0:	08003e29 	.word	0x08003e29
 8003ce4:	08003d51 	.word	0x08003d51
 8003ce8:	08003e29 	.word	0x08003e29
 8003cec:	08003e29 	.word	0x08003e29
 8003cf0:	08003e29 	.word	0x08003e29
 8003cf4:	08003d99 	.word	0x08003d99
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003e29 	.word	0x08003e29
 8003d00:	08003e29 	.word	0x08003e29
 8003d04:	08003de1 	.word	0x08003de1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ecc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3334      	adds	r3, #52	@ 0x34
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	f7fe ff80 	bl	8002c34 <HAL_DMA_Start_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0bd      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4c:	60da      	str	r2, [r3, #12]
      break;
 8003d4e:	e06e      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	4a59      	ldr	r2, [pc, #356]	@ (8003ecc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3338      	adds	r3, #56	@ 0x38
 8003d74:	461a      	mov	r2, r3
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	f7fe ff5c 	bl	8002c34 <HAL_DMA_Start_IT>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e099      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d94:	60da      	str	r2, [r3, #12]
      break;
 8003d96:	e04a      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	4a49      	ldr	r2, [pc, #292]	@ (8003ec4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	4a48      	ldr	r2, [pc, #288]	@ (8003ec8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003da6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	4a47      	ldr	r2, [pc, #284]	@ (8003ecc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	333c      	adds	r3, #60	@ 0x3c
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	f7fe ff38 	bl	8002c34 <HAL_DMA_Start_IT>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e075      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e026      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	4a37      	ldr	r2, [pc, #220]	@ (8003ec4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4a36      	ldr	r2, [pc, #216]	@ (8003ec8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	4a35      	ldr	r2, [pc, #212]	@ (8003ecc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3340      	adds	r3, #64	@ 0x40
 8003e04:	461a      	mov	r2, r3
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	f7fe ff14 	bl	8002c34 <HAL_DMA_Start_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e051      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e24:	60da      	str	r2, [r3, #12]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d141      	bne.n	8003eb8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fbf1 	bl	8004624 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d010      	beq.n	8003eb8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e007      	b.n	8003eb8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08004129 	.word	0x08004129
 8003ec8:	080041d1 	.word	0x080041d1
 8003ecc:	08004097 	.word	0x08004097
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800

08003edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0ae      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	f200 809f 	bhi.w	8004048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08004049 	.word	0x08004049
 8003f18:	08004049 	.word	0x08004049
 8003f1c:	08004049 	.word	0x08004049
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08004049 	.word	0x08004049
 8003f28:	08004049 	.word	0x08004049
 8003f2c:	08004049 	.word	0x08004049
 8003f30:	08003fc7 	.word	0x08003fc7
 8003f34:	08004049 	.word	0x08004049
 8003f38:	08004049 	.word	0x08004049
 8003f3c:	08004049 	.word	0x08004049
 8003f40:	08004007 	.word	0x08004007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f9e2 	bl	8004314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0208 	orr.w	r2, r2, #8
 8003f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	619a      	str	r2, [r3, #24]
      break;
 8003f82:	e064      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa28 	bl	80043e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
      break;
 8003fc4:	e043      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fa71 	bl	80044b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0208 	orr.w	r2, r2, #8
 8003fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0204 	bic.w	r2, r2, #4
 8003ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
      break;
 8004004:	e023      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fabb 	bl	8004588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	61da      	str	r2, [r3, #28]
      break;
 8004046:	e002      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
      break;
 800404c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d107      	bne.n	80040be <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040bc:	e02a      	b.n	8004114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d107      	bne.n	80040d8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2202      	movs	r2, #2
 80040cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d6:	e01d      	b.n	8004114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d107      	bne.n	80040f2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2204      	movs	r2, #4
 80040e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f0:	e010      	b.n	8004114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2208      	movs	r2, #8
 8004100:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800410a:	e003      	b.n	8004114 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ffb5 	bl	8004084 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d10b      	bne.n	8004158 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d136      	bne.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004156:	e031      	b.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d10b      	bne.n	800417a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2202      	movs	r2, #2
 8004166:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d125      	bne.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004178:	e020      	b.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d10b      	bne.n	800419c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2204      	movs	r2, #4
 8004188:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d114      	bne.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800419a:	e00f      	b.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d10a      	bne.n	80041bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2208      	movs	r2, #8
 80041aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff4f 	bl	8004060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d103      	bne.n	80041f0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	771a      	strb	r2, [r3, #28]
 80041ee:	e019      	b.n	8004224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d103      	bne.n	8004202 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2202      	movs	r2, #2
 80041fe:	771a      	strb	r2, [r3, #28]
 8004200:	e010      	b.n	8004224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d103      	bne.n	8004214 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2204      	movs	r2, #4
 8004210:	771a      	strb	r2, [r3, #28]
 8004212:	e007      	b.n	8004224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d102      	bne.n	8004224 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff24 	bl	8004072 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a2f      	ldr	r2, [pc, #188]	@ (8004308 <TIM_Base_SetConfig+0xd0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <TIM_Base_SetConfig+0xd4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x30>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2b      	ldr	r2, [pc, #172]	@ (8004310 <TIM_Base_SetConfig+0xd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <TIM_Base_SetConfig+0xd0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <TIM_Base_SetConfig+0xd4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1e      	ldr	r2, [pc, #120]	@ (8004310 <TIM_Base_SetConfig+0xd8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <TIM_Base_SetConfig+0xd0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d103      	bne.n	80042e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]
  }
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800

08004314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 0201 	bic.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 0302 	bic.w	r3, r3, #2
 800435c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <TIM_OC1_SetConfig+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0308 	bic.w	r3, r3, #8
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a13      	ldr	r2, [pc, #76]	@ (80043dc <TIM_OC1_SetConfig+0xc8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00

080043e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 0210 	bic.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <TIM_OC2_SetConfig+0xd0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10d      	bne.n	800445c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <TIM_OC2_SetConfig+0xd0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d113      	bne.n	800448c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800446a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40012c00 	.word	0x40012c00

080044b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <TIM_OC3_SetConfig+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10d      	bne.n	800452e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a14      	ldr	r2, [pc, #80]	@ (8004584 <TIM_OC3_SetConfig+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d113      	bne.n	800455e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00

08004588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004620 <TIM_OC4_SetConfig+0x98>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d109      	bne.n	80045fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00

08004624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2201      	movs	r2, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004680:	2302      	movs	r3, #2
 8004682:	e046      	b.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d0:	d009      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a10      	ldr	r2, [pc, #64]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10c      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800

08004728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004740:	2302      	movs	r3, #2
 8004742:	e03d      	b.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e042      	b.n	8004862 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fa5b 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2224      	movs	r2, #36	@ 0x24
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800480c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f972 	bl	8004af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004822:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004832:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004842:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b08a      	sub	sp, #40	@ 0x28
 800486e:	af02      	add	r7, sp, #8
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b20      	cmp	r3, #32
 8004888:	d175      	bne.n	8004976 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_UART_Transmit+0x2c>
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06e      	b.n	8004978 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2221      	movs	r2, #33	@ 0x21
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a8:	f7fd fabc 	bl	8001e24 <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c2:	d108      	bne.n	80048d6 <HAL_UART_Transmit+0x6c>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e003      	b.n	80048de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048de:	e02e      	b.n	800493e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	@ 0x80
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f848 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03a      	b.n	8004978 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004916:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3302      	adds	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e007      	b.n	8004930 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1cb      	bne.n	80048e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	2140      	movs	r1, #64	@ 0x40
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f814 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004990:	e03b      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d037      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fd fa43 	bl	8001e24 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e03a      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d023      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b80      	cmp	r3, #128	@ 0x80
 80049c6:	d020      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	d01d      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d116      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f81d 	bl	8004a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2208      	movs	r2, #8
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e00f      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0b4      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b095      	sub	sp, #84	@ 0x54
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e5      	bne.n	8004a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d119      	bne.n	8004ade <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aca:	61ba      	str	r2, [r7, #24]
 8004acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004aec:	bf00      	nop
 8004aee:	3754      	adds	r7, #84	@ 0x54
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
	...

08004af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b32:	f023 030c 	bic.w	r3, r3, #12
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <UART_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d103      	bne.n	8004b68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fe ff98 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	e002      	b.n	8004b6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe ff80 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004b6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <UART_SetConfig+0x118>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	0119      	lsls	r1, r3, #4
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009a      	lsls	r2, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <UART_SetConfig+0x118>)
 8004ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2064      	movs	r0, #100	@ 0x64
 8004bae:	fb00 f303 	mul.w	r3, r0, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	3332      	adds	r3, #50	@ 0x32
 8004bb8:	4a15      	ldr	r2, [pc, #84]	@ (8004c10 <UART_SetConfig+0x118>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc4:	4419      	add	r1, r3
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009a      	lsls	r2, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <UART_SetConfig+0x118>)
 8004bde:	fba3 0302 	umull	r0, r3, r3, r2
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2064      	movs	r0, #100	@ 0x64
 8004be6:	fb00 f303 	mul.w	r3, r0, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	3332      	adds	r3, #50	@ 0x32
 8004bf0:	4a07      	ldr	r2, [pc, #28]	@ (8004c10 <UART_SetConfig+0x118>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f003 020f 	and.w	r2, r3, #15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	440a      	add	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40013800 	.word	0x40013800
 8004c10:	51eb851f 	.word	0x51eb851f

08004c14 <sniprintf>:
 8004c14:	b40c      	push	{r2, r3}
 8004c16:	b530      	push	{r4, r5, lr}
 8004c18:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <sniprintf+0x64>)
 8004c1a:	1e0c      	subs	r4, r1, #0
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	b09d      	sub	sp, #116	@ 0x74
 8004c20:	da08      	bge.n	8004c34 <sniprintf+0x20>
 8004c22:	238b      	movs	r3, #139	@ 0x8b
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	b01d      	add	sp, #116	@ 0x74
 8004c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c30:	b002      	add	sp, #8
 8004c32:	4770      	bx	lr
 8004c34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c3c:	bf0c      	ite	eq
 8004c3e:	4623      	moveq	r3, r4
 8004c40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	9307      	str	r3, [sp, #28]
 8004c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c4c:	9002      	str	r0, [sp, #8]
 8004c4e:	9006      	str	r0, [sp, #24]
 8004c50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c54:	4628      	mov	r0, r5
 8004c56:	ab21      	add	r3, sp, #132	@ 0x84
 8004c58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c5a:	a902      	add	r1, sp, #8
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	f000 f993 	bl	8004f88 <_svfiprintf_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	bfbc      	itt	lt
 8004c66:	238b      	movlt	r3, #139	@ 0x8b
 8004c68:	602b      	strlt	r3, [r5, #0]
 8004c6a:	2c00      	cmp	r4, #0
 8004c6c:	d0dd      	beq.n	8004c2a <sniprintf+0x16>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	9b02      	ldr	r3, [sp, #8]
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e7d9      	b.n	8004c2a <sniprintf+0x16>
 8004c76:	bf00      	nop
 8004c78:	20000018 	.word	0x20000018

08004c7c <memset>:
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4402      	add	r2, r0
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <memset+0xa>
 8004c84:	4770      	bx	lr
 8004c86:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8a:	e7f9      	b.n	8004c80 <memset+0x4>

08004c8c <__errno>:
 8004c8c:	4b01      	ldr	r3, [pc, #4]	@ (8004c94 <__errno+0x8>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000018 	.word	0x20000018

08004c98 <__libc_init_array>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	4d0c      	ldr	r5, [pc, #48]	@ (8004cd0 <__libc_init_array+0x38>)
 8004c9e:	4c0d      	ldr	r4, [pc, #52]	@ (8004cd4 <__libc_init_array+0x3c>)
 8004ca0:	1b64      	subs	r4, r4, r5
 8004ca2:	10a4      	asrs	r4, r4, #2
 8004ca4:	42a6      	cmp	r6, r4
 8004ca6:	d109      	bne.n	8004cbc <__libc_init_array+0x24>
 8004ca8:	f000 fc78 	bl	800559c <_init>
 8004cac:	2600      	movs	r6, #0
 8004cae:	4d0a      	ldr	r5, [pc, #40]	@ (8004cd8 <__libc_init_array+0x40>)
 8004cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8004cdc <__libc_init_array+0x44>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	42a6      	cmp	r6, r4
 8004cb8:	d105      	bne.n	8004cc6 <__libc_init_array+0x2e>
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc0:	4798      	blx	r3
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	e7ee      	b.n	8004ca4 <__libc_init_array+0xc>
 8004cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cca:	4798      	blx	r3
 8004ccc:	3601      	adds	r6, #1
 8004cce:	e7f2      	b.n	8004cb6 <__libc_init_array+0x1e>
 8004cd0:	08005660 	.word	0x08005660
 8004cd4:	08005660 	.word	0x08005660
 8004cd8:	08005660 	.word	0x08005660
 8004cdc:	08005664 	.word	0x08005664

08004ce0 <__retarget_lock_acquire_recursive>:
 8004ce0:	4770      	bx	lr

08004ce2 <__retarget_lock_release_recursive>:
 8004ce2:	4770      	bx	lr

08004ce4 <_free_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	d040      	beq.n	8004d6e <_free_r+0x8a>
 8004cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf0:	1f0c      	subs	r4, r1, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bfb8      	it	lt
 8004cf6:	18e4      	addlt	r4, r4, r3
 8004cf8:	f000 f8de 	bl	8004eb8 <__malloc_lock>
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d70 <_free_r+0x8c>)
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	b933      	cbnz	r3, 8004d10 <_free_r+0x2c>
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6014      	str	r4, [r2, #0]
 8004d06:	4628      	mov	r0, r5
 8004d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d0c:	f000 b8da 	b.w	8004ec4 <__malloc_unlock>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d908      	bls.n	8004d26 <_free_r+0x42>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	1821      	adds	r1, r4, r0
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf01      	itttt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	1809      	addeq	r1, r1, r0
 8004d22:	6021      	streq	r1, [r4, #0]
 8004d24:	e7ed      	b.n	8004d02 <_free_r+0x1e>
 8004d26:	461a      	mov	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b10b      	cbz	r3, 8004d30 <_free_r+0x4c>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x42>
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	1850      	adds	r0, r2, r1
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x6c>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	1850      	adds	r0, r2, r1
 8004d3e:	4283      	cmp	r3, r0
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	d1e0      	bne.n	8004d06 <_free_r+0x22>
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4408      	add	r0, r1
 8004d4a:	6010      	str	r0, [r2, #0]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	e7da      	b.n	8004d06 <_free_r+0x22>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x74>
 8004d52:	230c      	movs	r3, #12
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	e7d6      	b.n	8004d06 <_free_r+0x22>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	1821      	adds	r1, r4, r0
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf01      	itttt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	1809      	addeq	r1, r1, r0
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6054      	str	r4, [r2, #4]
 8004d6c:	e7cb      	b.n	8004d06 <_free_r+0x22>
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	20000ae8 	.word	0x20000ae8

08004d74 <sbrk_aligned>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4e0f      	ldr	r6, [pc, #60]	@ (8004db4 <sbrk_aligned+0x40>)
 8004d78:	460c      	mov	r4, r1
 8004d7a:	6831      	ldr	r1, [r6, #0]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b911      	cbnz	r1, 8004d86 <sbrk_aligned+0x12>
 8004d80:	f000 fbaa 	bl	80054d8 <_sbrk_r>
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fba5 	bl	80054d8 <_sbrk_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	d103      	bne.n	8004d9a <sbrk_aligned+0x26>
 8004d92:	f04f 34ff 	mov.w	r4, #4294967295
 8004d96:	4620      	mov	r0, r4
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d0f8      	beq.n	8004d96 <sbrk_aligned+0x22>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fb96 	bl	80054d8 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d1f2      	bne.n	8004d96 <sbrk_aligned+0x22>
 8004db0:	e7ef      	b.n	8004d92 <sbrk_aligned+0x1e>
 8004db2:	bf00      	nop
 8004db4:	20000ae4 	.word	0x20000ae4

08004db8 <_malloc_r>:
 8004db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dbc:	1ccd      	adds	r5, r1, #3
 8004dbe:	f025 0503 	bic.w	r5, r5, #3
 8004dc2:	3508      	adds	r5, #8
 8004dc4:	2d0c      	cmp	r5, #12
 8004dc6:	bf38      	it	cc
 8004dc8:	250c      	movcc	r5, #12
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	4606      	mov	r6, r0
 8004dce:	db01      	blt.n	8004dd4 <_malloc_r+0x1c>
 8004dd0:	42a9      	cmp	r1, r5
 8004dd2:	d904      	bls.n	8004dde <_malloc_r+0x26>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	6033      	str	r3, [r6, #0]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004eb4 <_malloc_r+0xfc>
 8004de2:	f000 f869 	bl	8004eb8 <__malloc_lock>
 8004de6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dea:	461c      	mov	r4, r3
 8004dec:	bb44      	cbnz	r4, 8004e40 <_malloc_r+0x88>
 8004dee:	4629      	mov	r1, r5
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff ffbf 	bl	8004d74 <sbrk_aligned>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	4604      	mov	r4, r0
 8004dfa:	d158      	bne.n	8004eae <_malloc_r+0xf6>
 8004dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8004e00:	4627      	mov	r7, r4
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	d143      	bne.n	8004e8e <_malloc_r+0xd6>
 8004e06:	2c00      	cmp	r4, #0
 8004e08:	d04b      	beq.n	8004ea2 <_malloc_r+0xea>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	eb04 0903 	add.w	r9, r4, r3
 8004e14:	f000 fb60 	bl	80054d8 <_sbrk_r>
 8004e18:	4581      	cmp	r9, r0
 8004e1a:	d142      	bne.n	8004ea2 <_malloc_r+0xea>
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	1a6d      	subs	r5, r5, r1
 8004e22:	4629      	mov	r1, r5
 8004e24:	f7ff ffa6 	bl	8004d74 <sbrk_aligned>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d03a      	beq.n	8004ea2 <_malloc_r+0xea>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	442b      	add	r3, r5
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	f8d8 3000 	ldr.w	r3, [r8]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	bb62      	cbnz	r2, 8004e94 <_malloc_r+0xdc>
 8004e3a:	f8c8 7000 	str.w	r7, [r8]
 8004e3e:	e00f      	b.n	8004e60 <_malloc_r+0xa8>
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	1b52      	subs	r2, r2, r5
 8004e44:	d420      	bmi.n	8004e88 <_malloc_r+0xd0>
 8004e46:	2a0b      	cmp	r2, #11
 8004e48:	d917      	bls.n	8004e7a <_malloc_r+0xc2>
 8004e4a:	1961      	adds	r1, r4, r5
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	6025      	str	r5, [r4, #0]
 8004e50:	bf18      	it	ne
 8004e52:	6059      	strne	r1, [r3, #4]
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	bf08      	it	eq
 8004e58:	f8c8 1000 	streq.w	r1, [r8]
 8004e5c:	5162      	str	r2, [r4, r5]
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f82f 	bl	8004ec4 <__malloc_unlock>
 8004e66:	f104 000b 	add.w	r0, r4, #11
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	f020 0007 	bic.w	r0, r0, #7
 8004e70:	1ac2      	subs	r2, r0, r3
 8004e72:	bf1c      	itt	ne
 8004e74:	1a1b      	subne	r3, r3, r0
 8004e76:	50a3      	strne	r3, [r4, r2]
 8004e78:	e7af      	b.n	8004dda <_malloc_r+0x22>
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	bf0c      	ite	eq
 8004e80:	f8c8 2000 	streq.w	r2, [r8]
 8004e84:	605a      	strne	r2, [r3, #4]
 8004e86:	e7eb      	b.n	8004e60 <_malloc_r+0xa8>
 8004e88:	4623      	mov	r3, r4
 8004e8a:	6864      	ldr	r4, [r4, #4]
 8004e8c:	e7ae      	b.n	8004dec <_malloc_r+0x34>
 8004e8e:	463c      	mov	r4, r7
 8004e90:	687f      	ldr	r7, [r7, #4]
 8004e92:	e7b6      	b.n	8004e02 <_malloc_r+0x4a>
 8004e94:	461a      	mov	r2, r3
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d1fb      	bne.n	8004e94 <_malloc_r+0xdc>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6053      	str	r3, [r2, #4]
 8004ea0:	e7de      	b.n	8004e60 <_malloc_r+0xa8>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f000 f80c 	bl	8004ec4 <__malloc_unlock>
 8004eac:	e794      	b.n	8004dd8 <_malloc_r+0x20>
 8004eae:	6005      	str	r5, [r0, #0]
 8004eb0:	e7d6      	b.n	8004e60 <_malloc_r+0xa8>
 8004eb2:	bf00      	nop
 8004eb4:	20000ae8 	.word	0x20000ae8

08004eb8 <__malloc_lock>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	@ (8004ec0 <__malloc_lock+0x8>)
 8004eba:	f7ff bf11 	b.w	8004ce0 <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20000ae0 	.word	0x20000ae0

08004ec4 <__malloc_unlock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	@ (8004ecc <__malloc_unlock+0x8>)
 8004ec6:	f7ff bf0c 	b.w	8004ce2 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000ae0 	.word	0x20000ae0

08004ed0 <__ssputs_r>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	461f      	mov	r7, r3
 8004ed6:	688e      	ldr	r6, [r1, #8]
 8004ed8:	4682      	mov	sl, r0
 8004eda:	42be      	cmp	r6, r7
 8004edc:	460c      	mov	r4, r1
 8004ede:	4690      	mov	r8, r2
 8004ee0:	680b      	ldr	r3, [r1, #0]
 8004ee2:	d82d      	bhi.n	8004f40 <__ssputs_r+0x70>
 8004ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004eec:	d026      	beq.n	8004f3c <__ssputs_r+0x6c>
 8004eee:	6965      	ldr	r5, [r4, #20]
 8004ef0:	6909      	ldr	r1, [r1, #16]
 8004ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef6:	eba3 0901 	sub.w	r9, r3, r1
 8004efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004efe:	1c7b      	adds	r3, r7, #1
 8004f00:	444b      	add	r3, r9
 8004f02:	106d      	asrs	r5, r5, #1
 8004f04:	429d      	cmp	r5, r3
 8004f06:	bf38      	it	cc
 8004f08:	461d      	movcc	r5, r3
 8004f0a:	0553      	lsls	r3, r2, #21
 8004f0c:	d527      	bpl.n	8004f5e <__ssputs_r+0x8e>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7ff ff52 	bl	8004db8 <_malloc_r>
 8004f14:	4606      	mov	r6, r0
 8004f16:	b360      	cbz	r0, 8004f72 <__ssputs_r+0xa2>
 8004f18:	464a      	mov	r2, r9
 8004f1a:	6921      	ldr	r1, [r4, #16]
 8004f1c:	f000 fafa 	bl	8005514 <memcpy>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	6126      	str	r6, [r4, #16]
 8004f2e:	444e      	add	r6, r9
 8004f30:	6026      	str	r6, [r4, #0]
 8004f32:	463e      	mov	r6, r7
 8004f34:	6165      	str	r5, [r4, #20]
 8004f36:	eba5 0509 	sub.w	r5, r5, r9
 8004f3a:	60a5      	str	r5, [r4, #8]
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	d900      	bls.n	8004f42 <__ssputs_r+0x72>
 8004f40:	463e      	mov	r6, r7
 8004f42:	4632      	mov	r2, r6
 8004f44:	4641      	mov	r1, r8
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	f000 faac 	bl	80054a4 <memmove>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	1b9b      	subs	r3, r3, r6
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	4433      	add	r3, r6
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	462a      	mov	r2, r5
 8004f60:	f000 fae6 	bl	8005530 <_realloc_r>
 8004f64:	4606      	mov	r6, r0
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d1e0      	bne.n	8004f2c <__ssputs_r+0x5c>
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	6921      	ldr	r1, [r4, #16]
 8004f6e:	f7ff feb9 	bl	8004ce4 <_free_r>
 8004f72:	230c      	movs	r3, #12
 8004f74:	f8ca 3000 	str.w	r3, [sl]
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	e7e9      	b.n	8004f5a <__ssputs_r+0x8a>
	...

08004f88 <_svfiprintf_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4698      	mov	r8, r3
 8004f8e:	898b      	ldrh	r3, [r1, #12]
 8004f90:	4607      	mov	r7, r0
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	460d      	mov	r5, r1
 8004f96:	4614      	mov	r4, r2
 8004f98:	b09d      	sub	sp, #116	@ 0x74
 8004f9a:	d510      	bpl.n	8004fbe <_svfiprintf_r+0x36>
 8004f9c:	690b      	ldr	r3, [r1, #16]
 8004f9e:	b973      	cbnz	r3, 8004fbe <_svfiprintf_r+0x36>
 8004fa0:	2140      	movs	r1, #64	@ 0x40
 8004fa2:	f7ff ff09 	bl	8004db8 <_malloc_r>
 8004fa6:	6028      	str	r0, [r5, #0]
 8004fa8:	6128      	str	r0, [r5, #16]
 8004faa:	b930      	cbnz	r0, 8004fba <_svfiprintf_r+0x32>
 8004fac:	230c      	movs	r3, #12
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b01d      	add	sp, #116	@ 0x74
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	2340      	movs	r3, #64	@ 0x40
 8004fbc:	616b      	str	r3, [r5, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fc8:	2330      	movs	r3, #48	@ 0x30
 8004fca:	f04f 0901 	mov.w	r9, #1
 8004fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fd2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800516c <_svfiprintf_r+0x1e4>
 8004fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fda:	4623      	mov	r3, r4
 8004fdc:	469a      	mov	sl, r3
 8004fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fe2:	b10a      	cbz	r2, 8004fe8 <_svfiprintf_r+0x60>
 8004fe4:	2a25      	cmp	r2, #37	@ 0x25
 8004fe6:	d1f9      	bne.n	8004fdc <_svfiprintf_r+0x54>
 8004fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8004fec:	d00b      	beq.n	8005006 <_svfiprintf_r+0x7e>
 8004fee:	465b      	mov	r3, fp
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f7ff ff6b 	bl	8004ed0 <__ssputs_r>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f000 80a7 	beq.w	800514e <_svfiprintf_r+0x1c6>
 8005000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005002:	445a      	add	r2, fp
 8005004:	9209      	str	r2, [sp, #36]	@ 0x24
 8005006:	f89a 3000 	ldrb.w	r3, [sl]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 809f 	beq.w	800514e <_svfiprintf_r+0x1c6>
 8005010:	2300      	movs	r3, #0
 8005012:	f04f 32ff 	mov.w	r2, #4294967295
 8005016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800501a:	f10a 0a01 	add.w	sl, sl, #1
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005026:	931a      	str	r3, [sp, #104]	@ 0x68
 8005028:	4654      	mov	r4, sl
 800502a:	2205      	movs	r2, #5
 800502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005030:	484e      	ldr	r0, [pc, #312]	@ (800516c <_svfiprintf_r+0x1e4>)
 8005032:	f000 fa61 	bl	80054f8 <memchr>
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	b9d8      	cbnz	r0, 8005072 <_svfiprintf_r+0xea>
 800503a:	06d0      	lsls	r0, r2, #27
 800503c:	bf44      	itt	mi
 800503e:	2320      	movmi	r3, #32
 8005040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005044:	0711      	lsls	r1, r2, #28
 8005046:	bf44      	itt	mi
 8005048:	232b      	movmi	r3, #43	@ 0x2b
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800504e:	f89a 3000 	ldrb.w	r3, [sl]
 8005052:	2b2a      	cmp	r3, #42	@ 0x2a
 8005054:	d015      	beq.n	8005082 <_svfiprintf_r+0xfa>
 8005056:	4654      	mov	r4, sl
 8005058:	2000      	movs	r0, #0
 800505a:	f04f 0c0a 	mov.w	ip, #10
 800505e:	9a07      	ldr	r2, [sp, #28]
 8005060:	4621      	mov	r1, r4
 8005062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005066:	3b30      	subs	r3, #48	@ 0x30
 8005068:	2b09      	cmp	r3, #9
 800506a:	d94b      	bls.n	8005104 <_svfiprintf_r+0x17c>
 800506c:	b1b0      	cbz	r0, 800509c <_svfiprintf_r+0x114>
 800506e:	9207      	str	r2, [sp, #28]
 8005070:	e014      	b.n	800509c <_svfiprintf_r+0x114>
 8005072:	eba0 0308 	sub.w	r3, r0, r8
 8005076:	fa09 f303 	lsl.w	r3, r9, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	46a2      	mov	sl, r4
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	e7d2      	b.n	8005028 <_svfiprintf_r+0xa0>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9103      	str	r1, [sp, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbb      	ittet	lt
 800508e:	425b      	neglt	r3, r3
 8005090:	f042 0202 	orrlt.w	r2, r2, #2
 8005094:	9307      	strge	r3, [sp, #28]
 8005096:	9307      	strlt	r3, [sp, #28]
 8005098:	bfb8      	it	lt
 800509a:	9204      	strlt	r2, [sp, #16]
 800509c:	7823      	ldrb	r3, [r4, #0]
 800509e:	2b2e      	cmp	r3, #46	@ 0x2e
 80050a0:	d10a      	bne.n	80050b8 <_svfiprintf_r+0x130>
 80050a2:	7863      	ldrb	r3, [r4, #1]
 80050a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a6:	d132      	bne.n	800510e <_svfiprintf_r+0x186>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	3402      	adds	r4, #2
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	9203      	str	r2, [sp, #12]
 80050b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005170 <_svfiprintf_r+0x1e8>
 80050bc:	2203      	movs	r2, #3
 80050be:	4650      	mov	r0, sl
 80050c0:	7821      	ldrb	r1, [r4, #0]
 80050c2:	f000 fa19 	bl	80054f8 <memchr>
 80050c6:	b138      	cbz	r0, 80050d8 <_svfiprintf_r+0x150>
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	eba0 000a 	sub.w	r0, r0, sl
 80050d0:	4082      	lsls	r2, r0
 80050d2:	4313      	orrs	r3, r2
 80050d4:	3401      	adds	r4, #1
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050dc:	2206      	movs	r2, #6
 80050de:	4825      	ldr	r0, [pc, #148]	@ (8005174 <_svfiprintf_r+0x1ec>)
 80050e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050e4:	f000 fa08 	bl	80054f8 <memchr>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d036      	beq.n	800515a <_svfiprintf_r+0x1d2>
 80050ec:	4b22      	ldr	r3, [pc, #136]	@ (8005178 <_svfiprintf_r+0x1f0>)
 80050ee:	bb1b      	cbnz	r3, 8005138 <_svfiprintf_r+0x1b0>
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	3307      	adds	r3, #7
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	3308      	adds	r3, #8
 80050fa:	9303      	str	r3, [sp, #12]
 80050fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fe:	4433      	add	r3, r6
 8005100:	9309      	str	r3, [sp, #36]	@ 0x24
 8005102:	e76a      	b.n	8004fda <_svfiprintf_r+0x52>
 8005104:	460c      	mov	r4, r1
 8005106:	2001      	movs	r0, #1
 8005108:	fb0c 3202 	mla	r2, ip, r2, r3
 800510c:	e7a8      	b.n	8005060 <_svfiprintf_r+0xd8>
 800510e:	2300      	movs	r3, #0
 8005110:	f04f 0c0a 	mov.w	ip, #10
 8005114:	4619      	mov	r1, r3
 8005116:	3401      	adds	r4, #1
 8005118:	9305      	str	r3, [sp, #20]
 800511a:	4620      	mov	r0, r4
 800511c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005120:	3a30      	subs	r2, #48	@ 0x30
 8005122:	2a09      	cmp	r2, #9
 8005124:	d903      	bls.n	800512e <_svfiprintf_r+0x1a6>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0c6      	beq.n	80050b8 <_svfiprintf_r+0x130>
 800512a:	9105      	str	r1, [sp, #20]
 800512c:	e7c4      	b.n	80050b8 <_svfiprintf_r+0x130>
 800512e:	4604      	mov	r4, r0
 8005130:	2301      	movs	r3, #1
 8005132:	fb0c 2101 	mla	r1, ip, r1, r2
 8005136:	e7f0      	b.n	800511a <_svfiprintf_r+0x192>
 8005138:	ab03      	add	r3, sp, #12
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	462a      	mov	r2, r5
 800513e:	4638      	mov	r0, r7
 8005140:	4b0e      	ldr	r3, [pc, #56]	@ (800517c <_svfiprintf_r+0x1f4>)
 8005142:	a904      	add	r1, sp, #16
 8005144:	f3af 8000 	nop.w
 8005148:	1c42      	adds	r2, r0, #1
 800514a:	4606      	mov	r6, r0
 800514c:	d1d6      	bne.n	80050fc <_svfiprintf_r+0x174>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	065b      	lsls	r3, r3, #25
 8005152:	f53f af2d 	bmi.w	8004fb0 <_svfiprintf_r+0x28>
 8005156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005158:	e72c      	b.n	8004fb4 <_svfiprintf_r+0x2c>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4638      	mov	r0, r7
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <_svfiprintf_r+0x1f4>)
 8005164:	a904      	add	r1, sp, #16
 8005166:	f000 f87d 	bl	8005264 <_printf_i>
 800516a:	e7ed      	b.n	8005148 <_svfiprintf_r+0x1c0>
 800516c:	08005622 	.word	0x08005622
 8005170:	08005628 	.word	0x08005628
 8005174:	0800562c 	.word	0x0800562c
 8005178:	00000000 	.word	0x00000000
 800517c:	08004ed1 	.word	0x08004ed1

08005180 <_printf_common>:
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	4616      	mov	r6, r2
 8005186:	4698      	mov	r8, r3
 8005188:	688a      	ldr	r2, [r1, #8]
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	4607      	mov	r7, r0
 800518e:	4293      	cmp	r3, r2
 8005190:	bfb8      	it	lt
 8005192:	4613      	movlt	r3, r2
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800519a:	460c      	mov	r4, r1
 800519c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051a0:	b10a      	cbz	r2, 80051a6 <_printf_common+0x26>
 80051a2:	3301      	adds	r3, #1
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	0699      	lsls	r1, r3, #26
 80051aa:	bf42      	ittt	mi
 80051ac:	6833      	ldrmi	r3, [r6, #0]
 80051ae:	3302      	addmi	r3, #2
 80051b0:	6033      	strmi	r3, [r6, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	f015 0506 	ands.w	r5, r5, #6
 80051b8:	d106      	bne.n	80051c8 <_printf_common+0x48>
 80051ba:	f104 0a19 	add.w	sl, r4, #25
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	6832      	ldr	r2, [r6, #0]
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dc2b      	bgt.n	8005220 <_printf_common+0xa0>
 80051c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	3b00      	subs	r3, #0
 80051d0:	bf18      	it	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	0692      	lsls	r2, r2, #26
 80051d6:	d430      	bmi.n	800523a <_printf_common+0xba>
 80051d8:	4641      	mov	r1, r8
 80051da:	4638      	mov	r0, r7
 80051dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051e0:	47c8      	blx	r9
 80051e2:	3001      	adds	r0, #1
 80051e4:	d023      	beq.n	800522e <_printf_common+0xae>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	6922      	ldr	r2, [r4, #16]
 80051ea:	f003 0306 	and.w	r3, r3, #6
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	bf14      	ite	ne
 80051f2:	2500      	movne	r5, #0
 80051f4:	6833      	ldreq	r3, [r6, #0]
 80051f6:	f04f 0600 	mov.w	r6, #0
 80051fa:	bf08      	it	eq
 80051fc:	68e5      	ldreq	r5, [r4, #12]
 80051fe:	f104 041a 	add.w	r4, r4, #26
 8005202:	bf08      	it	eq
 8005204:	1aed      	subeq	r5, r5, r3
 8005206:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800520a:	bf08      	it	eq
 800520c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005210:	4293      	cmp	r3, r2
 8005212:	bfc4      	itt	gt
 8005214:	1a9b      	subgt	r3, r3, r2
 8005216:	18ed      	addgt	r5, r5, r3
 8005218:	42b5      	cmp	r5, r6
 800521a:	d11a      	bne.n	8005252 <_printf_common+0xd2>
 800521c:	2000      	movs	r0, #0
 800521e:	e008      	b.n	8005232 <_printf_common+0xb2>
 8005220:	2301      	movs	r3, #1
 8005222:	4652      	mov	r2, sl
 8005224:	4641      	mov	r1, r8
 8005226:	4638      	mov	r0, r7
 8005228:	47c8      	blx	r9
 800522a:	3001      	adds	r0, #1
 800522c:	d103      	bne.n	8005236 <_printf_common+0xb6>
 800522e:	f04f 30ff 	mov.w	r0, #4294967295
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	3501      	adds	r5, #1
 8005238:	e7c1      	b.n	80051be <_printf_common+0x3e>
 800523a:	2030      	movs	r0, #48	@ 0x30
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005248:	4422      	add	r2, r4
 800524a:	3302      	adds	r3, #2
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005250:	e7c2      	b.n	80051d8 <_printf_common+0x58>
 8005252:	2301      	movs	r3, #1
 8005254:	4622      	mov	r2, r4
 8005256:	4641      	mov	r1, r8
 8005258:	4638      	mov	r0, r7
 800525a:	47c8      	blx	r9
 800525c:	3001      	adds	r0, #1
 800525e:	d0e6      	beq.n	800522e <_printf_common+0xae>
 8005260:	3601      	adds	r6, #1
 8005262:	e7d9      	b.n	8005218 <_printf_common+0x98>

08005264 <_printf_i>:
 8005264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	7e0f      	ldrb	r7, [r1, #24]
 800526a:	4691      	mov	r9, r2
 800526c:	2f78      	cmp	r7, #120	@ 0x78
 800526e:	4680      	mov	r8, r0
 8005270:	460c      	mov	r4, r1
 8005272:	469a      	mov	sl, r3
 8005274:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800527a:	d807      	bhi.n	800528c <_printf_i+0x28>
 800527c:	2f62      	cmp	r7, #98	@ 0x62
 800527e:	d80a      	bhi.n	8005296 <_printf_i+0x32>
 8005280:	2f00      	cmp	r7, #0
 8005282:	f000 80d3 	beq.w	800542c <_printf_i+0x1c8>
 8005286:	2f58      	cmp	r7, #88	@ 0x58
 8005288:	f000 80ba 	beq.w	8005400 <_printf_i+0x19c>
 800528c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005294:	e03a      	b.n	800530c <_printf_i+0xa8>
 8005296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800529a:	2b15      	cmp	r3, #21
 800529c:	d8f6      	bhi.n	800528c <_printf_i+0x28>
 800529e:	a101      	add	r1, pc, #4	@ (adr r1, 80052a4 <_printf_i+0x40>)
 80052a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005311 	.word	0x08005311
 80052ac:	0800528d 	.word	0x0800528d
 80052b0:	0800528d 	.word	0x0800528d
 80052b4:	0800528d 	.word	0x0800528d
 80052b8:	0800528d 	.word	0x0800528d
 80052bc:	08005311 	.word	0x08005311
 80052c0:	0800528d 	.word	0x0800528d
 80052c4:	0800528d 	.word	0x0800528d
 80052c8:	0800528d 	.word	0x0800528d
 80052cc:	0800528d 	.word	0x0800528d
 80052d0:	08005413 	.word	0x08005413
 80052d4:	0800533b 	.word	0x0800533b
 80052d8:	080053cd 	.word	0x080053cd
 80052dc:	0800528d 	.word	0x0800528d
 80052e0:	0800528d 	.word	0x0800528d
 80052e4:	08005435 	.word	0x08005435
 80052e8:	0800528d 	.word	0x0800528d
 80052ec:	0800533b 	.word	0x0800533b
 80052f0:	0800528d 	.word	0x0800528d
 80052f4:	0800528d 	.word	0x0800528d
 80052f8:	080053d5 	.word	0x080053d5
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6032      	str	r2, [r6, #0]
 8005304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800530c:	2301      	movs	r3, #1
 800530e:	e09e      	b.n	800544e <_printf_i+0x1ea>
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	1d19      	adds	r1, r3, #4
 8005316:	6031      	str	r1, [r6, #0]
 8005318:	0606      	lsls	r6, r0, #24
 800531a:	d501      	bpl.n	8005320 <_printf_i+0xbc>
 800531c:	681d      	ldr	r5, [r3, #0]
 800531e:	e003      	b.n	8005328 <_printf_i+0xc4>
 8005320:	0645      	lsls	r5, r0, #25
 8005322:	d5fb      	bpl.n	800531c <_printf_i+0xb8>
 8005324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005328:	2d00      	cmp	r5, #0
 800532a:	da03      	bge.n	8005334 <_printf_i+0xd0>
 800532c:	232d      	movs	r3, #45	@ 0x2d
 800532e:	426d      	negs	r5, r5
 8005330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005334:	230a      	movs	r3, #10
 8005336:	4859      	ldr	r0, [pc, #356]	@ (800549c <_printf_i+0x238>)
 8005338:	e011      	b.n	800535e <_printf_i+0xfa>
 800533a:	6821      	ldr	r1, [r4, #0]
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	0608      	lsls	r0, r1, #24
 8005340:	f853 5b04 	ldr.w	r5, [r3], #4
 8005344:	d402      	bmi.n	800534c <_printf_i+0xe8>
 8005346:	0649      	lsls	r1, r1, #25
 8005348:	bf48      	it	mi
 800534a:	b2ad      	uxthmi	r5, r5
 800534c:	2f6f      	cmp	r7, #111	@ 0x6f
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	bf14      	ite	ne
 8005352:	230a      	movne	r3, #10
 8005354:	2308      	moveq	r3, #8
 8005356:	4851      	ldr	r0, [pc, #324]	@ (800549c <_printf_i+0x238>)
 8005358:	2100      	movs	r1, #0
 800535a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800535e:	6866      	ldr	r6, [r4, #4]
 8005360:	2e00      	cmp	r6, #0
 8005362:	bfa8      	it	ge
 8005364:	6821      	ldrge	r1, [r4, #0]
 8005366:	60a6      	str	r6, [r4, #8]
 8005368:	bfa4      	itt	ge
 800536a:	f021 0104 	bicge.w	r1, r1, #4
 800536e:	6021      	strge	r1, [r4, #0]
 8005370:	b90d      	cbnz	r5, 8005376 <_printf_i+0x112>
 8005372:	2e00      	cmp	r6, #0
 8005374:	d04b      	beq.n	800540e <_printf_i+0x1aa>
 8005376:	4616      	mov	r6, r2
 8005378:	fbb5 f1f3 	udiv	r1, r5, r3
 800537c:	fb03 5711 	mls	r7, r3, r1, r5
 8005380:	5dc7      	ldrb	r7, [r0, r7]
 8005382:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005386:	462f      	mov	r7, r5
 8005388:	42bb      	cmp	r3, r7
 800538a:	460d      	mov	r5, r1
 800538c:	d9f4      	bls.n	8005378 <_printf_i+0x114>
 800538e:	2b08      	cmp	r3, #8
 8005390:	d10b      	bne.n	80053aa <_printf_i+0x146>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	07df      	lsls	r7, r3, #31
 8005396:	d508      	bpl.n	80053aa <_printf_i+0x146>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	6861      	ldr	r1, [r4, #4]
 800539c:	4299      	cmp	r1, r3
 800539e:	bfde      	ittt	le
 80053a0:	2330      	movle	r3, #48	@ 0x30
 80053a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053aa:	1b92      	subs	r2, r2, r6
 80053ac:	6122      	str	r2, [r4, #16]
 80053ae:	464b      	mov	r3, r9
 80053b0:	4621      	mov	r1, r4
 80053b2:	4640      	mov	r0, r8
 80053b4:	f8cd a000 	str.w	sl, [sp]
 80053b8:	aa03      	add	r2, sp, #12
 80053ba:	f7ff fee1 	bl	8005180 <_printf_common>
 80053be:	3001      	adds	r0, #1
 80053c0:	d14a      	bne.n	8005458 <_printf_i+0x1f4>
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	b004      	add	sp, #16
 80053c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	f043 0320 	orr.w	r3, r3, #32
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	2778      	movs	r7, #120	@ 0x78
 80053d6:	4832      	ldr	r0, [pc, #200]	@ (80054a0 <_printf_i+0x23c>)
 80053d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	6831      	ldr	r1, [r6, #0]
 80053e0:	061f      	lsls	r7, r3, #24
 80053e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80053e6:	d402      	bmi.n	80053ee <_printf_i+0x18a>
 80053e8:	065f      	lsls	r7, r3, #25
 80053ea:	bf48      	it	mi
 80053ec:	b2ad      	uxthmi	r5, r5
 80053ee:	6031      	str	r1, [r6, #0]
 80053f0:	07d9      	lsls	r1, r3, #31
 80053f2:	bf44      	itt	mi
 80053f4:	f043 0320 	orrmi.w	r3, r3, #32
 80053f8:	6023      	strmi	r3, [r4, #0]
 80053fa:	b11d      	cbz	r5, 8005404 <_printf_i+0x1a0>
 80053fc:	2310      	movs	r3, #16
 80053fe:	e7ab      	b.n	8005358 <_printf_i+0xf4>
 8005400:	4826      	ldr	r0, [pc, #152]	@ (800549c <_printf_i+0x238>)
 8005402:	e7e9      	b.n	80053d8 <_printf_i+0x174>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	e7f6      	b.n	80053fc <_printf_i+0x198>
 800540e:	4616      	mov	r6, r2
 8005410:	e7bd      	b.n	800538e <_printf_i+0x12a>
 8005412:	6833      	ldr	r3, [r6, #0]
 8005414:	6825      	ldr	r5, [r4, #0]
 8005416:	1d18      	adds	r0, r3, #4
 8005418:	6961      	ldr	r1, [r4, #20]
 800541a:	6030      	str	r0, [r6, #0]
 800541c:	062e      	lsls	r6, r5, #24
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	d501      	bpl.n	8005426 <_printf_i+0x1c2>
 8005422:	6019      	str	r1, [r3, #0]
 8005424:	e002      	b.n	800542c <_printf_i+0x1c8>
 8005426:	0668      	lsls	r0, r5, #25
 8005428:	d5fb      	bpl.n	8005422 <_printf_i+0x1be>
 800542a:	8019      	strh	r1, [r3, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	4616      	mov	r6, r2
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	e7bc      	b.n	80053ae <_printf_i+0x14a>
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	2100      	movs	r1, #0
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	6032      	str	r2, [r6, #0]
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	6862      	ldr	r2, [r4, #4]
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f859 	bl	80054f8 <memchr>
 8005446:	b108      	cbz	r0, 800544c <_printf_i+0x1e8>
 8005448:	1b80      	subs	r0, r0, r6
 800544a:	6060      	str	r0, [r4, #4]
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	2300      	movs	r3, #0
 8005452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005456:	e7aa      	b.n	80053ae <_printf_i+0x14a>
 8005458:	4632      	mov	r2, r6
 800545a:	4649      	mov	r1, r9
 800545c:	4640      	mov	r0, r8
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	47d0      	blx	sl
 8005462:	3001      	adds	r0, #1
 8005464:	d0ad      	beq.n	80053c2 <_printf_i+0x15e>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	079b      	lsls	r3, r3, #30
 800546a:	d413      	bmi.n	8005494 <_printf_i+0x230>
 800546c:	68e0      	ldr	r0, [r4, #12]
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	4298      	cmp	r0, r3
 8005472:	bfb8      	it	lt
 8005474:	4618      	movlt	r0, r3
 8005476:	e7a6      	b.n	80053c6 <_printf_i+0x162>
 8005478:	2301      	movs	r3, #1
 800547a:	4632      	mov	r2, r6
 800547c:	4649      	mov	r1, r9
 800547e:	4640      	mov	r0, r8
 8005480:	47d0      	blx	sl
 8005482:	3001      	adds	r0, #1
 8005484:	d09d      	beq.n	80053c2 <_printf_i+0x15e>
 8005486:	3501      	adds	r5, #1
 8005488:	68e3      	ldr	r3, [r4, #12]
 800548a:	9903      	ldr	r1, [sp, #12]
 800548c:	1a5b      	subs	r3, r3, r1
 800548e:	42ab      	cmp	r3, r5
 8005490:	dcf2      	bgt.n	8005478 <_printf_i+0x214>
 8005492:	e7eb      	b.n	800546c <_printf_i+0x208>
 8005494:	2500      	movs	r5, #0
 8005496:	f104 0619 	add.w	r6, r4, #25
 800549a:	e7f5      	b.n	8005488 <_printf_i+0x224>
 800549c:	08005633 	.word	0x08005633
 80054a0:	08005644 	.word	0x08005644

080054a4 <memmove>:
 80054a4:	4288      	cmp	r0, r1
 80054a6:	b510      	push	{r4, lr}
 80054a8:	eb01 0402 	add.w	r4, r1, r2
 80054ac:	d902      	bls.n	80054b4 <memmove+0x10>
 80054ae:	4284      	cmp	r4, r0
 80054b0:	4623      	mov	r3, r4
 80054b2:	d807      	bhi.n	80054c4 <memmove+0x20>
 80054b4:	1e43      	subs	r3, r0, #1
 80054b6:	42a1      	cmp	r1, r4
 80054b8:	d008      	beq.n	80054cc <memmove+0x28>
 80054ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054c2:	e7f8      	b.n	80054b6 <memmove+0x12>
 80054c4:	4601      	mov	r1, r0
 80054c6:	4402      	add	r2, r0
 80054c8:	428a      	cmp	r2, r1
 80054ca:	d100      	bne.n	80054ce <memmove+0x2a>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054d6:	e7f7      	b.n	80054c8 <memmove+0x24>

080054d8 <_sbrk_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	2300      	movs	r3, #0
 80054dc:	4d05      	ldr	r5, [pc, #20]	@ (80054f4 <_sbrk_r+0x1c>)
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fc f8ec 	bl	80016c0 <_sbrk>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_sbrk_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_sbrk_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000adc 	.word	0x20000adc

080054f8 <memchr>:
 80054f8:	4603      	mov	r3, r0
 80054fa:	b510      	push	{r4, lr}
 80054fc:	b2c9      	uxtb	r1, r1
 80054fe:	4402      	add	r2, r0
 8005500:	4293      	cmp	r3, r2
 8005502:	4618      	mov	r0, r3
 8005504:	d101      	bne.n	800550a <memchr+0x12>
 8005506:	2000      	movs	r0, #0
 8005508:	e003      	b.n	8005512 <memchr+0x1a>
 800550a:	7804      	ldrb	r4, [r0, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	428c      	cmp	r4, r1
 8005510:	d1f6      	bne.n	8005500 <memchr+0x8>
 8005512:	bd10      	pop	{r4, pc}

08005514 <memcpy>:
 8005514:	440a      	add	r2, r1
 8005516:	4291      	cmp	r1, r2
 8005518:	f100 33ff 	add.w	r3, r0, #4294967295
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	4770      	bx	lr
 8005520:	b510      	push	{r4, lr}
 8005522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005526:	4291      	cmp	r1, r2
 8005528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552c:	d1f9      	bne.n	8005522 <memcpy+0xe>
 800552e:	bd10      	pop	{r4, pc}

08005530 <_realloc_r>:
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	4680      	mov	r8, r0
 8005536:	4615      	mov	r5, r2
 8005538:	460c      	mov	r4, r1
 800553a:	b921      	cbnz	r1, 8005546 <_realloc_r+0x16>
 800553c:	4611      	mov	r1, r2
 800553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	f7ff bc39 	b.w	8004db8 <_malloc_r>
 8005546:	b92a      	cbnz	r2, 8005554 <_realloc_r+0x24>
 8005548:	f7ff fbcc 	bl	8004ce4 <_free_r>
 800554c:	2400      	movs	r4, #0
 800554e:	4620      	mov	r0, r4
 8005550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005554:	f000 f81a 	bl	800558c <_malloc_usable_size_r>
 8005558:	4285      	cmp	r5, r0
 800555a:	4606      	mov	r6, r0
 800555c:	d802      	bhi.n	8005564 <_realloc_r+0x34>
 800555e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005562:	d8f4      	bhi.n	800554e <_realloc_r+0x1e>
 8005564:	4629      	mov	r1, r5
 8005566:	4640      	mov	r0, r8
 8005568:	f7ff fc26 	bl	8004db8 <_malloc_r>
 800556c:	4607      	mov	r7, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	d0ec      	beq.n	800554c <_realloc_r+0x1c>
 8005572:	42b5      	cmp	r5, r6
 8005574:	462a      	mov	r2, r5
 8005576:	4621      	mov	r1, r4
 8005578:	bf28      	it	cs
 800557a:	4632      	movcs	r2, r6
 800557c:	f7ff ffca 	bl	8005514 <memcpy>
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff fbae 	bl	8004ce4 <_free_r>
 8005588:	463c      	mov	r4, r7
 800558a:	e7e0      	b.n	800554e <_realloc_r+0x1e>

0800558c <_malloc_usable_size_r>:
 800558c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005590:	1f18      	subs	r0, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	bfbc      	itt	lt
 8005596:	580b      	ldrlt	r3, [r1, r0]
 8005598:	18c0      	addlt	r0, r0, r3
 800559a:	4770      	bx	lr

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
